ROOT +++$+++ SP9973420 +++$+++ ROOT +++$+++ ROOT +++$+++ 2020-01-07T17:40:31Z +++$+++ Use movups instead of movdqu in block op codegen When VEX encoding is not availbale, movups encoding is one byte shorter. With VEX the two instructions have same length encoding so we can just use movups all the time.

Also fix perf score latency for movups & co., it was incorrectly set higher than movdqu's latency. +++$+++ 0 +++$+++ 0
COM0 +++$+++ SP9973420 +++$+++ ROOT +++$+++ ROOT +++$+++ 2020-01-07T17:44:32Z +++$+++ Somehow I missed this when improving block op codegen. Or perhaps I thought it's not relevant because it's only useful when VEX is not available and that should be rare these days. Well, unless you're crossgeningâ€¦

Diff summary:
```
Total bytes of diff: -105703 (-0.40% of base)
    diff is an improvement.
Top file improvements by size (bytes):
      -53016 : Microsoft.Diagnostics.Tracing.TraceEvent.dasm (-1.59% of base)
       -8062 : System.Private.CoreLib.dasm (-0.25% of base)
       -7991 : Microsoft.CodeAnalysis.CSharp.dasm (-0.38% of base)
       -7047 : Microsoft.CodeAnalysis.VisualBasic.dasm (-0.31% of base)
       -6368 : System.Linq.Parallel.dasm (-1.08% of base)
82 total files with size differences (82 improved, 0 regressed), 27 unchanged.
Top method improvements by size (bytes):
       -2074 (-3.36% of base) : Microsoft.Diagnostics.Tracing.TraceEvent.dasm - CtfTraceEventSource:InitEventMap():Dictionary`2
       -1937 (-1.95% of base) : Microsoft.Diagnostics.Tracing.TraceEvent.dasm - ApplicationServerTraceEventParser:EnumerateTemplates(Func`3,Action`1):this
       -1350 (-0.12% of base) : System.Linq.Expressions.dasm - FuncCallInstruction`3:Run(InterpretedFrame):int:this (3375 methods)
       -1256 (-2.68% of base) : Microsoft.Diagnostics.Tracing.TraceEvent.dasm - KernelTraceEventParser:EnumerateTemplates(Func`3,Action`1):this
       -1124 (-3.18% of base) : Microsoft.Diagnostics.Tracing.TraceEvent.dasm - ClrPrivateTraceEventParser:EnumerateTemplates(Func`3,Action`1):this
Top method improvements by size (percentage):
          -2 (-22.22% of base) : System.Private.CoreLib.dasm - Unsafe:WriteUnaligned(byref,Guid)
          -2 (-22.22% of base) : System.Reflection.Metadata.dasm - ImportDefinitionCollection:.ctor(MemoryBlock):this
          -2 (-22.22% of base) : System.Reflection.Metadata.dasm - GuidHeap:.ctor(MemoryBlock):this
          -2 (-22.22% of base) : System.Reflection.Metadata.dasm - UserStringHeap:.ctor(MemoryBlock):this
          -2 (-20.00% of base) : Microsoft.Diagnostics.Tracing.TraceEvent.dasm - StartStopActivity:set_ActivityID(Guid):this
13429 total methods with size differences (13429 improved, 0 regressed), 133176 unchanged.
```
Seems like Microsoft.Diagnostics.Tracing.TraceEvent still hasn't gave up on its plan of taking over the world by copying itself thousands of times... +++$+++ 0 +++$+++ 0
COM1 +++$+++ SP10487869 +++$+++ ROOT +++$+++ COM0 +++$+++ 2020-01-07T19:41:42Z +++$+++ Are there any penalties to using `movups` vs `movdqu` on modern CPUs? What about on older CPUs where VEX isn't available? +++$+++ 0 +++$+++ 0
COM2 +++$+++ SP10487869 +++$+++ ROOT +++$+++ COM1 +++$+++ 2020-01-07T19:46:47Z +++$+++ Looks like Agner's indicates no penalty on newer processors, but on some older processors it can be an additional latency between 1-4 cycles: <https://www.agner.org/optimize/microarchitecture.pdf> (see `bypass delay` for various CPUs). +++$+++ 0 +++$+++ 0
COM3 +++$+++ SP22642771 +++$+++ ROOT +++$+++ COM2 +++$+++ 2020-01-07T20:38:35Z +++$+++ @dotnet/jit-contrib  +++$+++ 0 +++$+++ 0
COM4 +++$+++ SP9973420 +++$+++ ROOT +++$+++ COM3 +++$+++ 2020-01-07T21:13:22Z +++$+++ > (see bypass delay for various CPUs).

What bypass delay? These are load/stores so they're handled by the load/store units and not by FP/int units.

 +++$+++ 0 +++$+++ 0
COM5 +++$+++ SP10487869 +++$+++ ROOT +++$+++ COM4 +++$+++ 2020-01-07T21:35:39Z +++$+++ For example, on Core2:
> The load/store unit is closely connected with the integer unit, so that there is no additional
latency when transferring data between the integer unit and the load/store unit. There is a
one clock latency when transferring data from memory (load unit) to the floating point unit,
but there is no additional latency when transferring data from the floating point unit to
memory (store unit).

On the Nehalem section (in regards to a store):
> Replacing the last MOVDQA with MOVAPS has no influence on latencies,
but it may have on future processors.

On the Sandy Bridge and Ivy Bridge pipeline:
> There is only rarely a bypass delay when using the wrong
type of move instruction, for example MOVAPS instead of MOVDQA. 

etc...
 +++$+++ 0 +++$+++ 0
COM6 +++$+++ SP10487869 +++$+++ ROOT +++$+++ COM5 +++$+++ 2020-01-07T21:37:12Z +++$+++ It doesn't look like something that is needed to be a consideration given that these are largely just for block copies and will generally be used with the integer pipeline in the end anyways. It was just something I was interested in as I understood their "could" be penalties in some scenarios. +++$+++ 0 +++$+++ 0
COM7 +++$+++ SP2973870 +++$+++ ROOT +++$+++ COM6 +++$+++ 2020-01-07T21:43:02Z +++$+++ This seems reasonable to me, especially as it is most relevant to the crossgen scenario where I believe the size is a bigger issue than at JIT time. @briansull for consideration of the PerfScore changes.
@tannergooding - I take it you are on board with this change as well? +++$+++ 1 +++$+++ 0
COM8 +++$+++ SP9973420 +++$+++ ROOT +++$+++ COM7 +++$+++ 2020-01-07T23:28:44Z +++$+++ @briansull Care to explain why did you deleted my comment? +++$+++ 0 +++$+++ 0
COM9 +++$+++ SP11621884 +++$+++ ROOT +++$+++ COM8 +++$+++ 2020-01-08T01:35:07Z +++$+++ Mike you are a valued JIT contributor and I just thought that your last comment was a bit too harsh.

I didn't really think about it too much.  I was just trying to keep things peaceful here. +++$+++ 0 +++$+++ 0
COM10 +++$+++ SP2608468 +++$+++ ROOT +++$+++ COM9 +++$+++ 2020-01-08T01:53:39Z +++$+++ I didn't read the comment (it's deleted). In general, for comments that are just a bit too harsh, we typically "hide" them instead of deleting them. It's a soft way of communicating that a comment included some text that could be offensive to someone, and then only people that are really curious see it, and everyone generally gets on with the topic. That's what we've done elsewhere and something to consider. +++$+++ 0 +++$+++ 0
COM11 +++$+++ SP5169960 +++$+++ ROOT +++$+++ COM10 +++$+++ 2020-02-11T18:06:22Z +++$+++ @mikedn 

> @briansull Care to explain why did you deleted my comment?

Because it was completely inappropriate. Telling other contributors to not comment because "you have no clue what you're talking about" is toxic behavior. OSS is also about building & nurturing a community and that also includes involving people who still learn and have passion for the subject. We're not just here to review, merge, and maintain *your* PRs and ideas. While your contributions are clearly valuable, you need to accept that you're part of a larger community and need to treat others with respect.

So to be clear: just because your contributions are valuable doesn't mean you get a pass on following our [Code of Conduct](https://dotnetfoundation.org/code-of-conduct). +++$+++ 0 +++$+++ 0
COM12 +++$+++ SP9973420 +++$+++ ROOT +++$+++ COM11 +++$+++ 2020-02-11T18:19:06Z +++$+++ @terrajobst 

> Telling other contributors to not comment because "you have no clue what you're talking about" is toxic behavior

I don't remember what exactly the deleted comment contained but I'm pretty sure I did not tell anyone not to comment. I complained about his superficial behavior.

> So to be clear: just because your contributions are valuable doesn't mean you get a pass on following our Code of Conduct.

Well, I consider his behavior to show a lack of respect for other's people work and time. As such I don't care about what the code of conduct says because anyway I don't plan to contribute more work to this OSS project. Speaking about toxic behavior... +++$+++ 0 +++$+++ 0
COM13 +++$+++ SP312863 +++$+++ ROOT +++$+++ COM12 +++$+++ 2020-02-11T19:22:33Z +++$+++ @mikedn Could it be that it's rather a cultural difference? I used to be a Mono contributor, and once had a conflict with a maintainer. His remarks were more harsh than the ones you made, and Miguel was very diplomatic in resolving the "dispute". I honestly believe that his harsh remarks were not intentional.

I continued to be a contributer (until my work/life situation decided otherwise) as I believed in the project and I felt my contributions were appreciated.

In your situation, I think the MS maintainers handled the situation correctly (without being harsh, again this is from my point of view). There's no doubt your contributions are greatly appreciated; this by both the MS maintainers and the community.

It would be a great loss for the .NET community if you'd stop contributing. If you consider my comment to be negative, just tell me and I'll happily remove it. +++$+++ 0 +++$+++ 0
COM14 +++$+++ SP9973420 +++$+++ ROOT +++$+++ COM13 +++$+++ 2020-02-11T23:03:52Z +++$+++ @drieseng 
>  Could it be that it's rather a cultural difference?

I'm not sure what that difference might be. Nobody appreciates random/out of context quoting, straightforward answer avoidance, jumping to conclusions and whatnot. Well, some might be more tolerant to it than others but still.

> There's no doubt your contributions are greatly appreciated; this by both the MS maintainers and the community.

Well, I appreciate they're appreciated but at the same time I don't really care. I did not contribute to get praise, I only contributed for the fun of it. And it stops being fun if I have to deal with nonsense. If I want to deal with nonsense I can probably find that pretty easily at work, there's no need for me to come here and ruin my evening.
 +++$+++ 0 +++$+++ 0
COM15 +++$+++ SP9973420 +++$+++ ROOT +++$+++ COM14 +++$+++ 2020-02-11T23:09:18Z +++$+++ And to be clear: as far as I'm concerned this matter is closed. I have no idea why terrajobst felt the need to comment on it after more than a month. +++$+++ 0 +++$+++ 0
COM16 +++$+++ SP5169960 +++$+++ ROOT +++$+++ COM15 +++$+++ 2020-02-12T01:17:39Z +++$+++ @drieseng

> It would be a great loss for the .NET community if you'd stop contributing. If you consider my comment to be negative, just tell me and I'll happily remove it.

I wholeheartedly agree with that. @mikedn has contributed greatly and we totally appreciate all the skills & expertise for that reason. But we need to be careful that we don't use valuable contributions as a currency to offset disrespectful behavior.

@mikedn

> I have no idea why terrajobst felt the need to comment on it after more than a month.

Purely practical reasons -- I was only made aware of this issue today and I believe what I said needed to be said.

Our goal is to create an inclusive and respectful community and that includes all of us: Microsoft employees, frequent contributors, and newcomers. But these are only hollow words unless we're willing to drive change where necessary. And that includes reminding people to be respectful if their actions aren't and removing people who refuse to do so. From looking at the OSS ecosystem and listening to other communities it's clear to me that ignoring toxic behavior in the spirit of taking the high road does nothing but normalizing said toxic behavior. That's why I said what I said.

> Well, I appreciate they're appreciated but at the same time I don't really care. I did not contribute to get praise, I only contributed for the fun of it.

I can very much relate to that. Thus, I'd ask you to consider that this applies to other people as well. As far as I know, the vast majority of folks working on .NET do that because they love working on this stuff.

But how much fun do you think it is to hear that someone you respect tells you that you don't know what you're are talking about?

Code reviews and PR discussions are often controversial *because* people care. We're all guilty of saying things that come across much harsher than we intended. Being respectful doesn't mean not making mistakes, it means unwillingness to learn from them and/or doubling down on them. And I for one am not willing to tell people to suck it up because that's just the culture we have. We generally don't have that culture internally or with our community. And the places where we do I consider it a defect that needs to be fixed. +++$+++ 0 +++$+++ 0
COM17 +++$+++ SP9973420 +++$+++ ROOT +++$+++ COM16 +++$+++ 2020-02-12T19:39:41Z +++$+++ @terrajobst 

> But how much fun do you think it is to hear that someone you respect tells you that you don't know what you're are talking about?

And if you really do not know what you are talking about then what? You shield yourself in the code of conduct and go OMG, how could people dare telling me that I'm wrong? Or perhaps you try to do better next time and avoid the not so fun part of messing up? Working for fun doesn't imply that you get to do whatever you want and that there are no consequences.

> Code reviews and PR discussions are often controversial because people care.

There was no real controversy here. I asked a question and I was expecting a reasonable answer, especially considering that it wasn't me who started this. Instead of an answer I've got some gibberish that tries to pass as code review or whatever that is supposed to be.

> Being respectful doesn't mean not making mistakes, it means unwillingness to learn from them and/or doubling down on them

It's exactly this unwillingness to learn from mistakes that brought us here. So now you're trying to explain to me how persistent shoot from the hip style commenting is respectful or not? Frankly I'm not sure what exactly it is. Let's just say that it is distasteful. Feel free to continue to go down this path, the only thing you'll achieve is to dig the hole deeper.

> And I for one am not willing to tell people to suck it up.

Yet here you are, telling me exactly that.
 +++$+++ 0 +++$+++ 0
COM18 +++$+++ SP5169960 +++$+++ ROOT +++$+++ COM17 +++$+++ 2020-02-12T20:43:38Z +++$+++ @mikedn

Tanner acted in good faith by asking questions to the best of his understanding. Telling him that he doesn't know what he's talking about is unacceptable. First of all, it's not an insightful comment from your end. If you want other people to learn, you need to give them more information beyond "you're wrong". But more importantly it's just plain rude. You're basically sending him the signal of "you're not welcome here".

But instead of apologizing or even just letting that feedback sink in, you're now trying to turn the tables by saying you got victimized by Tanner because he asked you a technical question and that it's unreasonable from our end to ask you to be respectful in your responses to him.

You're more than welcome to continue to contribute to .NET. But I'll be clear: if we observe behavior like this in the future, we'll ultimately block you. We can't have other contributors stop engaging with us because of your behavior. While your contributions are valued, they don't warrant losing other contributors as collateral damage. +++$+++ 0 +++$+++ 0
