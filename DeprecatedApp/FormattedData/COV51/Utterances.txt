ROOT +++$+++ SP18530681 +++$+++ ROOT +++$+++ ROOT +++$+++ 2019-04-25T11:42:07Z +++$+++ [Proposal] CSS Variables I know CSS variables has already been discussed (#26596) and I saw this reply
https://github.com/twbs/bootstrap/issues/26596#issuecomment-403342215 

So I come with a proposal which not requires heavy refactoring 

## Proposal

Instead of using directly native functions like `darken` or `lighten` we should use wrappers
Ex : `try-darken`

``` scss
@function try-darken($color, $percent) {

  @if (not $enable-variables){
    @return darken($color, $percent);
  }

  @if str_slice("#{$color}", 0, 3) == "var" {
    $percent-str: "#{$percent * 100}";
    $percent-value: str_slice($percent-str, 0, str_length($percent-str) - 1);
    $original: str_slice($color, 7, str_length($color) - 1);
    $variable: --#{$original}-darken-#{$percent-value};
    @return var($variable);
  }

  @return darken($color, $percent);
}
```
This wrapper handles the variable construction and create shades of colors.

Then we need to generate all shades of variables
``` scss 
:root {
  @if ($enable-variables){
    @each $color, $value in $theme-colors-values {
      --#{$color}: #{$value};
      --#{$color}-yiq: #{color-yiq($value)};

      @each $shade in $theme-colors-shades {
        --#{$color}-darken-#{$shade * 100}: #{darken($value, $shade)};
        --#{$color}-darken-#{$shade * 100}-yiq: #{color-yiq(darken($value, $shade))};
        --#{$color}-lighten-#{$shade * 100}: #{lighten($value, $shade)};
        --#{$color}-lighten-#{$shade * 100}-yiq: #{color-yiq(lighten($value, $shade))};
      }
    }
  }
  @else{
    @each $color, $value in $theme-colors {
      --#{$color}: #{$value};
    }
  }
}
```
This creates all necessary variables.
As you see, this requires to list all necessary shades, and concret theme color values 

``` scss 
$primary:    var(--primary) !default;
$secondary:  var(--secondary) !default;
$success:    var(--success) !default;
$info:       var(--info) !default;
$warning:    var(--warning) !default;
$danger:     var(--danger) !default;
$light:      var(--light) !default;
$dark:       var(--dark) !default;

$theme-colors-values: map-merge(
  (
    "primary":     $blue,
    "secondary":   $gray-600,
    "success":     $green,
    "info":        $cyan,
    "warning":     $yellow,
    "danger":      $red,
    "light":       $gray-100,
    "dark":        $gray-800,
  ),
  $theme-colors-values
);

$theme-colors-shades: (7.5, 10, 12.5, 25, 35, 40) !default;
```

With theses few tricks I managed to create all variables I needed for theme colors, and I can change it on the fly with few javascript

## Demo
Here is a demo site with an implementation 
https://felx-b.github.io/docs/4.3/getting-started/introduction/
You can change the primary color on fly in the nav bar

## Source
Here are the sources
https://github.com/Felx-B/bootstrap-css-variable

## Alternative
If the proposal is rejected, it would worth nothing to wrap native function calls (like `darken/lighten/mix` ...) into upper functions (`try-darken`, `try-lighten` ...) so we could override these behaviors to implement CSS variable ourselves. +++$+++ 1 +++$+++ 0
COM0 +++$+++ SP18305551 +++$+++ ROOT +++$+++ ROOT +++$+++ 2019-04-25T12:46:35Z +++$+++ While this seems useful, I can see issues supporting IE which doesn't support CSS Variables at all.
Bootstrap 4.X lists support for IE10+ (not sure where BS5 will go)
[https://caniuse.com/#feat=css-variables](https://caniuse.com/#feat=css-variables)
 +++$+++ 0 +++$+++ 0
COM1 +++$+++ SP895831 +++$+++ ROOT +++$+++ COM0 +++$+++ 2019-04-25T23:37:08Z +++$+++ BS5 will (last time I checked into our internal discussions) still support IE11 +++$+++ 0 +++$+++ 0
COM2 +++$+++ SP18530681 +++$+++ ROOT +++$+++ COM1 +++$+++ 2019-04-26T06:54:42Z +++$+++ This feature should not be default, this should remain optional until all supported browsers handle it.
`$enable-variables` options is here to opt-in for this +++$+++ 0 +++$+++ 0
COM3 +++$+++ SP11559216 +++$+++ ROOT +++$+++ COM2 +++$+++ 2019-04-26T09:28:59Z +++$+++ This won't work in not-IE browsers:
```
$primary:    var(--primary) !default;
$secondary:  var(--secondary) !default;
$success:    var(--success) !default;
$info:       var(--info) !default;
$warning:    var(--warning) !default;
$danger:     var(--danger) !default;
$light:      var(--light) !default;
$dark:       var(--dark) !default;

$theme-colors-values: map-merge(
  (
    "primary":     $blue,
    "secondary":   $gray-600,
    "success":     $green,
    "info":        $cyan,
    "warning":     $yellow,
    "danger":      $red,
    "light":       $gray-100,
    "dark":        $gray-800,
  ),
  $theme-colors-values
);

$theme-colors-shades: (7.5, 10, 12.5, 25, 35, 40) !default;
```

> `$enable-variables` options is here to opt-in for this

Maybe we can find a solution for this, but I'm a bit worried we'll overcomplicate everything just to make it possible to support css variables. +++$+++ 0 +++$+++ 0
COM4 +++$+++ SP98681 +++$+++ ROOT +++$+++ COM3 +++$+++ 2019-04-26T15:30:44Z +++$+++ Yeah, agreed on overcomplicating things here. Unless we move entirely to PostCSS with the build system to support it, we should continue to prioritize great Sass code. +++$+++ 0 +++$+++ 0
COM5 +++$+++ SP420691 +++$+++ ROOT +++$+++ COM4 +++$+++ 2019-04-27T09:47:05Z +++$+++ @Felx-B I love Your idea. I think css variables is `must-have` in bootstrap. With that every user could change interface colors - It's great! +++$+++ 1 +++$+++ 0
COM6 +++$+++ SP20647282 +++$+++ ROOT +++$+++ COM5 +++$+++ 2019-04-28T20:24:53Z +++$+++ @piernik and it’s easy too, not that the current scss is difficult but this is “easier”  +++$+++ 1 +++$+++ 0
COM7 +++$+++ SP11559216 +++$+++ ROOT +++$+++ COM6 +++$+++ 2019-04-29T06:38:27Z +++$+++ I'm going to lock this conversation because a lot of people will ask for this while we cannot provide support due to the IE11 support. Providing a solution with functions like `try-darken` could help us out, but we'll overcomplicate our codebase too much to make this possible. Maintaining this & tackling all edge cases will slow us down.

We 'll definitely have a look at support for css variables in the future (`v6`), but for now we 'll pass on this and focus on improving & extending other Bootstrap functionality. +++$+++ 0 +++$+++ 0
