{"id": "ROOT", "speaker": "bolds07", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2020-07-24T03:02:05Z", "text": "Json support to set Firebase Remote Configs defaults <!-- DO NOT DELETE \r validate_template=false\r template_path=.github/ISSUE_TEMPLATE/fr.md\r -->\r \r ## What feature would you like to see?\r \r Would be very usefull to have a simple way to export the firebase remote config fields to a json/xml and import them into another project/default values file.\r \r Today in order to do that we must config a sample project (available here) but this project isnt able to generate de default values file.\r Would be very usefull to have a simple way to do that, i have several remote config fields and app wont work without them. so on first run user must wait a few seconds (depending on his internet) to load the remote config constants) would be very nice if i could take a snapshot of the remote config values and pack it inside the apk in order to make first run faster\r \r ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM0", "speaker": "google-oss-bot", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2020-07-24T03:02:06Z", "text": "I couldn't figure out how to label this issue, so I've labeled it for a human to triage. Hang tight.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "ashwinraghav", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2020-07-27T19:22:55Z", "text": "Hi @bolds07 \r\nThanks for the suggestion. Might need some help to understand better. We have a way for you to configure [default values](https://firebase.google.com/docs/remote-config/use-config-android) for RC. I assume what you are asking for is different in that you want to snapshot the config state of a client to an exported file that can be loaded into your app's distribution apk. That right?\r\nI do see that as a goal that competes directly with keeping your clients up to date with the latest config values that you have configured on the backend. Any thoughts on how you would want the clients to trade off those goals for new installations of your application? Would you rather see the values packed into your apk or the values configured on your backend?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "bolds07", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2020-07-27T21:03:14Z", "text": "> We have a way for you to configure default values for RC  \r\n\r\nthe way to configure default values for RC is taking a XML\r\n\r\nthe RC rest api speaks JSON, there is an obvious miscommunication problem! \r\n\r\nThere is a sample project in this repo, which teaches how to export the current RC into a json and import it into another RC project.\r\nwould be reasonable if that json could be used as default values for any project... without need of converting it to xml.\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "ashwinraghav", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2020-07-27T21:36:38Z", "text": "Default values are **not** intended to be used as a cache that sits in front of the RC service. They are defaults when no values have been configured on the service.\r\n\r\n> the way to configure default values for RC is taking a XML\r\n> the RC rest api speaks JSON, there is an obvious miscommunication problem!\r\n\r\nWe take the approach that is canonical to the platform. On Android, resources are typically XML. On iOS, it is a [plist](https://firebase.google.com/docs/remote-config/use-config-ios#set-in-app-default-parameter-values).\r\n\r\nIf I understand correctly, you are suggesting that we provide a way to configure defaults on the client using json. That seems reasonable.\r\n\r\nWorth noting that this won't solve the problem you originally raised of having to wait for the config values to be fetched after app installation.\r\n\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "bolds07", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2020-07-27T23:19:33Z", "text": "> Default values are not intended to be used as a cache that sits in front of the RC service. They are defaults when no values have been configured on the service.\r\n\r\ni really didnt understand that...\r\n\r\nfollow my thought:\r\n1- user first install app\r\n2- app tries to read a RC field during `onCreate` of first activity, the value isn't fectched yet so it will result as \"empty\".\r\n\r\nin my mind the default values will be read at this moment... am i wrong?\r\n\r\nare you saying that they arent read at this moment and only when the api knows for sure the fields doesnt exist on firebase i cant imagine a use case for it.\r\nbut if that is the case it is another suggestion to use this xml values as cache for first install apps.\r\n\r\nMy current solution is to create a loading screen for this situation. but it will fail if user tries to first open the app without internet connection (this might happen if user cleans app data)\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "danasilver", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2020-07-28T01:07:58Z", "text": "Hey @bolds07, I'm on the Remote Config team. Happy to help with how the RC SDK works with default values!\r\n\r\nWhen the SDK starts up, it loads any default values (like the ones in the XML file). When you call one of the get methods (like [`#getString(String key)`](https://firebase.google.com/docs/reference/android/com/google/firebase/remoteconfig/FirebaseRemoteConfig#getString(java.lang.String)), if a value has been fetched and activated the SDK will return that server value and otherwise return the default value for that key if one exists. Fetched values are also cached by the SDK so they'll be available (and be used over defaults) if the app has already fetched on a previous launch (and the user hasn't cleared app data).\r\n\r\nThe use case you describe where a user first opens the app without internet connection is a good case for default values since the app can use those in place of the server values.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "bolds07", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2020-07-28T12:59:54Z", "text": "@danasilver, So I was right and @ashwinraghav comment might be misunderstood.\r\n\r\nthis turn our case back to the start point. @danasilver \r\nA - >RC SDK for android accept default values only as xml file\r\nB - >RC Rest SDK export the current RC fields only as JSON\r\n\r\nthere is an  obvious miscomunication between the systems, they should speak a common language, otherwise you are forcing ALL PROJECTS to define twice the RC values", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "danasilver", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2020-07-28T19:35:44Z", "text": "I think @ashwinraghav explained this pretty well! We support a JSON REST API since that's a common standard for REST APIs on the web, and XML defaults on Android since that's the standard for the platform. I understand there can be frustration working between the formats.\r\n\r\nYou should only need to define RC in-app defaults once though - in the XML file. The default values saved online and available through the REST API are the server-side defaults used when no condition is met. There's more documentation on how Remote Config prioritizes parameter values in the docs here: https://firebase.google.com/docs/remote-config/parameters#parameter_value_priority", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "bolds07", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2020-07-29T13:37:40Z", "text": "I'm sorry to tell you @danasilver but this isnt \"frustrating\" this is a super stupid architecture design...\r\nI dont understand why people working for google have such a problem admting they make mistakes...  everybody does, what makes difference is fix them or not.\r\n\r\ni cant even imagine a meeting to present the product:\r\n\"Here we have a new tool that will allow developers to set constants remotelly, helping with A/B tests and allowing the developer to change apps behavior without re-deploy.\r\n\r\nWe will provide a rest service which accepts data in the json format.\r\nAnd in case developer wants to set some default values he can use a XML/plist\"\r\n\r\nIn my company someone proposing such a frankstein architecture would be fired.\r\n\r\nYou just told me that if someone has an app in both architectures and want to use the default values THIS PERSON MUST DEFINE EVERY FIELD 3 TIMES... does it sound smart?\r\n\r\n> You should only need to define RC in-app defaults once though\r\n\r\nthis is a wrong assumption, although i agree these values shouldn't change very often, software are LIVE things: they grow, they mutate, they acquire new powers.\r\nSame way new constants are added, removed, or default values might change in a lifetime of any software.\r\nIf you were using RC on the innitial development of other firebase services, are you telling me that the default values of 3 years ago would still work for today?\r\n\r\n\r\nI hate to be rude and also hate to teach people how to do their jobs. but this architecture design of firebase RC is a clear mistake, anyone with a basic software engineer understand should be able to see that.\r\nAnd this whole text could be avoided if you guys simple had said: \r\n\"yeah that was a bad idea, i will try to put your suggestion in a next changelog or add some tool to convert json/xml then json/plist and any other technology RC lays on\"\r\n\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "samtstern", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2020-07-29T20:32:29Z", "text": "@bolds07 I'm sorry but your tone is not acceptable, we expect everyone in the Firebase community to respect each other.  I hope you are able to work around your problem but we won't be able to help you any more on this thread.", "meta": {"posReactions": "0", "negReactions": "0"}}
