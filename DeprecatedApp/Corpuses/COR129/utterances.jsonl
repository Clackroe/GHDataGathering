{"id": "ROOT", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-03-30T10:34:14Z", "text": "Weird slowness scolling text in the console When outputting text from PowerShell on a Dell XPS 15, the rendering speed is amazingly slow.\r \r ~~I have not come across this on any other machine.~~\r \r Attached a short windows performance recording of this. \r conhost.exe (1608) and pwsh.exe (19432) are the relevant processes.\r \r [STAFFANX15.03-30-2018.11-25-22.zip](https://github.com/Microsoft/console/files/1863382/STAFFANX15.03-30-2018.11-25-22.zip)\r \r Hopefully someone more well versed in this domain can help figure out what is going on.", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM0", "speaker": "IISResetMe", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-03-30T11:41:01Z", "text": "It's caused by `conhost.exe` excessively hammering the registry to query the following two values:\r\n\r\n    HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell\\TabletMode\r\n    HKCU\\Software\\Microsoft\\Windows\\DWM\\ColorPrevalence\r\n\r\nHaving previously reported this issue through Feedback Hub (to no avail), let me offer my observations from debugging this issue:\r\n\r\n - It's not specific to Dell's XPS series - I've been able to reproduce on any Windows 10 installation from version 1703 and up\r\n - It only occurs when the console application writes output that causes the console to *scroll*\r\n - It only occurs when the console application in question is in foreground/focus\r\n - Each reg value mentioned above is queried 6 times, per scroll!!!\r\n\r\nAn easy way of show the resulting difference in speed is to compare to anything piped to `Out-String`:\r\n\r\n    $WindowHeight = $Host.UI.RawUI.WindowSize.Height\r\n    Clear-Host\r\n    $StopWatch = [Diagnostics.Stopwatch]::StartNew()\r\n    &{\r\n        1..($WindowHeight * 2)|ForEach-Object{\r\n            Write-Output \"test\"\r\n        }\r\n    }\r\n    $MultiString = $StopWatch.Elapsed\r\n    Clear-Host\r\n    $StopWatch = [Diagnostics.Stopwatch]::StartNew()\r\n    &{\r\n        1..($WindowHeight * 2)|ForEach-Object{\r\n            Write-Output \"test\"\r\n        }\r\n    } | Out-String\r\n    $SingleString = $StopWatch.Elapsed\r\n\r\nEven though we add overhead from `Out-String`, and the number of lines that the console host eventually need to write to the screen buffer are exactly the same, you'll find that the `$MultiString` measurement is significantly larger that `$SingleString`, presumably because the former caused the console host to scroll `$WindowsHeight` where as the latter only had to cause a single scroll.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "zadjii-msft", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2018-03-30T15:45:05Z", "text": "So I've definitely noticed this from time to time on my own laptop, which is an HP something or other - though it's definitely not something I've found to be consistently reproducible. \r\n\r\nI also know that conhost isn't the one doing this - at least not directly. From the sounds of it, DWM is getting involved during our paint and slowing us down, but I wouldn't have the faintest clue how to start debugging that. \r\n\r\n@bitcrazed anyone on the DWM, or composition, or something team that we can forward this issue to to have them take a look?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2018-03-31T07:09:05Z", "text": "![image](https://user-images.githubusercontent.com/3505151/38160780-2155300e-34c3-11e8-805c-b67a1dedabb5.png)\r\n\r\nIt is not obviously DWM.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2018-04-01T15:18:16Z", "text": "It is correlated to font size. Almost grinds to a halt with font size set to 36.\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "IISResetMe", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2018-04-01T15:37:50Z", "text": "Interestingly enough, I updated my Win10 Pro 1709 Friday night, and now (build **10.0.16299.309**) `conhost.exe` is no longer querying the registry keys mentioned above, but DWM queries this value:\r\n\r\n    HKCU\\Software\\Microsoft\\Windows\\DWM\\ColorPrevalence\r\n\r\n10 times per scroll. Still digging", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2018-04-03T20:12:57Z", "text": "fontdrvhost.exe shows up in the traces on machines where this is slow. On machines where this isn't slow, fontdrvhost.exe uses no CPU at all. \r\n\r\nAnd it seems related to scrolling.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2018-04-03T21:25:16Z", "text": "![image](https://user-images.githubusercontent.com/3505151/38276632-ded3fb2c-3795-11e8-96b2-5f22c2e93fb3.png)\r\n\r\nThere is some ping-pong between `conhost.exe` and `fontdrvhost.exe`.\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2018-04-03T21:33:01Z", "text": "\r\n\r\n[conhost_fontdrvhost.zip](https://github.com/Microsoft/console/files/1873451/conhost_fontdrvhost.zip)\r\n\r\nA less noisy ETW trace.\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2018-04-03T23:18:41Z", "text": "The machines where you have seen it being slow, did they all have touch screens?\r\n\r\nSee the `IncDevice!vector scalar destructor` in the call stack. That doesn't show up on my machines where this is a lot faster.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "bitcrazed", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2018-04-04T17:35:01Z", "text": "Thanks all. Have reached out to the DWM team. Let's see what they say.", "meta": {"posReactions": "6", "negReactions": "0"}}
{"id": "COM10", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2018-04-19T10:27:02Z", "text": "@bitcrazed Any news?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "bitcrazed", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2018-04-19T22:08:39Z", "text": "We are looking into this. Sorry for the delay - Build prep is eating up a lot of people x hours right now ;)", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "bitcrazed", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2018-04-19T22:45:23Z", "text": "@powercode - Okay, we have some suspicions as to what's happening here (thanks CD for your help with this \ud83d\ude00) \r\n\r\nCould we ask:\r\n1. What is the size & resolution of your screen?  15.6\" @ 3200 x 1800?\r\n1. What DPI scaling factor are you using?\r\n1. What is the font face & size of your affected Console(s)?\r\n1. Does this problem disappear if you decrease your Console font size to ~12pt when running at 200% DPI?\r\n\r\nBTW - MANY thanks for capturing traces - they've been ENORMOUSLY helpful!", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM13", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2018-04-20T05:45:35Z", "text": "Resolution 3840x2160.\r\nScaling 250. Both the recommended setup.\r\n\r\nI have tried different fonts but have not stumbled upon any that worked, but have not on the other hand made exhaustive tests. Consolas is affected, as is Deja Vu Sans Mono for PowerLine, and several other PowerLine fonts. \r\n\r\nWow! Setting the resolution scaling to 200% improves perf  a lot.\r\n```\r\nDuration         CommandLine\r\n--------         -----------\r\n00:00:15.4034821 ls -recurse   # 250%, 36 pt\r\n00:00:03.1567607 ls -recurse   # 200%, 36 pt\r\n00:00:00.2825821 ls -recurse   # 200%, 12 pt\r\n```", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM14", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2018-04-20T06:18:09Z", "text": "And @bitcrazed, thank you, and Microsoft, for making it so easy to both gather and look at perf recordings. It is a game changer for me!", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM15", "speaker": "bitcrazed", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2018-04-20T17:16:04Z", "text": "Ahhhh! Yeah, you're getting hit by the known issue! Anyone else seeing this, you'll likely see perf return to normal if you keep scaling <= 200% and your font <24pt., though not guarantees. \r\n\r\nI found the dev owner yesterday and he was literally working on fix for this issue that surfaced elsewhere but is the same root cause!\r\n\r\nRe. XPerf/WPA - **I KNOW, RIGHT**!! I was talking with aforementioned dev and was recalling how hard it was, back in the dark ages, to diagnose issues like these without the benefit of detailed perf traces!!\r\n\r\nThank goodness for progress ;)", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM16", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM15", "timestamp": "2018-04-21T12:39:28Z", "text": "Yes! Thank goodness for progress, and @randomascii, for his incredibly helpful blog posts on analysing the data. Learned so much from him! Huge props!", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM17", "speaker": "randomascii", "conversation_id": "ROOT", "reply_to": "COM16", "timestamp": "2018-04-23T09:15:57Z", "text": "I'm always glad to hear when my blog posts are useful.", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM18", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM17", "timestamp": "2018-08-08T06:33:45Z", "text": "Any update? ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM19", "speaker": "bitcrazed", "conversation_id": "ROOT", "reply_to": "COM18", "timestamp": "2018-08-08T17:17:43Z", "text": "Are you still seeing this issue on recent Insider builds?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM20", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM19", "timestamp": "2018-08-08T17:24:00Z", "text": "That machine is not on insider builds :(", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM21", "speaker": "bitcrazed", "conversation_id": "ROOT", "reply_to": "COM20", "timestamp": "2018-08-09T17:07:37Z", "text": "Just checked with the engineer who worked on this: The specific issue you're seeing has been mitigated which should result in you no longer seeing it's effect. A more comprehensive fix is on the backlog and will be triaged into a future release.\r\n\r\nTo test / confirm, you'll need to install a recent RS5 Insider build, or wait until RS5 ships later this year. Once you do get onto RS5, please update this thread with your findings and close this issue if it's resolved.\r\n\r\nMany thanks again for filing and your help in diagnosing this issue.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM22", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM21", "timestamp": "2018-08-12T19:28:05Z", "text": "Installed RS5 - Issue still present.\r\n\r\n11 seconds to dir a folder with fondsize 36. 1.8 on size 14. Both horribly slow.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM23", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM22", "timestamp": "2018-08-12T19:41:12Z", "text": "[STAFFANX15.08-12-2018.21-38-27.etl.7z.zip](https://github.com/Microsoft/console/files/2281268/STAFFANX15.08-12-2018.21-38-27.etl.7z.zip)\r\n\r\nUploaded trace. It's a 7z archive with an added zip extension to allow the upload.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM24", "speaker": "bitcrazed", "conversation_id": "ROOT", "reply_to": "COM23", "timestamp": "2018-08-13T20:40:26Z", "text": "Thanks. Will take a look.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM25", "speaker": "bitcrazed", "conversation_id": "ROOT", "reply_to": "COM24", "timestamp": "2018-08-13T23:48:55Z", "text": "Hey @Powercode - any chance you could share repro steps - we'd like to see, trace, and measure the perf issue you're seeing.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM26", "speaker": "powercode", "conversation_id": "ROOT", "reply_to": "COM25", "timestamp": "2018-08-14T06:45:29Z", "text": "Start powershell.\r\nSet font size to 36.\r\nRun ls.\r\n\r\nStill on a computer with high resolution (3840x2160) and scaling on 200%.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM27", "speaker": "bitcrazed", "conversation_id": "ROOT", "reply_to": "COM26", "timestamp": "2018-08-14T22:11:01Z", "text": "Hey @powercode. I've been doing some repro'ing on my SP4 with an external 4K 28\" screen:\r\n\r\n| Font @ 18pt, Console @ 81x25 chars | Font @ 36pt, Console @ 81x25 chars |\r\n|:-|:-|\r\n| Command:  dir C:\\Windows\\System32\\ -recurse | Command:  dir C:\\Windows\\System32\\ -recurse | \r\n| Start:   12:50:21.47 | Start:   12:52:04.63 |\r\n| End:     12:50:23.52 | End:     12:52:09.44 |\r\n| Elapsed: 00:00:02.05 | Elapsed: 00:00:04.81 |\r\n\r\n> FWIW, I used my [timing script](https://github.com/bitcrazed/PowerRazzle/blob/master/TimedRun.cmd) to measure the elapsed time to execute and render the recursive listing command above.\r\n\r\nWith the font set at 36pt, there is indeed a marked slow-down, but remember:\r\n1. Console currently uses GDI to draw text which uses your CPU to render text glyphs\r\n1. GDI generates and caches glyphs, and then BLITs them onto the screen\r\n1. The larger the glyph, the fewer can be cached\r\n1. At 18pt, the client area is 1053x675. At 36pt, the client area is 2025x1350 and the resulting glyphs are 4x bigger ... that's a lot of LARGE bitmaps to BLIT\r\n1. And since scrolling often results in significant text changes between iterations of the render loop, the entire client area can end up being \"dirtied\", resulting in the full Console client area having to be fully re-rendered each time! 2025x1350 x 4bytes each pixel == 10MB per frame x 60 fps == 656MB/s we have to force from your CPU to the GPU's frame buffer every second!. \r\n\r\nThat's a lot of data by anyone's measure, and it makes one's machine do a lot of work:\r\n\r\n![recursive-dir](https://user-images.githubusercontent.com/961950/44121072-5daffba8-9fd3-11e8-9831-49e00faa5233.png)\r\n\r\nNow, can we go faster? HELLS YEAH! \ud83d\ude1c\r\n\r\nThe GDI team recently improved their glyph caching mechanism, with more improvements planned for future releases, but increased the Glyph Cache buffer to mitigate the above factors until those improvements can be made.\r\n\r\nAlso, Console plans on replacing our GDI renderer to DirectWrite at some point in the future which should eliminate this issue anyhow. \r\n\r\n_Also_ we have some other tricks up our sleeves that we hope will noticeably improve text rendering perf, esp. while scrolling. Bear with us ;)\r\n\r\nI'll leave this issue open for now, and we'll update it when we have any solid perf improvements to share.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM28", "speaker": "mixmastamyk", "conversation_id": "ROOT", "reply_to": "COM27", "timestamp": "2018-10-07T00:43:16Z", "text": "Hi, understood that there is a lot of graphics to push around on 4k.  However, what about the issue mentioned above with querying the registry 10x per scroll?  Might be an easy fix to cache that value:\r\n\r\n    HKCU\\Software\\Microsoft\\Windows\\DWM\\ColorPrevalence", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM29", "speaker": "levicki", "conversation_id": "ROOT", "reply_to": "COM28", "timestamp": "2018-11-09T10:23:25Z", "text": "Hello, I would like to point out that poor console performance in Windows 10 is still present in 1809.\r\n\r\nResolution is 1920x1080, scaling is 100%, console font size is 16pt Consolas.\r\n\r\nIn my case, running IDA Pro interactive disassembler (idaw.exe) in the console results in a totally absurd situation where conhost.exe is using more CPU than the program itself:\r\n\r\n![image](https://user-images.githubusercontent.com/16415478/48256712-bb6ea380-e410-11e8-99b6-26c2fd7bd8ce.png)\r\n\r\nLooking at the threads of conhost.exe the culprits are obvious:\r\n![image](https://user-images.githubusercontent.com/16415478/48256869-3041dd80-e411-11e8-831d-e56a73bcd0a7.png)\r\n\r\nThe only part of the console window being updated is highlighted:\r\n![image](https://user-images.githubusercontent.com/16415478/48256955-654e3000-e411-11e8-9a21-6959e58a5115.png)\r\n\r\nWhy is drawing 8 characters at a fixed position using 10% of the 3.2 GHz quad-core CPU, and what is more important, why is this slowing down the console program so much that something which took minutes in Windows XP takes hours in Windows 10?\r\n\r\nPeople were drawing full screen graphics on 1 MHz Motorola 6502 CPU 3 decades ago without dedicated graphics hardware, this is how far modern programmers have fallen.", "meta": {"posReactions": "0", "negReactions": "0"}}
