{"id": "ROOT", "speaker": "fasterfish", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2017-03-16T18:09:31Z", "text": "Using include asynchronously with with_items <!---\r Verify first that your issue/request is not already reported on GitHub.\r Also test if the latest release, and master branch are affected too.\r -->\r \r ##### ISSUE TYPE\r <!--- Pick one below and delete the rest: -->\r  - Feature Idea\r \r ##### COMPONENT NAME\r <!--- Name of the module/plugin/task/feature -->\r i don't know\r \r ##### ANSIBLE VERSION\r <!--- Paste verbatim output from \u201cansible --version\u201d between quotes below -->\r ```\r 2.2.1.0\r ```\r \r ##### CONFIGURATION\r <!---\r Mention any settings you have changed/added/removed in ansible.cfg\r (or using the ANSIBLE_* environment variables).\r -->\r \r \r ##### OS / ENVIRONMENT\r <!---\r Mention the OS you are running Ansible from, and the OS you are\r managing, or say \u201cN/A\u201d for anything that is not platform-specific.\r -->\r Ubuntu 14.0.4 amd64\r \r ##### SUMMARY\r <!--- Explain the problem briefly -->\r \r ##### STEPS TO REPRODUCE\r <!---\r For bugs, show exactly how to reproduce the problem, using a minimal test-case.\r For new features, show how the feature would be used.\r -->\r I want to play the task list asynchronously for several group vars.\r \r <!--- Paste example playbooks or commands between quotes below -->\r ```yaml\r tasks:\r - include: sync.yml\r   async: 1000\r   poll: 0\r   with_items: \"{{groups['groupname']}}\"\r   loop_control:\r     loop_var: variable\r ```\r \r <!--- You can also paste gist.github.com links for larger files -->\r \r ##### EXPECTED RESULTS\r <!--- What did you expect to happen when running the steps above? -->\r The task list executed asynchronously.\r \r ##### ACTUAL RESULTS\r <!--- What actually happened? If possible run with extra verbosity (-vvvv) -->\r The task list is executed in sequence for each variable.\r ", "meta": {"posReactions": "48", "negReactions": "0"}}
{"id": "COM0", "speaker": "krzysztof-magosa", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2017-03-17T17:13:43Z", "text": "If i'm correct async makes entire task and not each item asynchronous.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "bcoca", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2017-03-17T20:11:28Z", "text": "include is not an actual module, its hardcoded into the engine and as such does not fork and cannot be async.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "krzysztof-magosa", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2017-03-17T22:39:13Z", "text": "I think it would be good idea to raise warning/error when unsupported parameter is provided.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "bcoca", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2017-03-17T23:06:41Z", "text": "it can be inherited, we are planning on an update to make this clearer 'import vs include'", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "yfoelling", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2018-01-03T07:34:59Z", "text": "+1\r\nI think this feature is very interesting to speed up things a bit. :-)\r\n\r\nAlso an warning/error message should be raised as mentioned before, it took some time debugging why the async has no effect on include statements.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "lordkret", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2019-01-17T15:30:20Z", "text": "+1\r\n\r\nin most cases - especially from  re-usability perspective - there is a sequence of tasks runs against an entity. Running those in parallel will be huge gain", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "realhawker", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2019-04-04T09:28:09Z", "text": "+1", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "bcoca", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2019-04-04T13:30:42Z", "text": "@lordkret i think you are making some assumptions that are not true:\r\n- async does not increase paralellization\r\n-  imports/includes work by adding new tasks/hosts to the iteration, they don't run on the spot, they are a 'addition to the queue'\r\n - parallelization  is based on forks (and limited by serial)\r\n\r\nasync is about waiting for a task inline or polling for it, if polling is 0 we don't wait for its results ... but these either get ignored or require a follow up task to do async_pol. This effectively 'ends the task' from the controller's point of view even if it is still running on the target, this is kind of a 'de facto' increase in parallel tasks, but not from the perspective of the controller. \r\n\r\nIf the task is about changing the controller loop of tasks .. this HAS to be a locking (serialized) task, so even making it async, would just mean we don't wait for the result but would be LOCKED waiting for the queue being updated before we can proceed. At best 'async' include means we fire up EACH included task in async (w/o increase in forks nor parallelization) and don't wait for results (poll: 0?)  which means we won't know if the tasks succeeded or not (unless you introduce async_pol which then gets back to a limited sync to get results).", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "nikita-b", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2019-07-11T15:23:05Z", "text": "+1\r\nLooks very handy. I need it for my k8s tasks", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "chaitu-tk", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2020-05-21T15:03:55Z", "text": "+1 most handy, esp. for intensive and time taking tasks (Eg: testing multiple Linux kernels in QEMU)", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "viane", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2020-08-03T12:57:03Z", "text": "+1 I have a perfect use case needs this feature where I need to provision X bare metal nodes for OCP and each of the them takes 45+ min to be fully up, there is no reason that I have to provision them individually in automation and wait 45 * X minutes to do next task.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2020-08-03T14:31:40Z", "text": "I've locked this to contributors for now. Adding +1 comments is too noisy. For future reference, add a reaction to the issue body, and don't comment.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2021-08-20T15:41:53Z", "text": "We've discussed this, and have agreed to not move forward with allowing this to work.  To effectively allow `async` on a `block` would only support a very narrow feature of fire and forget.  And any other use case, you would still have to put `register` on every task within, so you could reference the multiple `jid` values for the different tasks.  In which case, since you are touching every task anyway to get a useful action out of it, might as well just apply `async` to each task individually.\r\n\r\nAs such, we're going to close this.\r\n\r\nIf you have further questions please stop by IRC or the mailing list:\r\n\r\n   * IRC: #ansible on irc.libera.chat\r\n   * mailing list: https://groups.google.com/forum/#!forum/ansible-project ", "meta": {"posReactions": "0", "negReactions": "0"}}
