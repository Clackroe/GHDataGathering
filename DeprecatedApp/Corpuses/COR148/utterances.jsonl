{"id": "ROOT", "speaker": "sneak", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-11-26T18:33:42Z", "text": "Atom still spies on the user even prior to consent request ### Description\r \r Atom is contacting Microsoft/GitHub processes running on Amazon servers on first launch **without consent**, and leaking my IP address and timestamp to the manufacturer, as well as transmitting the fact that I use Atom (via outbound request) to thousands of other people and organizations.\r \r ### Steps to Reproduce\r \r 1. Launch Atom for the first time\r \r **Expected behavior:**\r \r No telemetry is sent.\r \r **Actual behavior:**\r \r Telemetry is sent.\r \r Atom transmits my IP address (and implicit timestamp) to the manufacturer and thousands of other people.\r \r At no point am I prompted for consent prior to this happening.  This happens *silently*.\r \r Only **after** this information has been sent out of my machine does the main application window open with the consent dialog (which has its own issues).\r \r <img width=\"548\" alt=\"Screen Shot 2019-11-26 at 10 22 52\" src=\"https://user-images.githubusercontent.com/408977/69661425-395f1600-1037-11ea-9cfd-64f6959d4f60.png\">\r <img width=\"577\" alt=\"Screen Shot 2019-11-26 at 10 22 56\" src=\"https://user-images.githubusercontent.com/408977/69661427-395f1600-1037-11ea-9246-c93edb428562.png\">\r \r **Reproduces how often:**  100% of the time on first launch\r \r ### Versions\r \r 1.41.0 x64 osx\r \r ### Additional Information\r \r A user's IP address, as well as the tracking/telemetry/analytics/autoupdate target host IP are both transmitted from the user's machine at time of first launch (adding a timestamp to these first two pieces of data).\r \r This tuple of (user source IP, atom.io destination ip, TCP port, TLS SNI hostname, timestamp) **leaks usage information** to thousands of different people when it is sent from the user's computer: ISP, hosting providers, network interchanges, intelligence services (hi Ed!), Microsoft internal systems administrators, GitHub systems administrators, and Amazon network administrators.  The user is given **no opportunity** to opt out of this, to prevent it, and is **not even made aware of it happening**.\r \r This means that the work on #12281 is *incomplete*.  The software is still **transmitting user data without consent** before the consent dialog even appears.\r \r Wikipedia defines spyware as:\r \r > Spyware is a software that aims to gather information about a person or organization, sometimes without their knowledge, and send such information to another entity without the consumer's consent. \r \r ## Required Elements\r \r 1. software :white_check_mark: atom is software\r 1. *gathers information about a person* :white_check_mark: information that the user is launching Atom for the first time\r 1. *without their knowledge* :white_check_mark: no information is displayed to the user when the request is made, or any time thereafter\r 1. *send information to another entity* :white_check_mark: sends data to ISP, routers, hosting companies and staff, GitHub, Microsoft, Amazon, and NSA\r 1. *without the user's consent* :white_check_mark: no consent was asked or provided, and indeed, did not exist\r \r Presently, Atom does *all of these* on first launch.", "meta": {"posReactions": "14", "negReactions": "2"}}
{"id": "COM0", "speaker": "sneak", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-11-26T18:57:28Z", "text": "You'll know that the work is done on #12281 when the app can be first-time launched on a fresh system, opt-out of metrics/telemetry/reporting selected by the user, a file created, typed into, saved, and the application quit, without a single network request being made (meaning that the usage of Atom is not leaked to the LAN, the ISP, the intermediate networks, anyone monitoring those networks, or any staff member of Microsoft/GitHub (including network administrators or network security monitoring devices)).", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "Arcanemagus", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2019-11-26T20:09:30Z", "text": "Atom is designed to run in an internet connected environment, doing things such as checking for updates (your first dialog) without prompting the user. The second dialog you show is from the telemetry package which clearly states that if you opt out it will send an anonymous report of an opt out and then ignore future data:\r\n![image](https://user-images.githubusercontent.com/427137/69666892-de7eec00-1041-11ea-8448-d6585f6b7471.png)\r\n\r\nYou are certainly free to block the network access and Atom will work in an offline mode if that is your preference, if that is not what you desire though there are plenty of other editors out there that may fit your needs better. Atom is fully open source so you are welcome to build your own version that fits your requirements, note that the _branding_ is copyrighted so if you do that and decide to publish it you can't call it Atom \ud83d\ude09.\r\n\r\nThanks for reaching out!\r\n\r\n----\r\n\r\nWe have passed along the information to the maintainers team. Because we treat our issues list as [the Atom team's backlog](https://en.wikipedia.org/wiki/Scrum_(software_development)#Product_backlog), we close feedback issues after passing along the information to the maintainers to keep our backlog clean and focused. In the future, if you want to send feedback to the maintainers you can do so more directly by sending email to atom@github.com.", "meta": {"posReactions": "0", "negReactions": "7"}}
{"id": "COM2", "speaker": "sneak", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2019-11-26T20:10:56Z", "text": "> Atom is designed to run in an internet connected environment\r\n\r\nNobody's saying it shouldn't use the network.  It just shouldn't use the network *before the user has given it permission*, because otherwise it is a **data leak**.  That's *why the consent dialog exists*.\r\n\r\nVery obviously this is a bug: the auto-update mechanism, which is itself a form of telemetry so long as it uses the network (transmitting to the manufacturer that the user has installed Atom), must be serialized to occur *only after* their consent (or lack thereof) to telemetry is indicated.  Doing it beforehand renders the telemetry opt-out entirely ineffective, as you *still end up sending telemetry* to the \"what version is current\" service, even when the user doesn't want it sent.\r\n\r\nThat seems to be a recurring issue, as well: #20185 elaborates on that.", "meta": {"posReactions": "22", "negReactions": "2"}}
{"id": "COM3", "speaker": "sneak", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2019-11-26T23:19:43Z", "text": "> *The second dialog you show is from the telemetry package which clearly states that if you opt out it will send an anonymous report of an opt out and then ignore future data*\r\n\r\nFYI that `central.github.com` connection happens *before* I click *anything* in the consent dialog (including the opt out button), so it's clearly sending something in advance of knowing whether it is permitted to or not.", "meta": {"posReactions": "3", "negReactions": "0"}}
{"id": "COM4", "speaker": "Arcanemagus", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2019-11-26T23:35:09Z", "text": "> FYI that central.github.com connection happens before I click anything in the consent dialog (including the opt out button), so it's clearly sending something in advance of knowing whether it is permitted to or not.\r\n\r\nCan you report that over in https://github.com/atom/telemetry/issues/33? Thanks!", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "sneak", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2019-11-26T23:37:00Z", "text": "I did so.  You need to reopen this one too, because, inconvenient or not, autoupdate checks are also an inadvertent form of telemetry *whether the project uses them for the purpose or not*.  The data (user with IP X has opened Atom at time Y) is transmitted to third parties regardless of whether or not Microsoft is collecting or using this information as telemetry.\r\n\r\nIt doesn't matter if the telemetry is coming from \"the telemetry package\" or not.  It's still useful as telemetry, and is sent without consent.", "meta": {"posReactions": "0", "negReactions": "2"}}
{"id": "COM6", "speaker": "Arcanemagus", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2019-11-26T23:39:42Z", "text": "As already stated, if that form of \"telemetry\" is an issue for you feel free to block the network access or create a version of Atom that doesn't check for updates. This isn't something the Atom team is currently interested in changing though.", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM7", "speaker": "sneak", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2019-11-26T23:40:31Z", "text": "I've already done so, naturally.\r\n\r\nWhat about the thousands of other users who haven't spent time and money on things like Little Snitch, who nevertheless don't want to be tracked and explicitly opt out of telemetry that still get telemetry sent (and logged by their government forever) against their wishes?  How is that good UX?  How is that showing respect for your userbase?\r\n\r\nForks don't benefit anyone.  Look at the VSCodium mess that was created; let's not repeat that.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "sneak", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2019-11-27T00:03:29Z", "text": "If you're going to insist on the autoupdate thing, couldn't you just do it once per month, at a random number of cumulative hours delay (say, 1-12) after startup, so that it doesn't function as an ad hoc \"user has launched the app\" telemetry event to everyone watching and logging the network?  It would still work just fine, and wouldn't be transmitting user activity on every launch.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM9", "speaker": "ryanisnan", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2019-11-27T00:13:38Z", "text": "If you bundled auto-update consent in with telemetry consent, that seems like an unfortunate decision for the user.\r\n\r\nAuto-updates, while they are revealing, are different than pure telemetry by most definitions.\r\n\r\nIt's probably to be expected that a) most people turn off telemetry when given an option and b) most people want auto-updates turned on.\r\n\r\nI'm not sure how it would A/B test, but my guess is that having auto-updates default to off would result in a lot less automatically updated Atom clients.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM10", "speaker": "blordpluto", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2019-11-27T00:23:40Z", "text": "> As already stated, if that form of \"telemetry\" is an issue for you feel free to block the network access or create a version of Atom that doesn't check for updates. This isn't something the Atom team is currently interested in changing though.\r\n\r\nFolks can reasonably disagree about the privacy impact of something like this, and/or the feasibility of personal workarounds. But I fail to see how anyone fairminded could accept that an identifying outgoing connection is sent before the user presented with an opt-in/out. That's a dark pattern. Any organization that practices it is staining its own credibility. It's just a falsehood, and a bad precedent on every level.\r\n\r\n> Atom is designed to run in an internet connected environment\r\n\r\nIs this documented somewhere? And why is this a design constraint? Speaking generally, I would propose the opposite, that a text editor be designed to be fully capable in all respects when offline. When I look at your home page bullet points, none of them relate to having an internet connection. And when I look at the \"short version\" of your unequivocal privacy statement:\r\n\r\n> We only collect the information you choose to give us\r\n\r\nit's pretty hard to square with the current behavior. _You're collecting something users haven't chosen to give you._\r\n", "meta": {"posReactions": "3", "negReactions": "1"}}
{"id": "COM11", "speaker": "sneak", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2019-11-27T00:25:42Z", "text": "> Auto-updates, while they are revealing, are different than pure telemetry by most definitions.\r\n\r\nIt doesn't matter how we define them, *practically*, immediate auto update checks on launch *amount to telemetry*.  It's a rose by any other name.  It sends out a launch event across the network, regardless of what the person who implemented the feature intended it to accomplish.  It must be treated as such, regardless of intent, because that is the *effect*.\r\n\r\n> I'm not sure how it would A/B test, but my guess is that having auto-updates default to off would result in a lot less automatically updated Atom clients.\r\n\r\nIs this a worse thing than every single Atom user reporting to their ISP and national governments and Microsoft for permanent logging exactly when and where they open their text editor every single time?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "Arcanemagus", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2019-11-27T00:30:02Z", "text": "> > Atom is designed to run in an internet connected environment\r\n>\r\n> Is this documented somewhere? And why is this a design constraint? Speaking generally, I would propose the opposite, that a text editor be designed to be fully capable in all respects when offline.\r\n\r\nIt's an expected scenario to check for updates, it's not a _constraint_ though. As I have stated multiple times you can definitely work with Atom while offline (or with network requests blocked). You can even turn off checking for updates in the settings if you want, although that wouldn't prevent the first run connection this issue is about.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM13", "speaker": "neilpanchal", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2019-11-27T00:45:05Z", "text": "@Arcanemagus This whole issue is extremely simple: Atom should not send data out to the world without asking the user. Period. \r\n\r\nAsking the user to block network access is tangential and does not inspire confidence in the Atom. Internet \"connected\" app means that the App can connect to the internet if needed and invoked by the user. Not willy-nilly send out telemetry data to the world.\r\n\r\nAtom should also ask the user if it can check for updates.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM14", "speaker": "blordpluto", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2019-11-27T00:51:14Z", "text": "> It's an expected scenario to check for updates, it's not a constraint though.\r\n\r\n**It is not an expected scenario from the user's perspective.** With great respect, you're just wildly mistaken. Consider the following flow: User looks at your privacy policy. User reads the first sentence and thinks that consent will be requested for outbound connections. User obtains an installer. User launches app and app immediately phones home without consent.\r\n\r\nI think we all understand that there are strong Business Intelligence incentives to want to collect  installation data. Those incentives only get answered by pushback, in micro-processes like this thread. Would it persuade the BI audience if they sat back and contemplated a legal review of this under the CCPA? Just a reminder that enforcement starts July 1, 2020.\r\n\r\n> You can even turn off checking for updates in the settings if you want, although that wouldn't prevent the first run connection this issue is about.\r\n\r\nYou've simply restated the problem.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM15", "speaker": "ryanisnan", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2019-11-27T00:54:41Z", "text": "> > Auto-updates, while they are revealing, are different than pure telemetry by most definitions.\r\n> \r\n> It doesn't matter how we define them, _practically_, immediate auto update checks on launch _amount to telemetry_. It's a rose by any other name. It sends out a launch event across the network, regardless of what the person who implemented the feature intended it to accomplish. It must be treated as such, regardless of intent, because that is the _effect_.\r\n\r\nI don't disagree with you, just trying to play devil's advocate a bit. There's clearly a reason Atom's team believes auto-updates on by default is of high importance. Imploring maintainers of an open source software is not going to yield the best results, I think. Nor is telling users to fork your app if they don't like it.\r\n\r\nI do think that while delivered in a dictatorial manner, @neilpanchal's comment is worth discussing more.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM16", "speaker": "sneak", "conversation_id": "ROOT", "reply_to": "COM15", "timestamp": "2019-11-27T00:57:49Z", "text": "It's not dictatorial, it's principled.  Using a user's computer to do things against them, silently, without their consent, is unethical.  He's speaking plainly about the ethics of the matter, which comes across as pretty harsh, but ultimately it's no more harsh than asserting 1 as true and zero as false.  It's the simple result of the principle \"the computer belongs to the user and should respect the user's wishes and not silently obey those of a remote party instead\".", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM17", "speaker": "lee-dohm", "conversation_id": "ROOT", "reply_to": "COM16", "timestamp": "2019-11-27T00:59:56Z", "text": "Thanks to everyone for the feedback and for sharing your concerns.\r\n\r\nWe obviously disagree over some core definitions here. It appears that the core idea being asserted is that making any network connection is, in essence, sharing private information with whomever might have access to sniffing the network at any point between the source and the destination. Secondarily, that Atom has a responsibility to prevent any network access that the user doesn't explicitly grant consent to.\r\n\r\nWhether we agree on the first point or not, the way that Atom is designed, it _cannot_ prevent all network access in all circumstances. If you install a package that opens a network connection, there's nothing that the core Atom code can do currently to prevent that and that ability isn't something that the Atom maintainer team is going to spend time investigating or implementing. So, if you want an editor that will work completely offline with no network connections whatsoever, Atom is not going to be the appropriate editor for you.\r\n\r\nWe agree that the telemetry package shouldn't send information before a button is clicked, so we're definitely going to investigate premature connections to `central.github.com` before the user has explicitly clicked a button and we are tracking that in https://github.com/atom/telemetry/issues/33.\r\n\r\nWe can appreciate that different people make different tradeoffs when it comes to network exposure versus functionality. We've made choices that we feel strike a good balance for the majority of users, so we'll be leaving the rest, specifically auto-update checking, the way it currently is designed.", "meta": {"posReactions": "0", "negReactions": "0"}}
