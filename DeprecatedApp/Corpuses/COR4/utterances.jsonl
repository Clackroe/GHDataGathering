{"id": "ROOT", "speaker": "Alexhuszagh", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2017-10-17T20:09:30Z", "text": "Comprehensive, Native Windows Support Now, before you tell me this is a lot of work: I know, and am working on it (and almost done). Ideally, I would like to have my changes merged here, so I have a few questions and concerns for my current port.\r \r # Questions\r \r **Should I target a specific C++ standard?**\r \r Currently, my code depends on a few C++11 features, which can be easily removed with a few macros. This makes the code less readable, however, if C++03 support is desired, I will gladly change my implementation to conform to an older standard.\r \r **How to handle Unicode filesystem support?**\r \r Currently, LevelDB uses `char`-based (narrow) strings for for all filesystem operations, which does not translate well for Windows systems (since narrow strings use the ANSI, or OEM legacy codepages, and not UTF-8, for backwards compatibility). This means paths using international characters, or emojis, are therefore not supported with a simple port, something I consider to be an undesirable solution for a modern library. All the current forks of levelDB do not solve this fundamental issue, leading me to create my own implementation. Possible solutions include:\r \r 1. A narrow (UTF-8) API on *Nix, and a wide (UTF-16) API on Windows, using a typedef to determine the proper path type.\r 2. Converting all narrow strings from UTF-8 to UTF-16 before calling WinAPI functions.\r 3. Providing both a narrow (ANSI) and wide (UTF-16) API on Windows.\r \r The 2nd option, although the least amount of work, is the least amenable for me since the expected encoding for paths from levelDB would then conflict with the entirety of the WinAPI. The 3rd option, however, duplicates code to support both the narrow and wide WinAPI, which would increase the amount of work required to maintain levelDB. The first option is a happy median: it minimizes redundancy and is consistent with expectations about *Nix and Windows paths. I am, however, amenable to any suggestions the levelDB authors may have.\r \r **Intellectual Property**\r \r To emulate the behavior of `mmap` on Windows, I used a very lightweight library (<250 lines of code) from Steven Lee, [mman-win32](https://github.com/witwall/mman-win32). However, looking over your contributor license agreement, it seems that my port would not satisfy Google's CLA until I remove this code from my implementation. If this is the case, I could easily use the raw WinAPI functions rather than the emulated `mmap` in my Windows port. Please notify me if I should remove this code prior to submitting a pull request.\r \r # Other Changes\r \r **CMake Build System**\r \r I introduced a CMake build system, which retains most of the same logic as the existing Makefile. The existing Makefile has not been deprecated.\r \r **AppVeyor Continual Integration**\r \r To ensure builds do not break the Windows builds, I am planning to add an AppVeyor configuration, which allows continual integration on Windows using MSVC.\r \r # Summary\r \r If there is still interest for native Windows support, and the proposed changes are amenable to the levelDB authors, I would gladly submit a pull request.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM0", "speaker": "ghemawat", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2017-10-17T20:29:55Z", "text": "On Tue, Oct 17, 2017 at 1:09 PM, Alexander Huszagh <notifications@github.com\n> wrote:\n\n> Now, before you tell me this is a lot of work: I know, and am working on\n> it (and almost done). Ideally, I would like to have my changes merged here,\n> so I have a few questions and concerns for my current port.\n> Questions\n>\n> *Should I target a specific C++ standard?*\n>\n> Currently, my code depends on a few C++11 features, which can be easily\n> removed with a few macros. This makes the code less readable, however, if\n> C++03 support is desired, I will gladly change my implementation to conform\n> to an older standard.\n>\n\nWe haven't made a decision w.r.t. this yet, so it will be easiest if it\ndoes not rely on on c++03 only.  Would it be a big problem to do so?\n\n\n> *How to handle Unicode filesystem support?*\n>\n> Currently, LevelDB uses char-based (narrow) strings for for all\n> filesystem operations, which does not translate well for Windows systems\n> (since narrow strings use the ANSI, or OEM legacy codepages, and not UTF-8,\n> for backwards compatibility). This means paths using international\n> characters, or emojis, are therefore not supported with a simple port,\n> something I consider to be an undesirable solution for a modern library.\n> All the current forks of levelDB do not solve this fundamental issue,\n> leading me to create my own implementation. Possible solutions include:\n>\n>    1. A narrow (UTF-8) API on *Nix, and a wide (UTF-16) API on Windows,\n>    using a typedef to determine the proper path type.\n>    2. Converting all narrow strings from UTF-8 to UTF-16 before calling\n>    WinAPI functions.\n>    3. Providing both a narrow (ANSI) and wide (UTF-16) API on Windows.\n>\n> The 2nd option, although the least amount of work, is the least amenable\n> for me since the API would then seemingly lies to users of levelDB, since\n> strings would have to be UTF-8 encoded rather than using the local code\n> page, in contrast with the entirety of the WinAPI. The 3rd option, however,\n> duplicates code to support both the narrow and wide WinAPI, which would\n> increase the amount of work required to maintain levelDB. The first option\n> is a happy median: it minimizes redundancy and is consistent with\n> expectations about *Nix and Windows paths. I am, however, amenable to any\n> suggestions the levelDB authors may have.\n>\n\nHere is what I suggest: make a separate Env implementation for Windows\n(instead of attempting to reuse env_posix.cc).  That Env implementation\n(like all other Env implementations), accepts char-based (narrow) strings,\nwhich are always utf8 encoded.  Inside this Env's implementation, it can\nconvert back and forth between the utf8 strings that the rest of leveldb\nassumes, and whatever type is appropriate for windows APIs called in the\nimplementation.\n\nIf there is significant code in env_posix.cc you find yourself needing,\nconsider refactoring that out into a separate .h/.cc (which are private to\nthe leveldb implementation) so you can share the code in your Env\nimplementation.\n\n> *Intellectual Property*\n>\n> To emulate the behavior of mmap on Windows, I used a very lightweight\n> library (<250 lines of code) from Steven Lee, mman-win32\n> <https://github.com/witwall/mman-win32>. However, looking over your\n> contributor license agreement, it seems that my port would not satisfy\n> Google's CLA until I remove this code from my implementation. If this is\n> the case, I could easily use the raw WinAPI functions rather than the\n> emulated mmap in my Windows port. Please notify me if I should remove\n> this code prior to submitting a pull request.\n>\n\nYes, this should be removed.  In general, we have been throttling back mmap\nusage anyway (it helps a bit with microbenchmarks, but causes a bunch of\nportability problems).  So I suggest a good initial start will be to just\nuse raw WinAPI functions.\n\n\n\n> Other Changes\n>\n> *CMake Build System*\n>\n> I introduced a CMake build system, which retains most of the same logic as\n> the existing Makefile. The existing Makefile has not been deprecated.\n>\n*AppVeyor Continual Integration*\n>\n> To ensure builds do not break the Windows builds, I am planning to add an\n> AppVeyor configuration, which allows continual integration on Windows using\n> MSVC.\n>\n\nThis sounds very helpful.\n\n\n> Summary\n>\n> If there is still interest for native Windows support, and the proposed\n> changes are amenable to the levelDB authors, I would gladly submit a pull\n> request.\n>\n\nThis sounds very useful to me.  I would like it if the changes were limited\nto the following:\n\n(a) A windows Env implementation as I mentioned above.\n(b) Build/portability changes.\n\nIs that feasible, or you are seeing the need to make widespread changes?\n\n\n\u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/leveldb/issues/519>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AHuM0W8xE_w2Az-r6NfZqQwYWM9ZBrNVks5stQmLgaJpZM4P8vz1>\n> .\n>\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "pwnall", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2017-10-17T20:50:46Z", "text": "Work on CMake support is already underway. Please use https://github.com/pwnall/leveldb/tree/cmake as a starting point, to avoid rework. Also, please use the Travis CI and AppVeyor configurations in https://github.com/google/snappy as a starting point for yours.\r\n\r\nIn general, I recommend following the approach taken by Chromium's LevelDB integration. Chromium builds (and runs) on Windows, and does not require modifications to the rest of the LevelDB.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "Alexhuszagh", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2017-10-17T21:04:15Z", "text": "Thank you for the feedback. This would be very feasible to do @ghemawat, especially if we use UTF-8 paths and just convert them in the Windows environment. As for CMake support, I will use that as a starting point (thank you). I will remove the `mmap` compatibility and use the raw WinAPI calls. Due to my other work, I should be able to finish this later this week.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "Alexhuszagh", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2017-10-20T23:18:34Z", "text": "@ghemawat and @pwnall, a quick question: When I asked the C++11 features and limiting myself to C++03, did you mean limit the codebase to C++98 or C++11? I have a few situations where `std::chrono` is dramatically more convenient than other code, however, I can remove this (it's only for `NowMicros` and `SleepForMicroseconds`). Other than that, the port should not require any new features.\r\n\r\nThank you and I am effectively done with my port, other than this minor question.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "pwnall", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2017-10-20T23:20:30Z", "text": "We've recently decided that the next release will require C++11, so it's OK to use C++11. Sorry for the code churn on your end... this decision was not taken lightly.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "Alexhuszagh", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2017-10-21T00:16:25Z", "text": "@pwnall No worries, I understand that such fundamental choices do not lend themselves to casual decisions. Thank you for all the help.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "andschwa", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2017-10-26T16:54:20Z", "text": "Hi @Alexhuszagh,\r\n\r\nAs a soon-to-be user of the leveldb Windows support (for Mesos), here are are my thoughts:\r\n\r\n> Should I target a specific C++ standard?\r\n\r\nFor us, C++11 is fine, we already target this.\r\n\r\n> How to handle Unicode filesystem support?\r\n\r\nThis is an annoying problem, I had to fix this for Mesos. I went with:\r\n\r\n> 2. Converting all narrow strings from UTF-8 to UTF-16 before calling WinAPI functions.\r\n\r\nIt also leads into long path issues on Windows. I took an approach similar to the one CMake took for their Windows port, a `longpath` helper to translate all paths as they reach WinAPI functions from UTF-8 to UTF-16 with `\\\\?\\` prepended if necessary. My helper is [here](https://github.com/apache/mesos/blob/master/3rdparty/stout/include/stout/internal/windows/longpath.hpp) (note that the max path is _not_ 255 despite documentation).\r\n\r\nI need to stress: native long path support is probably a must for most Windows projects nowadays. It's not terribly difficult to do, it's just _really annoying_.\r\n\r\nAlso, for your comment:\r\n\r\n> is the least amenable for me since the expected encoding for paths from levelDB would then conflict with the entirety of the WinAPI\r\n\r\nI'm not sure I entirely agree, there is no data loss going from UTF-8 to UTF-16. Both encodings are _Unicode_, it's just an implementation difference. Plus, you can do the conversion [natively in C++11](https://github.com/apache/mesos/blob/f599839bb854c7aff3d610e49f7e5465d7fe9341/3rdparty/stout/include/stout/stringify.hpp#L57). Anyway, I've not had any problems on Windows having gone this route so far.\r\n\r\nThanks for your work! I personally know the trouble it is \ud83d\ude09 ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "andschwa", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2017-10-26T17:21:23Z", "text": "Also:\r\n\r\n> I introduced a CMake build system\r\n\r\nYay, a million times, yay! We'll pull it into Mesos with `ExternalProject_Add`.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM8", "speaker": "Alexhuszagh", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2017-10-30T22:30:06Z", "text": "Hi @pwnall and @ghemawat, I've had a few issues I cannot currently debug. I will attempt to use the Boost-based \"windows\" branch as a reference-point in short order.\r\n\r\nSpecifically, I've had 3 major issues:\r\n\r\n1. ~~`issue178_test` fails intermittently. ~10% of the time, it succeeds, without issue. 25% of the time, it produces a slightly lower number of keys than the 1.1m requires (almost always greater than 1.09m). The rest of the time, it produces the error `Assertion Failed: r->options.comparator->Compare(key, Slice(r->last_key)) > 0, file level-db\\table\\table_builder.cc, line 97`.~~\r\n\r\n2. ~~`db_test` fails intermittently (at about the same frequency) during the `random_read_counter_` section (from `env_->random_read_counter_.Reset();` to `ASSERT_LE(reads, N + 2*N/100);`~~\r\n\r\n3. ~~Most severely though, however, is the multi-threaded section seems to produce the `bad block type` error consistently, which would defeat the entire purpose of a multi-thread access.~~\r\n\r\nOtherwise, all the test cases and benchmarks work. Just a heads up for the major delay.\r\n\r\n(Items with ~~strikethrough~~ have been patched).\r\n\r\nEDIT: Everything has been patched.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "pwnall", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2017-10-30T22:46:48Z", "text": "No worries about delays. Honestly, I'm backed up with other work for the next two of weeks, and the odds that I'll be able to look at this are very low.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM10", "speaker": "Alexhuszagh", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2017-11-07T10:16:57Z", "text": "Everything has been patched, and I am adding extended file length support currently. @andschwa, for the extended file length support, since the `\"\\\\?\\\"` prefix effectively removes all path parsing, do you know if there's anything else I need to consider other than:\r\n\r\n1. Relative paths (which cannot use the extended file length prefix).\r\n2. `/`, `.`, or `..` in paths (somewhat tricky, see below).\r\n\r\nFor the `.` and `..` operators, manually parsing them is somewhat tricky, since directory symbolic links may be in play. The only time-tested strategy for this is to iterate over all roots, parent directories, check to see if the item is a directory symbolic link or junction, get the real path of the directory if it is a symlink or junction, and then continue from there. This is because `C:\\leveldb\\..\\leveldb-1\\README.md` does not actually point to `C:\\leveldb-1\\README.md` if `C:\\leveldb` is a symlink or junction.\r\n\r\nThis is very doable (and is relatively easy to implement), but it is fairly expensive since it requires filesystem calls. It requires a temporary vector to store each path component. Step-wise, the general approach is as follows:\r\n\r\n1. Check if the path is absolute (skip remaining steps otherwise).\r\n2. Replace all forward separators with backslashes.\r\n3. Recurse over each parent directory, from the root (drive letter, such as `C:`, or UNC root, such as `\\\\host-name\\share-name`), to the (and excluding the) file (we don't care if the file is a symlink, since relative path components cannot follow it).\r\n4. If the directory basename is `.`, ignore the directory.\r\n5. If the directory basename is `..`, remove the preceding directory component.\r\n6. Otherwise, check if the directory is a symlink by calling `CreateFile` with the `FILE_FLAG_OPEN_REPARSE_POINT` and `FILE_FLAG_BACKUP_SEMANTICS` flags. If the handle is successfully created, it's a symlink, otherwise, it is not.\r\n7. If the directory is a symlink, read the proper path using `DeviceIoControl` with the `FSCTL_GET_REPARSE_POINT` code, and reset the vector using the absolute new path.\r\n\r\nI would be amenable to implementing this (I've done this before, as may be obvious due to the detail of my explanation on how to implement such functionality), but this may add a lot of expense for a feature that application developer should have to be aware of themselves (that is, leveldb will already support an extended length path, if provided by the end-user).\r\n\r\nAnother major caveat is leveldb's filenames are short (the longest being the `MANIFEST-00000X` files, at 15 characters). Since the Windows [documentation](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx) clearly states the maximum directory length must be `MAX_PATH - 12`, even with the extended length path prefix, this seems like a lot of work for an added 3 characters.\r\n\r\n@pwnall, any thoughts? Should extended file length support be added, including with the caveats mentioned above?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "andschwa", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2017-11-08T23:27:54Z", "text": "@Alexhuszagh I don't believe you missed anything.\r\n\r\nRe: bullet 6: I'm using this logic in Mesos:\r\n\r\n```\r\n  const DWORD access_flags = resolved_path_is_directory\r\n    ? (FILE_FLAG_OPEN_REPARSE_POINT | FILE_FLAG_BACKUP_SEMANTICS)\r\n    : FILE_FLAG_OPEN_REPARSE_POINT;\r\n\r\n  const HANDLE handle = ::CreateFileW(\r\n      longpath(absolute_path).data(),\r\n      GENERIC_READ,     // Open the file for reading only.\r\n      FILE_SHARE_READ,  // Just reading this file, allow others to do the same.\r\n      nullptr,          // Ignored.\r\n      OPEN_EXISTING,    // Open existing symlink.\r\n      access_flags,     // Open symlink, not the file it points to.\r\n      nullptr);         // Ignored.\r\n```\r\n\r\nadding the `FILE_FLAG_BACKUP_SEMANTICS` flag only if its a directory. I also specifically use `OPEN_EXISTING`, though you probably got that.\r\n\r\nRe: point 7: I resolve the path using `GetFinalPathNameByHandleW` with the `FILE_NAME_NORMALIZED` flag, after using:\r\n\r\n```\r\n  const DWORD access_flags = resolved_path_is_directory\r\n    ? FILE_FLAG_BACKUP_SEMANTICS\r\n    : FILE_ATTRIBUTE_NORMAL;\r\n\r\n  const HANDLE handle = ::CreateFileW(\r\n      longpath(absolute_path).data(),\r\n      GENERIC_READ,     // Open the file for reading only.\r\n      FILE_SHARE_READ,  // Just reading this file, allow others to do the same.\r\n      nullptr,          // Ignored.\r\n      OPEN_EXISTING,    // Open existing file.\r\n      access_flags,     // Open file, not the symlink itself.\r\n      nullptr);         // Ignored.\r\n```\r\n\r\nto get a handle to the file/directory at the resolved path.\r\n\r\nRe:\r\n\r\n> but this may add a lot of expense for a feature that application developer should have to be aware of themselves (that is, leveldb will already support an extended length path, if provided by the end-user)\r\n\r\nI agree that just letting the end-user provide `\\\\?\\C:\\long\\paths` without any extra handling from `leveldb` might be just fine, so long as _all_ the Windows APIs used are the Unicode versions (and specifically listed as supporting long paths; though this is most of them).", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "Alexhuszagh", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2017-11-08T23:56:25Z", "text": "@andschwa All the Window APIs are the Unicode versions. Currently, I use `FILE_FLAG_BACKUP_SEMANTICS` for files and directories, but that is easily changed. As for `GetFinalPathNameByHandleW`, unfortunately it somewhat raises a chicken/egg problem.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM13", "speaker": "andschwa", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2017-11-08T23:59:42Z", "text": "If `FILE_FLAG_BACKUP_SEMANTICS` is working for both, don't let me tell you it's wrong! I was using `GetFinalPathNameByHandle` specifically for resolution of symlinks; I see where it wouldn't quite work for you here.\r\n\r\n> All the Window APIs are the Unicode versions.\r\n\r\nPerfecto.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM14", "speaker": "jenokizm", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2018-05-01T07:29:02Z", "text": "Hi, I wanted to ask how your work is going? It's been about six months since your last messages, but I do not see any result. I need to build a library under Windows and I do not know how.", "meta": {"posReactions": "3", "negReactions": "0"}}
{"id": "COM15", "speaker": "chrismorfos", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2018-05-02T06:20:25Z", "text": "Hi how are you today ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM16", "speaker": "ketnoimai", "conversation_id": "ROOT", "reply_to": "COM15", "timestamp": "2018-05-02T11:24:50Z", "text": "hi t\u00f4i b\u1eadn qu\u00e1 v\u00e0 c\u0169ng ch\u01b0a hi\u1ec3u n\u1ed9i dung c\u00f4ng vi\u1ec7c t\u00f4i ph\u1ea3i l\u00e0m l\u00e0 g\u00ec ?\nt\u00f4i bi\u1ebft r\u1ea5t \u00edt v\u1ec1 c\u00f4ng ngh\u1ec7 ! n\u1ebfu t\u00f4i c\u00f3 th\u1ec3 l\u00e0m g\u00ec \u0111\u00f3 c\u00f3 \u00edch cho b\u1ea1n th\u00ec\nb\u1ea1n h\u00e3y h\u01b0\u1edbng d\u1eabn t\u00f4i !\n\n2018-05-01 14:29 GMT+07:00 jenokizm <notifications@github.com>:\n\n> Hi, I wanted to ask how your work is going? It's been about six months\n> since your last messages, but I do not see any result. I need to build a\n> library under Windows and I do not know how.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/leveldb/issues/519#issuecomment-385616180>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/Ah4_VGZLcEwyQHyJXLEB6fv3yS1ZVObzks5tuA7WgaJpZM4P8vz1>\n> .\n>\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM17", "speaker": "Alexhuszagh", "conversation_id": "ROOT", "reply_to": "COM16", "timestamp": "2018-05-03T16:10:31Z", "text": "@jenokizm Sorry, I got extremely busy with work and have submitted a few PRs to this extent but it still needs work. My Windows development PC just arrived after breaking in March, so I should be able to finish this soon.\r\n\r\nIf you would to use this branch, it currently works on Windows:\r\nhttps://github.com/Alexhuszagh/leveldb", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM18", "speaker": "pwnall", "conversation_id": "ROOT", "reply_to": "COM17", "timestamp": "2018-05-10T00:05:40Z", "text": "I think the ball is currently in our court. I need to find time to reconcile the various Windows PRs we've received with what we think this should look like.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM19", "speaker": "thomasjm", "conversation_id": "ROOT", "reply_to": "COM18", "timestamp": "2018-07-29T12:15:26Z", "text": "Hi -- no pressure, but is there any ETA for when Windows support will land? Thanks!", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM20", "speaker": "pwnall", "conversation_id": "ROOT", "reply_to": "COM19", "timestamp": "2018-07-30T18:53:02Z", "text": "We have no timeline for this, sorry.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM21", "speaker": "felipecrv", "conversation_id": "ROOT", "reply_to": "COM20", "timestamp": "2018-12-03T17:21:51Z", "text": "@Alexhuszagh @pwnall can I take the code in the PR, rebase to fix the merge conflicts, then add commits with the suggestions from @ghemawat or that was already done by @cmumford in https://github.com/cmumford/leveldb/commit/a5888f680bea87cd14d665692cff223ea48c5f89 ?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM22", "speaker": "pwnall", "conversation_id": "ROOT", "reply_to": "COM21", "timestamp": "2018-12-03T22:12:38Z", "text": "@philix Thank you very much for the offer!\r\n\r\nWe have a change for the internal codebase, which will get published after it lands. The code change is very far into the review process. At this point, I don't think there's anything that external contributors can help us with.", "meta": {"posReactions": "3", "negReactions": "0"}}
{"id": "COM23", "speaker": "Alexhuszagh", "conversation_id": "ROOT", "reply_to": "COM22", "timestamp": "2018-12-03T23:06:08Z", "text": "If there's anything I can do, or anything others could do with my code to make Windows support land earlier, I'd be glad to help. In the meantime, I'm just glad Windows support seems to be approaching soon. Thanks.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM24", "speaker": "felipecrv", "conversation_id": "ROOT", "reply_to": "COM23", "timestamp": "2018-12-04T07:32:06Z", "text": "@pwnall Great news. Thanks.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM25", "speaker": "felipecrv", "conversation_id": "ROOT", "reply_to": "COM24", "timestamp": "2019-02-25T19:21:56Z", "text": "Hi, it's me again. I really need a Windows port to start experimenting with LevelDB.\r\n\r\nIs https://github.com/cmumford/leveldb/commit/a5888f680bea87cd14d665692cff223ea48c5f89 the best port so far?\r\n\r\nI just need to hack something together before the official port lands.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM26", "speaker": "pwnall", "conversation_id": "ROOT", "reply_to": "COM25", "timestamp": "2019-02-26T01:34:41Z", "text": "At this point, I'm fairly convinced that this topic won't benefit from external input until we land the Windows port. Locking so googlers can focus their limited time on landing the code.\r\n\r\nI expect that locked conversations are frustrating to external contributors, and I'm sorry for that. I'm doing this because the subtler request above hasn't been effective.", "meta": {"posReactions": "0", "negReactions": "0"}}
