{"id": "ROOT", "speaker": "kevinburke", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-08-30T18:06:50Z", "text": "fmt: add examples Let's add examples. I think it would be good to add examples to each function (if possible?) as well as to illustrate some points - not every example should make every point but it would be good to cover these.\r \r - how do %d, %s, %q, %v differ\r \r - how do you do left/right padding\r \r - decimal formatting\r \r - how does \"ln\" ending vary from \"f\" ending\r \r When you open a change, put this at the bottom of the commit message:\r \r ```\r Updates golang/go#27376.\r ```\r \r That way gopherbot will post a comment here with a link to your CL.\r \r Add a comment if you want to fix one and I'll put your name next to the func in question.\r \r - [x] `func Errorf(format string, a ...interface{}) error`: @ianzapolsky\r \r - [x] func Fprint(w io.Writer, a ...interface{}) (n int, err error)\r \r - [ ] `func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)`: @MaerF0x0\r \r - [x] `func Fprintln(w io.Writer, a ...interface{}) (n int, err error)`: @waits \r \r - [ ] `func Fscan(r io.Reader, a ...interface{}) (n int, err error)`: @andriisoldatenko\r \r - [ ] func Fscanf(r io.Reader, format string, a ...interface{}) (n int, err error)\r \r - [x] `func Fscanln(r io.Reader, a ...interface{}) (n int, err error)`: @mfrw\r \r - [x] func Print(a ...interface{}) (n int, err error)\r \r - [ ] `func Printf(format string, a ...interface{}) (n int, err error)`: @mooreds \r \r - [x] `func Println(a ...interface{}) (n int, err error)`: @techmexdev\r \r - [ ] func Scan(a ...interface{}) (n int, err error)\r \r - [ ] func Scanf(format string, a ...interface{}) (n int, err error)\r \r - [ ] func Scanln(a ...interface{}) (n int, err error)\r \r - [x] func Sprint(a ...interface{}) string\r \r - [x] `func Sprintf(format string, a ...interface{}) string`: @venilnoronha\r \r - [x] `func Sprintln(a ...interface{}) string`: @drewvanstone\r \r - [ ] func Sscan(str string, a ...interface{}) (n int, err error)\r \r - [ ] func Sscanf(str string, format string, a ...interface{}) (n int, err error)\r \r - [ ] func Sscanln(str string, a ...interface{}) (n int, err error)\r \r - [ ] type Formatter\r \r - [x] type GoStringer\r \r - [ ] type ScanState\r \r - [ ] type Scanner\r \r - [ ] type State\r \r - [x] type Stringer\r ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM0", "speaker": "venilnoronha", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-08-30T18:13:28Z", "text": "`Sprintf(format string, a ...interface{}) string`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "techmexdev", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2018-08-30T18:13:33Z", "text": "I can do  `func Println(a ...interface{}) (n int, err error)`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "ianzapolsky", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2018-08-30T18:13:56Z", "text": "I'll do `func Errorf(format string, a ...interface{}) error`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "drewvanstone", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2018-08-30T18:19:56Z", "text": "I'll do `func Sprintln(a ...interface{}) string`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "waits", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2018-08-30T18:26:04Z", "text": "I'll do `func Printf(format string, a ...interface{}) (n int, err error)`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "kevinburke", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2018-08-30T18:31:50Z", "text": "@waits there is actually a CL open for that one at the moment from @mooreds https://github.com/golang/go/issues/27349 - I should have added it to the sheet. how about Fprintf?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "MaerF0x0", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2018-08-30T18:37:04Z", "text": "I'll do `func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)`\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "waits", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2018-08-30T18:39:19Z", "text": "Fprintf was taken also, I'll take `Fprintln`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "ianzapolsky", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2018-08-30T19:44:54Z", "text": "Anyone know how often the official go documentation is updated? i.e. how long our commits should take to show up here: https://golang.org/pkg/fmt/", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "kevinburke", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2018-08-30T19:47:40Z", "text": "They should appear at tip.golang.org almost immediately, as I believe that project fetches from HEAD every 15 minutes.\r\n\r\nThe docs on golang.org will update the next time there's a new Go release, or earlier if the patches are backported from master (which targets Go 1.12) to the Go 1.11.1 point release.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "kevinburke", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2018-08-30T19:53:21Z", "text": "The problem with updating golang.org is if we add some new API for Go 1.12 (like strings.Builder) it would not be good if it showed up in the docs before most people were able to use it.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "MaerF0x0", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2018-08-30T20:33:26Z", "text": "Is there a way we can run our new ExampleFunc locally to ensure it works? Else I can copy it to play.golang.org\r\n\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "kevinburke", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2018-08-30T20:36:34Z", "text": "Yes, run `go get golang.org/x/tools/cmd/godoc` and then start godoc:\r\n\r\n```\r\nGOROOT=/path/to/your/contribution-repo godoc -http=:6060\r\n```\r\n\r\nOpen localhost:6060/fmt in your browser and your changes should be there.", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM13", "speaker": "kevinburke", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2018-08-30T20:37:19Z", "text": "Alternatively you can create a new `fmt` repo on Github, copy the source files, push your changes there, then go to e.g. godoc.org/github.com/yourname/fmt to see the docs.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM14", "speaker": "gopherbot", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2018-08-30T21:33:28Z", "text": "Change https://golang.org/cl/132375 mentions this issue: `fmt: add doc example for Fprintf`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM15", "speaker": "kevinburke", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2018-08-30T21:35:03Z", "text": "Looking great! https://tip.golang.org/pkg/fmt/", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM16", "speaker": "mfrw", "conversation_id": "ROOT", "reply_to": "COM15", "timestamp": "2018-08-31T06:17:35Z", "text": "I'll  do `func Fscanln(r io.Reader, a ...interface{}) (n int, err error)`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM17", "speaker": "andriisoldatenko", "conversation_id": "ROOT", "reply_to": "COM16", "timestamp": "2018-08-31T12:28:59Z", "text": "@kevinburke I can create example for `Fscan`.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM18", "speaker": "drewvanstone", "conversation_id": "ROOT", "reply_to": "COM17", "timestamp": "2018-08-31T16:37:46Z", "text": "`Sprintln` is done", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM19", "speaker": "gopherbot", "conversation_id": "ROOT", "reply_to": "COM18", "timestamp": "2018-08-31T18:28:50Z", "text": "Change https://golang.org/cl/132675 mentions this issue: `fmt: add example for Fscanln`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM20", "speaker": "wfernandes", "conversation_id": "ROOT", "reply_to": "COM19", "timestamp": "2018-09-03T18:12:04Z", "text": "I'll do `GoStringer`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM21", "speaker": "gopherbot", "conversation_id": "ROOT", "reply_to": "COM20", "timestamp": "2018-09-03T18:48:29Z", "text": "Change https://golang.org/cl/133075 mentions this issue: `fmt: add example for GoStringer interface`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM22", "speaker": "gopherbot", "conversation_id": "ROOT", "reply_to": "COM21", "timestamp": "2018-09-05T06:42:26Z", "text": "Change https://golang.org/cl/133455 mentions this issue: `fmt: add example for Fprint`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM23", "speaker": "gopherbot", "conversation_id": "ROOT", "reply_to": "COM22", "timestamp": "2018-09-07T11:53:38Z", "text": "Change https://golang.org/cl/134035 mentions this issue: `fmt: add example for Print`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM24", "speaker": "gopherbot", "conversation_id": "ROOT", "reply_to": "COM23", "timestamp": "2018-09-07T12:04:03Z", "text": "Change https://golang.org/cl/134036 mentions this issue: `fmt: add example for Sprint`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM25", "speaker": "robpike", "conversation_id": "ROOT", "reply_to": "COM24", "timestamp": "2018-09-07T12:44:59Z", "text": "Replacing with issue https://github.com/golang/go/issues/27554.\r\n\r\nPlease stop adding examples to the package for now.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM26", "speaker": "bmeh", "conversation_id": "ROOT", "reply_to": "COM25", "timestamp": "2018-09-08T21:05:33Z", "text": "> The problem with updating golang.org is if we add some new API for Go 1.12 (like strings.Builder) it would not be good if it showed up in the docs before most people were able to use it.\r\n\r\nFirst off, I don't see how this could be an issue if you are having docs per version (docs for 1.11, docs for 1.12, and so on), and secondly, what is `strings.Builder` and do we really need it? Are we going to have `strings.Factory`, too? For a moment I thought go is finally taking a better route, but it makes me reconsider that thought.\r\n\r\nOn another note, yes, I agree with Rob here. Inconsistency has been a problem for go, it just seems like people come and write completely different and random examples to similar, related functions. That's not how it should be done. Apparently Rob had to assign it to himself, and tell others to stop posting examples for this reason. Thanks Rob, this chaotic madness needs to stop.\r\n\r\nGo linters complain when exported variables or constants are not documented (despite them being obvious in many cases), yet when core developers make major changes to go, they keep the old documentation, and don't even bother making it up-to-date.\r\n\r\nExcuse me for my tone, but it irks me a bit, anyways: thanks for putting an end to it, for the time being.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM27", "speaker": "ianlancetaylor", "conversation_id": "ROOT", "reply_to": "COM26", "timestamp": "2018-09-09T12:23:03Z", "text": "Please do keep a polite tone.  Thanks.\r\n\r\nThe comment about updating golang.org was in the context of somebody asking how they could see the current docs.  The answer was: use tip.golang.org, with an explanation for why golang.org is not updated.\r\n\r\nFor `strings.Builder` see https://golang.org/pkg/strings/#Builder .", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM28", "speaker": "bmeh", "conversation_id": "ROOT", "reply_to": "COM27", "timestamp": "2018-09-09T13:08:57Z", "text": "Is there any particular reason for why it's not called `strings.Buffer`, next to `bytes.Buffer` (which exists)?\r\n\r\nIt was a neutral-tone, you might have never actually attached or imagined negative connotations to it if it weren't for me saying \"excuse me for my tone\", which I have only said because I know how often people imagine hostility where there is none. :relaxed: ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM29", "speaker": "ianlancetaylor", "conversation_id": "ROOT", "reply_to": "COM28", "timestamp": "2018-09-09T13:47:32Z", "text": "`bytes.Buffer` is also an `io.Reader`, `strings.Builder` is not.\r\n\r\nI disagree about the tone; phrases like \"this chaotic madness\" and statements that the core developers do not keep documentation up to date, without giving any examples, are not helpful.  Please see https://golang.org/conduct; search for \"Avoid destructive behavior\".  Thanks.", "meta": {"posReactions": "1", "negReactions": "0"}}
