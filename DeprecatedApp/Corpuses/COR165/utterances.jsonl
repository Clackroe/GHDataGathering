{"id": "ROOT", "speaker": "vsfeedback", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-01-04T02:05:20Z", "text": "VS2017express C#, tabs replaced with spaces Hello,  under the following circumstances, VS2017express replaces tabs with spaces even though I deactivated that feature in the options: - I am working on a C# file - I am pasting a tab from my clipboard into a line of code, but not at the end, e.g. &quot;int i = 0; // init i&quot;. If I want more space between the command and the comment and I use my tab key, then tabs get inserted properly, but if I put a tab into my clipboard and insert it with Ctrl-V, then ALL tabs get replaced with spaces.  This problem does not occur in C++ files of the same solution, even though I set the tab configuration identical for all languages.  Cheers Peter  _This issue has been moved from https://developercommunity.visualstudio.com/content/problem/154651/vs2017express-c-tabs-replaced-with-spaces.html VSTS ticketId: 528589_ _These are the original issue comments:_  Peter Meier on \u200e11\u200e/\u200e23\u200e/\u200e2017, 02:27 AM (41 days ago): <p>Also I just found out that if I hit the auto format keys (Ctrl-K, Ctrl-D), all the tabs I inserted between the command and the comment are replaced with spaces again. I searched through Tools/Options/Text Editor/C#/Code Style/Formatting, but I found no way to change this annoying behavior. I don't understand why C# won't let me align my comments the way I want them to be when it's no problem for C++.</p>  Jinu Joseph [MSFT] on \u200e12\u200e/\u200e20\u200e/\u200e2017, 02:48 AM (14 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>  _These are the original issue solutions:_ (no solutions)", "meta": {"posReactions": "5", "negReactions": "0"}}
{"id": "COM0", "speaker": "jcoutch", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-05-16T18:33:37Z", "text": "I'm having a similar problem with Visual Studio 2017 Professional (15.7.0.)  I have my indentation style set using `.editorconfig`:\r\n\r\n```\r\n[*.cs]\r\nindent_style = tab\r\nindent_size = tab\r\ntab_width = 4\r\n```\r\n\r\nIf I add a newline to a C# file, tabs are inserted as expected.  But, if I format the document using Ctrl+K Ctrl+D, any tabs in the file are replaced with spaces.\r\n\r\nIf I use ReSharper to format my document, all indentation is converted to tabs as expected.", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM1", "speaker": "FlorianHaupt", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2018-06-26T08:10:03Z", "text": "Would be nice to get this fixed, would save much time.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "elliott-beach", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2018-09-12T00:41:26Z", "text": "I was thinking of submitting a repro, but the OP hits the nail on the head:\r\n>  just found out that if I hit the auto format keys (Ctrl-K, Ctrl-D), all the tabs I inserted between the command and the comment are replaced with spaces again. I searched through Tools/Options/Text Editor/C#/Code Style/Formatting, but I found no way to change this annoying behavior. \r\n\r\nThis creates big whitespace changes after formatting the document as we use tabs at work. Please fix this.\r\n", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM3", "speaker": "sharwell", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2018-11-25T23:59:48Z", "text": "\ud83d\udcdd The issue here is hard tabs contained *within* a line of code, i.e. tabs not used for indentation.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "kendrahavens", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2018-12-03T23:11:40Z", "text": "Design meeting notes:\r\nIn the past we've had conflicting requests on the behavior for tabs within a line of code so we need to add an option for this behavior.\r\n\r\nMy proposal:\r\n* add editorconfig setting that enforces tabs within a line of code. `tab_within_line`\r\n* add new toggle in **Tools > Options > C# > Tabs**: Enforce tabs within lines.\r\n  * It could also go under **Tools > Options > C# > Code Style > Formatting > Spacing** if that is the preferred place to keep editorconfig settings.\r\n\r\n@heejaechang @sharwell ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "FlorianHaupt", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2018-12-04T09:01:11Z", "text": "@kendrahavens \r\nNice proposal to add an extra option.\r\n> Design meeting notes:\r\nIn the past we've had conflicting requests on the behavior for tabs within a line of code so we need to add an option for this behavior.\r\n\r\nAre there really users that like to keep tabs only on specific parts, like indent?\r\n![tabs-settings](https://user-images.githubusercontent.com/18165738/49427897-d7adf800-f7a4-11e8-9842-6077bbb51952.png)\r\nAs the current option does reflect what it should do, to \"keep tabs\" and do not replace them with spaces - This is the behavior as I know it from previous versions and as it is within the C++ text editor - I would prefer an new option that says \"keep tabs only for indent\" for this new behavior. One saying \"Enforce tabs within lines\" would still confuse and let me wonder why I have to check that extra option in situations I already selected \"Keep tabs\".", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "sharwell", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2018-12-04T11:27:17Z", "text": "> Are there really users that like to keep tabs only on specific parts, like indent?\r\n\r\nYes, it's actually a primary request for users who indent with tabs.\r\n\r\nThe name of the new option has not been decided, but it would have two options:\r\n\r\n1. Allow tabs whenever <kbd>Tab</kbd> is used (matches the behavior prior to Visual Studio 2015)\r\n2. Use tabs for indentation, but not for alignment\r\n\r\nIn most cases, the second option behaves as you see today. However, the behavior would change in cases where hanging indentation is used for aligning code with code on a previous line. For example:\r\n\r\n```csharp\r\nvoid Method()\r\n{\r\n\u2192   var\u00b7data\u00b7=\u00b7from\u00b7value\u00b7in\u00b7new[]\u00b7{\u00b71,\u00b72\u00b7}\r\n\u2192   \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7select value;\r\n}\r\n```", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM7", "speaker": "sharwell", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2018-12-11T14:01:50Z", "text": "The preliminary design discussion is now complete. We will review the final user experience once it is ready.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "levicki", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2020-04-24T21:27:04Z", "text": "> The issue here is hard tabs contained within a line of code, i.e. tabs not used for indentation.\r\n\r\nI keep hearing people referring to tabs as hard when it's actually the other way around -- tabs are soft (as in you can replace them with any number of spaces on display),, and spaces are hard (as in hard-coded number in the file itself which you can't reformat so easily on display).\r\n\r\nThat said, I would really prefer if Tab key did what it says on the tin -- inserted a Tab character into the editor. Currently in Visual Studio 16.5.4 that doesn't seem to be the case even though I have configured everything to have Tabs instead of spaces.\r\n\r\nI'd like to voice my displeasure towards two trends going on in Visual Studio editor since VS 2015:\r\n\r\n1. Editor trying to be \"smart\" and disregarding user input more and more (i.e. I enter Tab and it enters spaces even though it's clearly configured to use Tabs)\r\n2. Premature code analysis and error checking (i.e. telling you your code is broken and offering to \"fix\" it before you ever get a chance to complete it)\r\n\r\nThose additions waste enormous amounts of developer time and effort on fighting them when they are wrong (and sadly they can be wrong a lot). The least you could do is offer an option to disable both behaviors globally.\r\n\r\nFinally, I'd appreciate if there was some workaround for this spaces instead of tabs issue, it's driving me nuts.\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "Edgs", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2020-12-13T16:31:16Z", "text": "This is still a problem.  The older versions of editors never used to behave like this.  Other editors don't behave like this.  Even Notepad doesn't behave like this.\r\n\r\nI'll explain simply:\r\nWith the option to KEEP TABS selected in the Editor settings, TABs typed within code (so end of line comments line up, for example.) are later changed into spaces by Visual Studio.  When copying & pasting a line, for example.\r\nI NEVER want this to happen.  That's why I select the option to KEEP TABS.\r\nIf I type a TAB in my code, I NEVER want it changed it to spaces.  It's really that simple.\r\n\r\nWhy is this not fixed after 2+ years?\r\nThis is not an enhancement request, but simply a request that the editor behave as editors have always behaved since the dawn of computing.  At some point, someone in Microsoft decided to 'muck' around with users typed code and change it, when not one user asked for that to happen.\r\n\r\n> > Are there really users that like to keep tabs only on specific parts, like indent?\r\n> Yes, it's actually a primary request for users who indent with tabs.\r\nThat's simply not true.  Show us ONE request from ANYONE who asked for their TABs to be changed to spaces within their code when using the option KEEP TABS.\r\n\r\nAlso worth noting that this still happens when the 'Use Adaptive Formatting' option is turned off.  So it is impossible to prevent this from happening.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "sharwell", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2020-12-14T16:08:36Z", "text": "> Why is this not fixed after 2+ years?\r\n\r\nThere is no one consensus on the definition of correct behavior. The overwhelming majority of users are happy with the current implementation of tabs/spaces handling. Accounting for the remaining ones (in particular, https://github.com/dotnet/roslyn/issues/24031#issuecomment-444067640 and \"always use tabs\") without breaking the experience for users who are happy with the current behavior is a particularly challenging exercise that requires both design and implementation work.\r\n\r\nI'm not sure this will move up on the internal priority list in the near future, but if an external user wanted to spend the time to define and implement the full experience we would be happy to review it. See #23394 for a great example of a feature which shipped because a contributor went through this process. \ud83d\ude04 ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "levicki", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2021-02-23T00:27:09Z", "text": "@sharwell \r\n> There is no one consensus on the definition of correct behavior.\r\n\r\nHow about you take the same approach as Git does for line endings?\r\n\r\n1. Replace TABs with spaces on reformat\r\n2. Replace spaces with TABs on reformat\r\n3. Leave both as entered on reformat\r\n\r\nShouldn't the above satisfy everyone involved?\r\n\r\nCome on people, this is not rocket science, it's a text editor for $(Deity)'s sake!", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2021-02-23T04:06:22Z", "text": "I've never seen git do that. ", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM13", "speaker": "Edgs", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2021-02-23T09:52:52Z", "text": "> \r\n> \r\n> I've never seen git do that.\r\n\r\nNo matter, you've never seen any other existing or previous code editor, since text editors first existed, behave the way VS does.\r\nWhen auto-indenting, it ALWAYS changes TABs between code and line comments to SPACES no matter what settings are selected - like the 'always keep TABs' setting.\r\nNobody asked for this behaviour.  It's a bug.\r\nObviously it's more convient to blindly deny it here rather than simply fix it.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM14", "speaker": "levicki", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2021-02-23T09:59:34Z", "text": "> I've never seen git do that.\r\n\r\nHow about not commenting before understanding what you read? I never said Git does anything with spaces and TABs -- I explicitly mentioned line endings.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM15", "speaker": "sharwell", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2021-02-23T15:31:33Z", "text": "> Nobody asked for this behaviour. It's a bug.\r\n\r\nThis is not correct. Some users who use tabs for indenting prefer the current setting, since it allows for variable-width tabs without changing alignment\u00b9. _Most_ users who use tabs for indenting either prefer the current behavior _or_ they are OK with either behavior.\r\n\r\nWe are willing to reconsider the design since some teams still aren't happy with the current behavior, but only if the design provides a comprehensive approach that works for both preferences.\r\n\r\n\u00b9 Some alignment scenarios are still broken; we would expect the change proposal to ensure these are corrected per https://github.com/dotnet/roslyn/issues/24031#issuecomment-444067640.\r\n\r\n> How about not commenting before understanding what you read? I never said Git does anything with spaces and TABs -- I explicitly mentioned line endings.\r\n\r\nGit has the ability to transparently normalize line endings as part of commit/checkout, but there are many reasons why this would not work with tabs/spaces:\r\n\r\n1. Git doesn't have the ability to alter its understanding of normalization to include characters other than end-of-line characters.\r\n2. Git's normalization process is transparent, meaning any given developer never actually sees it take action. From a local perspective, the file only ever existed in the local form.\r\n3. Not all users are working with Git for source control.\r\n4. Tools which operate on files with checksum validation (e.g. debugging) _explicitly_ account for the fact that every text file has two possible forms: one with `\\r\\n` and a second with `\\n`. All of these tools will break if new normalization characters are added.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM16", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM15", "timestamp": "2021-02-23T16:15:05Z", "text": "> How about not commenting before understanding what you read?\r\n\r\nHow can I understand without discussing and talking with people about the topic?", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM17", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM16", "timestamp": "2021-02-23T16:44:27Z", "text": "So, i would need some strong answers to problems i see arising from changing the representation of the file for different developers.  First, that would violate some of our efforts we have around reproducible builds.  Second, it seems like it would just cause problems for normal situations like:\r\n\r\n```c#\r\nvar v1 = from c in customers\r\n         where c.Age >= 21\r\n         ...\r\n```\r\n\r\nHere, the continuation lines need to be indented 9 columns to maintain alignment.  Replacing these with tabs just breaks this.  Even if it was on some tab multiple for some developers, it might not be for others.\r\n\r\nIn general, I think all developers on the team (including CI) should operate on a bit-for-bit identical version of the code for many important reasons.", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM18", "speaker": "levicki", "conversation_id": "ROOT", "reply_to": "COM17", "timestamp": "2021-02-23T18:45:37Z", "text": "@sharwell \r\n> Git has the ability to transparently normalize line endings as part of commit/checkout, but there are many reasons why this would not work with tabs/spaces...\r\n\r\nLet me be absolutely clear that I did not suggest changing Git behavior, but rather emulating their set of options for the particular problem at hand.\r\n\r\nWith that out of the way, can we agree that VS editor already does some sort of \"normalization\" of TABs and spaces?\r\n\r\nThe problem in my opinion is twofold:\r\n\r\n1. The existing settings that govern TAB .vs. space editor behavior are all over the place and totally do not work as described in the UI, much less produce results that are expected.\r\n2. There is no `What You Type Is What You Get` editor setting -- I just want (and I am sure I am not the only one) that when I enter mixed TABs and spaces on a single line of code that they stay exactly like I entered them (save for expression reformatting which is already customizable enough for everyone's taste).\r\n\r\n@CyrusNajmabadi \r\n\r\n> How can I understand without discussing and talking with people about the topic?\r\n\r\nYou butted into the middle of a discussion by putting words in my mouth because you haven't bothered to understand what I wrote. Maybe that is somehow my fault because English is not my primary language and what I wrote is hard to understand, but in all honesty I am not sure what are you arguing for (or against). If you want to keep spaces in your files then rest assured that nobody here wants to take that away from you. I am asking for more options, not less. Therefore, please stop diluting the topic with pointless and/or obvious comments.\r\n\r\n@sharwell \r\n\r\nSo once again, I only want an editor option to not touch beginning of line indentation, variable name indentation, and comment indentation -- it is irrelevant whether those are done with TABs, spaces, or a mixture of the two -- I want it preserved as I typed it.\r\n\r\nI am really surprised to hear that something like that cannot be done while still keeping all current options.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM19", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM18", "timestamp": "2021-02-23T19:00:03Z", "text": "> You butted into the middle of a discussion by putting words in my mouth\r\n\r\nI didn't.  I said i'd never see such behavior.  I have not.  That was me just giving insight that I wasn't familiar with what you are talking about.", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM20", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM19", "timestamp": "2021-02-23T19:00:48Z", "text": "> I am not sure what are you arguing for (or against)\r\n\r\nI'm happy to clarify any of my points.  Def ask questions and I'll get back to you asap.  If you'd like another venue to discuss things (perhaps in realtime) I'm also happy to use gitter or discord to continue the discussion :)", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM21", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM20", "timestamp": "2021-02-23T19:02:11Z", "text": "> I am asking for more options, not less. \r\n\r\nSure.  However, I'm pointing out that those options are potentially quite problematic.  I would be wary about adding them without fully understanding all the implications here.  And to get there, i need to talk about the topic.\r\n\r\n> Therefore, please stop diluting the topic with pointless and/or obvious comments.\r\n\r\nIt was not obvious to me.  That's the reason i made the comment.  I was unfamiliar with what you were talking about, so i pointed that out to get clarity.  ", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM22", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM21", "timestamp": "2021-02-23T19:04:33Z", "text": "> I am really surprised to hear that something like that cannot be done while still keeping all current options.\r\n\r\nThe challenge is that you may be asking for X, and we may provide *exactly* X, only to find out soon after that you actually wanted X', and that X is not sufficient for all your cases.  THe purpose of the discussion, and the examination of all the tangential concerns is to try to get as full an understanding as possible so as to provide the best possible solution here.  \r\n\r\nAs you may have noticed, this is actually a fairly complex space with lots of varying concerns.  You may have even noticed that different people have asked for things *in conflict* with other requests.  It's not as simple as just taking one proposal and implementing it and leaving it at taht.", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM23", "speaker": "levicki", "conversation_id": "ROOT", "reply_to": "COM22", "timestamp": "2021-02-23T22:39:14Z", "text": "> The challenge is that you may be asking for X, and we may provide exactly X, only to find out soon after that you actually wanted X', and that X is not sufficient for all your cases\r\n\r\nSo now you are implying that I don't even know what I want? What's next, telling me to get used to doing things your way because reasons?\r\n\r\nWell I know one thing for certain -- I do not want an AI or any piece of software to \"think\" instead of me and attempt to interpret my consistent keyboard input in different ways at different times as it pleases.\r\n\r\nHumans are creatures of habit and muscle memory is how we free our brain's capacity so it can perform more complex tasks, contextual controls or behavior are breaking muscle memory and are thus bad UI and software design.\r\n\r\nAgain, all I want is that spaces and tabs are left as I entered them when the line is reformatted. Nothing more, nothing less. All existing indentation and spacing formatting was fine for me before this \"smart\" tab to space conversion on reformat was added. I just want an option to turn it off.\r\n\r\nHow hard can that be?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM24", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM23", "timestamp": "2021-02-23T22:58:45Z", "text": "> So now you are implying that I don't even know what I want?\r\n\r\nYes.  That's always a possibility.  It's happened numerous times in the past with many requests from many customers.  It's always something that needs to be kept in mind.  Furthermore, it may be what you want, but it may be wrong for other users complaining about something similar.  So navigating all the potential requests and constraints here can be tricky and takes a lot of communication and a lot of thought.  Thanks! :)", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM25", "speaker": "Edgs", "conversation_id": "ROOT", "reply_to": "COM24", "timestamp": "2021-02-23T23:00:10Z", "text": "> As you may have noticed, this is actually a fairly complex space with lots of varying concerns...\r\n\r\nThen just concentrate on the **original problem in the first post**.  It's a very straightforward problem.\r\n**Tab characters, between code and double-slashed comments, are changed to space characters when auto-indenting is performed.**\r\nAuto indenting works fine - it uses TAB characters when asked, but TAB characters after the code are changed.\r\nWhy?\r\n\r\nThis is with **Always keep TABs** option selected.\r\nIf this is a feature, and not a bug, then someone please explain why, when **Always keep TABs** is selected, these TABs are being replaced by Spaces?\r\n\r\nThis behaviour does not exist in older versions of VS.  At some point it has been added by someone, for some reason.\r\nThat was the point at which the user experience was broken.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM26", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM25", "timestamp": "2021-02-23T23:00:40Z", "text": "> How hard can that be?\r\n\r\nIt could potentially be very difficult.  The formatting engine is one part of Roslyn that i find the most challenging.  Not \"it's one of the top challenging parts\".  Rather: \"it is literally the most challenging pieces of roslyn\".\r\n\r\nChanges here often have very unexpected effects that are unintended and can break users who have become accustomed to how things work.  We have to be very delicate here as this can be very detrimental to codebases.", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM27", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM26", "timestamp": "2021-02-23T23:01:33Z", "text": "> Auto indenting works fine - it uses TAB characters when asked, but TAB characters after the code are changed.\r\n\r\nI don't think this is the case.  For example, i believe we may choose to align things, and not stick with tabs.  But i would have to go check on that. \r\n", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM28", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM27", "timestamp": "2021-02-23T23:03:39Z", "text": "> This is with Always keep TABs option selected. If this is a feature, and not a bug, then someone please explain why, when Always keep TABs is selected, these TABs are being replaced by Spaces?\r\n\r\nI believe this may be a bug or a feature depending on ones perspective.  I certain see how it can be a bug.  However, that doesn't mean that just because it's a bug that it is simple to fix or that it is without consequences if changes are made here.  Again, as i mentioned above, the existing formatting system is highly complex (including with likely bugs in it that many have taken dependencies on).  So changes need to be very judiciously made.", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM29", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM28", "timestamp": "2021-02-23T23:05:36Z", "text": "> This behaviour does not exist in older versions of VS. At some point it has been added by someone, for some reason.\r\nThat was the point at which the user experience was broken.\r\n\r\nThat's quite possible.  My guess is that it happened when we did the entire roslyn rewrite.  We tried to preserve a lot of old behavior, but we very likely did not given the huge complexity in the old system and that the new system takes an entirely different approach on things.  Unfortunately though, we've now had this new system a long time, and we are wary about subjecting people to more potential changes in behavior, esp. as it might fix this issue, only to cause problems for others :-/   It's a tricky situation to be sure!", "meta": {"posReactions": "0", "negReactions": "1"}}
