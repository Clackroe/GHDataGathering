{"id": "ROOT", "speaker": "uncleramsay", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-10-17T10:23:50Z", "text": "no-git-push not working after 3.18.0 ```\r 15:41:24 $ lerna publish prerelease --canary --exact --yes --no-git-tag-version --no-git-push --no-git-reset --no-changelog --dist-tag=pr-157 --preid=alpha-52b7893\r 15:41:24 ERR! lerna Unknown arguments: git-push, gitPush\r 15:41:24 error Command failed with exit code 1.\r ```\r \r ## Expected Behavior\r Prior to 3.18.0, this does not error out, and publishes without pushing to git.\r \r ## Current Behavior\r Errors out as in above example\r \r ## Steps to Reproduce (for bugs)\r \r <details><summary>lerna.json</summary><p>\r <!-- browsers demand the next line be empty -->\r \r ```json\r {\r   \"version\": \"independent\",\r   \"npmClient\": \"yarn\",\r   \"useWorkspaces\": true,\r   \"conventionalCommits\": true,\r   \"registry\": <enterprise artifactory url>,\r   \"verifyAccess\": false,\r   \"verifyRegistry\": false,\r }\r ```\r </p></details>\r \r ## Context\r I'm currently unable to publish alphas without locking to a lower version of lerna.\r \r ## Your Environment\r Running on jenkins\r \r | Executable | Version |\r | ---: | :--- |\r | `lerna --version` | 3.18.1 |\r | `npm --version`  | 6.10.1 |\r | `yarn --version` | 1.15.2 |\r | `node --version` | 8.9.0 |\r \r | OS | Version |\r | --- | --- |\r | NAME | VERSION |\r <!-- For example:\r | Red Hat Enterprise Linux | 7 |\r -->\r ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM0", "speaker": "tkissing-work", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-10-17T21:32:58Z", "text": "Other options are also affected:\r\n\r\n> ERR! lerna Unknown arguments: git-reset, gitReset, verify-access, verifyAccess, npm-client, npmClient", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "evocateur", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2019-10-18T16:50:56Z", "text": "@uncleramsay There is no `--no-git-push` option, it's called [`--no-push`](https://github.com/lerna/lerna/blob/master/commands/version/README.md#--no-push).\r\n\r\n@tkissing-work Which command elicited that error?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "uncleramsay", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2019-10-18T17:50:31Z", "text": "That's very odd. Prior to 3.18.0 --no-git-push definitely works", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "tkissing-work", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2019-10-18T17:52:46Z", "text": "`lerna version --exact --force-publish --loglevel=verbose --no-git-reset --no-push --no-verify-access --npm-client=npm --yes --no-git-tag-version --preid=20191018175119.master.gitish-7d39735d40 prerelease`\r\n\r\nWorks fine with 3.17.0, breaks with 3.18.0 and 3.18.1", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "mlavina", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2019-10-21T12:40:18Z", "text": "Hey @evocateur thanks for the quick response, but this still feels like something is wrong. If @uncleramsay had the wrong command and it was working fine and then all they upgraded was to `3.18` wouldn't that same wrong command still work.\r\n\r\nSure it would git push when he didn't want it to, but clearly it was working before. Unless, Lerna added some better error checking and this is an error that the command specified doesn't exist and it just didn't error out before, but that's probably still a break if bad commands worked before. \r\n\r\nEDIT -\r\n\r\nRemoving the `git` in `--no-git-push` fixed the above command, but I still think it might be worth having somewhere in the release notes that bad commands will now error out instead of just being ignored. ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "evocateur", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2019-10-21T17:25:32Z", "text": "@tkissing-work \r\n* `--npm-client` only applies to `lerna bootstrap` and `lerna run`.\r\n* `--no-git-reset` and `--no-verify-access` only apply to `lerna publish`, not `lerna version`.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "evocateur", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2019-10-21T17:25:37Z", "text": "@mlavina Yargs has been configured with [`.strict()`](https://github.com/yargs/yargs/blob/master/docs/api.md#strictenabledtrue) for [almost two years now](https://github.com/lerna/lerna/blob/0687939004910186a7f2d78373bca3701d84fa5a/src/cli.js#L41). It appears Yargs 14 fixes some bugs that were previously obscuring it.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM7", "speaker": "tkissing-work", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2019-10-21T21:08:11Z", "text": "For every version prior to 3.18.x \"only applies to\" meant \"is ignored otherwise\". Now it means \"breaks your build\". That's not SemVer minor. I don't even care if that is directly in your code or was pulled in via a dependency bump. Minor versions of lerna should not break my build.\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "evocateur", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2019-10-21T21:19:04Z", "text": "Your build had silent errors before. I'd say that's much worse than a temporarily broken build.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "tkissing-work", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2019-10-21T21:20:48Z", "text": "my build updated the package.json files and a later `lerna publish` pushed them to npm. That's exactly what I expected it to do. ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "tkissing-work", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2019-10-21T21:27:42Z", "text": "And SemVer doesn't care if breaking my build now is \"better\" than silent errors, it only cares about compatibility. lerna 3.18.x is not compatible to 3.17.x.\r\nIf lerna does not want to do SemVer, than at the very least you should put a warning into your readme and possibly switch to version numbers that do not suggest SemVer, so consumers know not to let renovate auto-update this dependency.", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM11", "speaker": "evocateur", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2019-10-21T21:35:51Z", "text": "I'm sorry my fuckups have caused you pain. Please stop berating me, now.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "mlavina", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2019-10-21T22:14:37Z", "text": "@tkissing-work while I agree in principle clearly this was not @evocateur fault but an underlying package.\r\n\r\nIt's not fair to put the blame on him. And even if you do feel there is responsibility, you should not be so rude. \r\n\r\nRelax, I get the frustration, but let's be civil. Let's not make the person who runs a massive open source project almost by himself job harder than it needs to be. ", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM13", "speaker": "tkissing-work", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2019-10-22T19:56:42Z", "text": "I was quite polite until I was asked to be thankful for my builds breaking without warning. Unintended breaking changes happen, but blaming it on the consumers is not an appropriate response. ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM14", "speaker": "evocateur", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2019-10-25T22:06:59Z", "text": "> [...] until I was asked to be thankful for my builds breaking without warning.\r\n\r\nWhen exactly did I say that, @tkissing-work?\r\n\r\n* If you're not using a lockfile, then the only one to blame for your builds breaking \"without warning\" is yourself.\r\n* If you _are_ using a lockfile, then it was an explicit change you made (upgrading `lerna`) that caused the breakage, not a dastardly plan on my part to cause you pain.\r\n\r\nThe fact remains that the long-standing _intention_ of `lerna`'s argument parsing was to be strict, throwing errors when unrecognized options were passed. There was a bug in yargs 12 that silently perverted this intention, and yargs 14 fixed it.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM15", "speaker": "tkissing-work", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2019-10-29T16:49:12Z", "text": "> Your build had silent errors before. I'd say that's much worse than a temporarily broken build.\r\n\r\n\"I'd say that's much worse than\" sounds like you did me a favor, but all I got was extra work.\r\n\r\n> If you are using a lockfile, then it was an explicit change you made (upgrading lerna) that caused the breakage\r\n\r\nThe whole point of SemVer is that this \"explicit change\" can be made by a machine. The author of a library categorized upgrades into breaking and non-breaking. Software like renovate can then pick certain updates and apply them automatically based on this categorization.\r\n\r\n> If you're not using a lockfile, then the only one to blame for your builds breaking \"without warning\" is yourself.\r\n\r\nThe condescending attitude aside, a lockfile alone does not help here. Updating lerna necessarily means my lockfile changes. My direct usage of yargs was \"protected\" by the lockfile, because the selector `yargs@^12.0.1` still gave me 12.0.5 at `node_modules/yargs/`. But without forced hoisting (and thus forced conflict resolutions) that has no impact on what is in `node_modules/lerna/node_modules/yargs/`\r\n\r\n> not a dastardly plan on my part to cause you pain\r\n\r\nI am not saying you planned this.\r\nYour update broke something for some consumers without being SemVer major. That is unfortunate, but it's a mistake that can happen. \r\nHowever, your reaction to the mistake being brought to your intention is somewhere between condescending and hostile.\r\nYou could have said \"sorry, this was not intended, let me roll back and re-release as 4.0.0\" and it would be fine.\r\nYou could have said \"sorry, I didn't consider that the yargs API practically becomes part of the lerna API, I will make sure that future SemVer major updates of yargs only happen in SemVer major updates of lerna\"\r\nInstead you said that it's good that your mistake broke my build.\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
