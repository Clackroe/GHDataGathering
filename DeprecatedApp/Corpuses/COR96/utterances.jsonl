{"id": "ROOT", "speaker": "kzu", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-10-04T15:02:23Z", "text": "Include Ctrl+C, Ctrl+V keybindings by default I've read the other \"copy not working\" bugs and the universal suggestion seems to be \"just create your own keybinding\".\r \r It's quite puzzling for a *Windows* terminal to not come with the most commonly used *Windows* shortcuts ever. \r \r I'd suggest these two are added to the product, and people can instead *change* (or remove them) if they wish. I guess that's a much more intuitive default.\r \r For others wondering why they are missing, just add these two to your keybindings:\r \r ```\r { \"command\": \"copy\", \"keys\": [\"ctrl+c\"] },\r { \"command\": \"paste\", \"keys\": [\"ctrl+v\"] },\r ```\r \r Just to add to the discussion: the built-in Terminal in VS Code supports this out of the box too, which is awesome. ", "meta": {"posReactions": "39", "negReactions": "12"}}
{"id": "COM0", "speaker": "KirillOsenkov", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-10-04T17:58:28Z", "text": "cmd.exe didn't support these for years and finally added them quite recently. Even more puzzling to have these missing in the new one.", "meta": {"posReactions": "6", "negReactions": "0"}}
{"id": "COM1", "speaker": "ealsur", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2019-10-04T18:50:50Z", "text": "Copy and Paste was added in 0.3, if you installed 0.3 (or later), they were there by default. If you upgraded to 0.3, you needed to add them manually: https://devblogs.microsoft.com/commandline/windows-terminal-preview-v0-3-release/\r\n\r\n![image](https://user-images.githubusercontent.com/1633401/66232216-34b45c00-e69d-11e9-83b1-7ed2e467b6c5.png)\r\n", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM2", "speaker": "pedroreys", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2019-10-04T19:05:41Z", "text": "For the curious,  [here is the PR](https://github.com/microsoft/terminal/pull/1093) where they added the default keybindings for copy and paste and they discuss the challenges of using `Ctrl+C` by default.\r\n\r\nThere is also #2285 that has extensive discussion about using Ctrl+C for copy vs emitting SIGINT.\r\n", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM3", "speaker": "bradwilson", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2019-10-04T20:57:15Z", "text": "Please don't do this. Ctrl+C already has meaning inside terminals that long outdates copy/paste.", "meta": {"posReactions": "19", "negReactions": "1"}}
{"id": "COM4", "speaker": "DHowett-MSFT", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2019-10-04T20:59:42Z", "text": "> Even more puzzling to have these missing in the new one.\r\n\r\n> Please don't do this. Ctrl+C already has meaning inside terminals that long outdates copy/paste.\r\n\r\nThis is a delightful vignette about why we have rebindable key actions, and why we don't want to be prescriptive with user experience where \"terminal input\" is concerned.", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM5", "speaker": "DHowett-MSFT", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2019-10-07T23:20:24Z", "text": "We can 100% bind <kbd>Ctrl+C</kbd> by default, now that we have support for passing through bindings that didn't trigger an action. We can **100% not** bind <kbd>Ctrl+V</kbd> by default.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "KirillOsenkov", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2019-10-08T00:20:02Z", "text": "I know `Ctrl+C` cancels the current execution, but what does `Ctrl+V` do? Out of curiosity.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "bradwilson", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2019-10-08T03:21:27Z", "text": "@KirillOsenkov https://superuser.com/a/421468", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "sgreenmsft", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2019-10-10T21:18:04Z", "text": "My (admittedly uneducated) guess is the percentage of users expecting Ctrl+V to result in paste is substantially larger than the percentage of users expecting Ctrl+V to result in \"verbatim insert mode.\"", "meta": {"posReactions": "11", "negReactions": "4"}}
{"id": "COM9", "speaker": "impguard", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2019-11-07T04:57:16Z", "text": "@sgreenmsft \r\n\r\nTo be honest, for users used to using Terminal from Linux, Ubuntu, OSX, etc. I don't expect ctrl-V to paste. And seeing how a lot of the purpose of terminal is geared in that direction (to finally have Windows be able to start having a culture around working in the terminal instead of in GUI apps, catering towards those users seems preferable).", "meta": {"posReactions": "4", "negReactions": "0"}}
{"id": "COM10", "speaker": "sgreenmsft", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2019-11-07T18:31:23Z", "text": "@impguard \r\nI honestly don't know how frequently verbatim insert mode is used by folks in linux/osx.  My uneducated guess is \"very infrequently.\"  On the other hand, I suspect Ctrl+V is used quite frequently by folks familiar with cmd.exe and PowerShell.  If my uneducated assumptions are accurate, then having Ctrl+V perform paste makes the experience significantly better for Windows-background users at minimal cost to Linux/OSX-background users.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "durack1", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2019-11-24T21:21:36Z", "text": "I am new to Microsoft terminal (v0.6.2951.0) and am starting to warm up to the idea of having access to powershell, cmd, ubuntu/wsl and azure cloud shell baked directly into a native Windows 10 app.\r\n\r\nBUT, I was pulling my hair out today trying to copy the contents of a Ubuntu console, and would have assumed this functionality was baked in by default to a modern Win10 app. I acknowledge the ctrl-c issues above, but why not enable the copy functionality through a right mouse click, like that implemented in the more modern cmd versions? If you open cmd using Windows terminal there is no right click options enabled, whereas using the old cmd you get:\r\n![image](https://user-images.githubusercontent.com/3229632/69501798-3f30ec00-0ebd-11ea-97ce-f12331226c54.png)\r\n\r\nIt'd be great if a future version of Windows Terminal baked this in by default across all shells - it's really useful to have", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM12", "speaker": "wleepang", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2019-12-29T20:53:20Z", "text": "I'm using Version: 0.5.2762.0, and was tripped up by this today.  While I agree that a mapping of \"copy\" => Ctrl+C is understood as the Windows default, it will also cause confusion with Linux based terminal applications.  My solution for now is to map:\r\n\r\n```json\r\n{\"command\": \"copy\", \"keys\": [\"ctrl+insert\"]},\r\n{\"command\": \"paste\", \"keys\": [\"ctrl+shift+insert\"]},\r\n```\r\n\r\nI've seen this mapping used before as an alternative.\r\n\r\nThat said, I originally wanted to use:\r\n\r\n```json\r\n{\"command\": \"copy\", \"keys\": [\"win+c\"]},\r\n{\"command\": \"paste\", \"keys\": [\"win+v\"]},\r\n```\r\n\r\nwhich maps to the muscle memory I've built using MacOS, however the linter in VSCode told me only `ctrl|shift|alt` are acceptable modifier keys.  Is there a way to allow the `win` key to be a modifier as well for custom key bindings?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM13", "speaker": "gdamore", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2020-01-18T19:45:19Z", "text": "I feel pretty strongly about this -- I'm a UNIX user (also the author of the popular tcell package for building console interface apps in Golang), and understand the need to separate copy from delivering the control-c to the application.  There are challenging trade-offs here.\r\n\r\nHowever, I really liked legacy conhost's solution to this -- if I have text selected, then Ctrl-C is copy just like windows.  And Ctrl-V is paste.  If I have no selected text, then CTRL-C is passed through to the application.  IMO, these should be the default settings.  They should be customizable, in case a user wants to change them.\r\n\r\n(On macOS its CMD-C and CMD-V, and I've bound those for Windows Terminal, but what really messes me up is that in every *other* app on Windows its CTRL. )\r\n\r\nTo be honest what I really wish is that I could change the rest of Windows to use ALT-C and ALT-V (or META-C and META-V) for copy/paste, which would not collide with most other uses but keep the control bindings available for terminal windows.  I do understand why that's not practical -- given the fact that each application manages it's own key bindings.\r\n\r\nAnother possible solution is to offer some extra modifier (e.g. SHIFT-CTRL-) that would send the control sequence to the application running in the window.  Even as a UNIX user, I know for a fact that I use CTRL-C and CTRL-V occasionally in the terminal to control my apps, but far less frequently than I use copy-paste.   So I'd prefer to require keyboard-twister in the uncommon case, and be able to use copy-paste like I do everywhere else by default.", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM14", "speaker": "kzu", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2020-01-29T21:46:42Z", "text": "Totally agree on making this \"smart\" depending on whether there's a selection at all. \r\n\r\nBTW, this is *exactly* how the integrated terminal in VS Code behaves, which is awesome.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM15", "speaker": "DHowett-MSFT", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2020-01-29T21:47:18Z", "text": "If you bind <kbd>Ctrl+C</kbd>, it will be \"smart\". There is no way to make <kbd>Ctrl+V</kbd> smart.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM16", "speaker": "kzu", "conversation_id": "ROOT", "reply_to": "COM15", "timestamp": "2020-01-29T22:05:34Z", "text": "If it will be \"smart\" already, then it's even more puzzling why this isn't already bound by default (again, as it is in VS Code terminal, where I think people seem to be mostly happy with it)", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM17", "speaker": "KirillOsenkov", "conversation_id": "ROOT", "reply_to": "COM16", "timestamp": "2020-01-29T22:10:22Z", "text": "I'm curious if we have any data or telemetry to indicate what percentage of users prefer Ctrl+C and Ctrl+V to copy/paste. My intuition tells me it'll be the majority. Curious how many people turn on QuickEdit mode in cmd.exe.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM18", "speaker": "regs01", "conversation_id": "ROOT", "reply_to": "COM17", "timestamp": "2020-02-03T15:05:38Z", "text": "The same way as powershell, ctrl+c should copy if anything selected and break if nothing selected. Even cmd have it - Enter to copy if there is any selection and execute if there is no selection. Though Enter never been really convenient.\r\n\r\nThere is specifically Break button to enforce break of execution in case of emergency, if there is selection.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM19", "speaker": "eidylon", "conversation_id": "ROOT", "reply_to": "COM18", "timestamp": "2020-02-16T16:47:52Z", "text": "> \r\n> \r\n> Please don't do this. Ctrl+C already has meaning inside terminals that long outdates copy/paste.\r\n\r\nI would've expected that the shells hosted by Terminal would interpret the keystrokes. So since CTRL+C/CTRL+V were recently added to cmd.exe, I would've expected them to be passed down the shell and work as expected. \r\n\r\nIf you are using a different shell (PowerShell, Bash, etc), then I would expect they should be passed down to that shell for it to interpret as expected. \r\n\r\nI find it odd that Terminal is interpreting these keys instead of the shell currently in use. I would only expect Terminal to try to interpret any keys you have defined in the key-bindings. Otherwise yeah, they should just be interpreted by the shell in use, so as to provide consistency with what people expect in each shell.", "meta": {"posReactions": "3", "negReactions": "0"}}
{"id": "COM20", "speaker": "shtirlic", "conversation_id": "ROOT", "reply_to": "COM19", "timestamp": "2020-03-05T16:53:28Z", "text": "Hi there, while `win+c` is working great, `win+v` does not, I disabled `win+v` shortcut in Explorer registry section since` win+v` is special paste in Windows now, but terminal does not respond to` win+v`\r\n```json\r\n    {\r\n      \"command\": \"copy\",\r\n      \"keys\": [ \"win+c\" ]\r\n    },\r\n    {\r\n      \"command\": \"paste\",\r\n      \"keys\": [ \"win+v\" ]\r\n    },\r\n\r\n``` \r\n\r\nSo my goal to mimic cmd+c and cmd+v behavior, and it's  99% ready, the only thing left  is just `win+v` handling with windows terminal", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM21", "speaker": "DHowett-MSFT", "conversation_id": "ROOT", "reply_to": "COM20", "timestamp": "2020-03-05T18:17:57Z", "text": "@shtirlic this isn't the right issue for your comment; this issue is for <kbd>ctrl</kbd>.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM22", "speaker": "randomascii", "conversation_id": "ROOT", "reply_to": "COM21", "timestamp": "2020-03-28T00:12:24Z", "text": "I don't understand why Windows Terminal Preview is favoring Xterm/Gnome compatibility over cmd.exe compatibility, especially for Ctrl+V. I think that will add frustration and will slow adoption from Windows users. But, I tried the recommended bindings to make it work. After reading the documentation I found where to put the recommended snippet (in the global section, in a \"keybindings\" array, but it is also important to notice the existing keybindings array, because if you paste a new one at then it gets overwritten by the empty array at the bottom. Yay .json!\r\n\r\nAnyway, paste this in over the empty keybindings array at the bottom:\r\n\r\n  \"keybindings\": [\r\n    {\r\n      \"command\": \"copy\",\r\n      \"keys\": [ \"ctrl+c\" ]\r\n    },\r\n    {\r\n      \"command\": \"paste\",\r\n      \"keys\": [ \"ctrl+v\" ]\r\n    }\r\n  ],\r\n\r\nAnd please consider favoring Windows compatibility, at least for Ctrl+V. Or make it easier to enable instead of requiring editing of error-prone .json files.", "meta": {"posReactions": "3", "negReactions": "0"}}
{"id": "COM23", "speaker": "msftbot[bot]", "conversation_id": "ROOT", "reply_to": "COM22", "timestamp": "2020-04-22T17:15:57Z", "text": ":tada:This issue was addressed in #5217, which has now been successfully released as `Windows Terminal Preview v0.11.1121.0`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/microsoft/terminal/releases/tag/v0.11.1121.0)\n* [Store Download](https://www.microsoft.com/store/apps/9n0dx20hk701?cid=storebadge&ocid=badge)", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM24", "speaker": "vadimkantorov", "conversation_id": "ROOT", "reply_to": "COM23", "timestamp": "2020-04-27T09:44:38Z", "text": "Given that \"Ctrl+C\" is now default copy keybinding on new installations. how will standard \"Ctrl+C\" for SIGINT work?\r\n\r\nImagine a long-running console program with some text selected and Ctrl+C typed. What will Windows Terminal do? Copy? Interrupt the program? Both? @carlos-zamora ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM25", "speaker": "zadjii-msft", "conversation_id": "ROOT", "reply_to": "COM24", "timestamp": "2020-04-27T13:48:55Z", "text": "* If the user is using the new keybindings:\r\n  - If text is selected: <kbd>Ctrl+c</kbd> will copy the selected text.\r\n  - If text is **NOT** selected: <kbd>Ctrl+c</kbd> will send a interrupt, the same way <kbd>Ctrl+c</kbd> usually behaves.\r\n\r\nIf the user doesn't like that behavior, it's pretty trivial to remove the new <kbd>Ctrl+c</kbd> binding from their `settings.json`, and rely on the <kbd>Ctrl+shift+c</kbd> binding that's in `defaults.json`", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM26", "speaker": "randomascii", "conversation_id": "ROOT", "reply_to": "COM25", "timestamp": "2020-04-27T15:38:05Z", "text": "Does Enter now copy text by default? I realized when switching from cmd.exe to the new terminal that I use that to copy text a lot. I'm not sure if there is any significant disadvantage to making that the default, and it seems that the new terminal should, where possible, ease the transition from cmd.exe.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM27", "speaker": "zadjii-msft", "conversation_id": "ROOT", "reply_to": "COM26", "timestamp": "2020-04-27T17:00:23Z", "text": "@randomascii nope, but that is a lot less common of a scenario for our users then <kbd>Ctrl+C</kbd> for copy. There's a balance we need to strike between \"keeping the old behavior of conhost\" and \"making space to create a better experience\". For those of our users who actually do want copy on enter, adding it isn't terribly difficult:\r\n\r\n```json\r\n        { \"command\": \"copy\", \"keys\": [\"enter\"] },\r\n```\r\n\r\nbut I'd bet most people weren't even aware that feature existed in the original conhost \ud83d\ude06 ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM28", "speaker": "rbreaves", "conversation_id": "ROOT", "reply_to": "COM27", "timestamp": "2020-05-31T05:21:52Z", "text": " \r\n> To be honest what I really wish is that I could change the rest of Windows to use ALT-C and ALT-V (or META-C and META-V) for copy/paste, which would not collide with most other uses but keep the control bindings available for terminal windows. I do understand why that's not practical -- given the fact that each application manages it's own key bindings.\r\n\r\n@gdamore What you\u2019ve suggested is actually the most practical thing in this thread. Checkout my https://github.com/rbreaves/kinto project.\r\n\r\n@kzu", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM29", "speaker": "stewSquared", "conversation_id": "ROOT", "reply_to": "COM28", "timestamp": "2020-06-27T15:17:53Z", "text": "Okay great. Now how do we disable this?\r\n\r\n-- sad linux user\r\n\r\nEdit: Nevermind. Found it in settings.json and deleted it.", "meta": {"posReactions": "1", "negReactions": "0"}}
