{"id": "ROOT", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2020-12-23T19:59:09Z", "text": "ref-struct errors can be suppressed in VB. ```vb\r Class C\r     Public Shared Sub FooWithoutAnyErrorsOrWarnings()\r #Disable Warning BC40008 ' Type or member is obsolete\r         Foo()\r #Enable Warning BC40008 ' Type or member is obsolete\r     End Sub\r \r     <Obsolete(\"\", False)>\r     Private Shared Sub Foo()\r         Dim x = New Span(Of Byte)({1, 2, 3})\r     End Sub\r End Class\r ```\r \r This turns out to be pretty dangerous.  It's easy to create code now that captures spans and reads/writes from them long after their backing store is invalid:\r \r ```vb\r <Obsolete(\"\", False)>\r Class C\r     Private s As Span(Of Byte)\r \r     Public Sub Capture(s As Span(Of Byte))\r         Me.s = s\r     End Sub\r \r     Public Function Read() As Byte()\r         Return s.ToArray()\r     End Function\r End Class\r ```\r \r This was discovered as a way to workaround the restriction against using ref-structs in VB where lifetimes are not tracked.  However, even though there is no usage of any unsafe apis, it's now trivial to get into very unsafe scenarios that could trivially lead to memory corruption.\r \r When we discussed 'obsolete' as the mechanism to disable access to this type, i'm not sure if it was ever recognized that there was this loophole.  I personally never realized an 'obsolete error' could be suppressed by an 'obsolete warning'.  \r \r Should we introduce a new category of obsolete (similar to how we added diagnostics to them)?  i.e. one that is an error, but is always an error no matter what?", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM0", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2020-12-23T19:59:17Z", "text": "Tagging @jaredpar ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "AdamSpeight2008", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2020-12-25T01:54:24Z", "text": "Or you could allow VB.net to **consume** types of this kind.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2020-12-25T01:57:07Z", "text": "@AdamSpeight2008 i believe the decisoin was already made on that that this was not supported.  Hence the use of ObsoleteAttribute in the first place.  Note that this issue applies to C# as well as VB. ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "paul1956", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2020-12-25T09:19:38Z", "text": "The issue is assignment, if all I do is pass a Span or Ref Struct to another API that understands them the concern would not hold. That way VB could access all the New high performance API's and not get into the complexity they require to implement API's using these unsafe features. This is similar as VB's IntPtr it gets from Windows and is only safe to pass back to Windows.\r\n\r\nTo be clear I don't want to write any code in VB that accesses these Obsolete types\r\nThis would be allowed\r\n```\r\nDim json As String = JsonSerializer.Serialize(people, New JsonSerializerOptions With\r\n   {\r\n    .WriteIndented = True,\r\n    .ReferenceHandler = New ReferenceHandler(Of GuidReferenceResolver)\r\n   }\r\n)\r\n\r\n```\r\nObsolete reference would not be allowed to leak out of a statement. so below would not be allowed.\r\n```\r\nDim options As JsonSerializerOptions = New JsonSerializerOptions With\r\n  {\r\n    .WriteIndented = True,\r\n    .ReferenceHandler = New ReferenceHandler(Of GuidReferenceResolver)\r\n  }\r\n\r\nDim json As String = JsonSerializer.Serialize(people, options)\r\n```\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "VBAndCs", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2020-12-25T10:01:23Z", "text": "In fact, VB can't violate ref structs rules, as this throws external runtime exceptions, so, it is not that dangerous as it will not work!\r\nSo, I strongly recommend that you take no action about that. I came up with this Obsolete workaround to allow VB to use important libraries such as System.Text.Json, and it worked. All we need is to read the rsf types, not to copy or box them in any way. We can stick to that and hold responsible for any outcome. \r\nI see no benefits of denying VB access to new .NET core APIs that use ref structs. I found a cheap workaround, but seems @CyrusNajmabadi  wants to put money and effort to take it out of our hands. This seems a loose/loose situation for the team and VB devs, and serves no purpose at all except sending a repeated message that VB is being deliberately killed, otherwise, why it only gets changes when it is not of favor of anyone? \r\nI think VB will do much better if you left it as is. No more damage please.\r\nThanks.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "VBAndCs", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2020-12-25T13:28:25Z", "text": "I think we need to hear VB community voice here:\r\n@Happypig375  @pricerc @hartmair @franzalex  @gilfusion @ekolis @tfukumori @RevensofT @jrmoreno1 @salelele @DzonnyDZ @rskar-git @cristianlt23 @aarondglover @tverweij @KathleenDollard @ocdtrekkie  @Nukepayload2 @vbcodec  @Padanian @sahil48 ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "Nukepayload2", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2020-12-25T13:55:00Z", "text": "@CyrusNajmabadi  Please don't change the behavior of `ObsoleteAttribute`. Because my projects are already using obsolete warnings to suppress obsolete errors.\r\nFor example:\r\nhttps://github.com/Nukepayload2/ryu/blob/1a59a71a23e948cf07be0d7d7e8e493f40ad49e5/visualbasic/D2s.vb#L483 \r\n\r\nOur commercial products are also using this behavior to workaround limitations of 3rd-party libraries. ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "DzonnyDZ", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2020-12-25T18:12:04Z", "text": "It seems here that Microsoft is taking an active approach to kill VB actively (as opposed to passive approach - just let it die by abandoning it). :-(", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "Padanian", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2020-12-25T18:15:34Z", "text": "Not interested. Unsubscribing.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2020-12-25T19:20:04Z", "text": ">  Please don't change the behavior of ObsoleteAttribute.\r\n\r\nAs I said:\r\n\r\n> Should we introduce a new category of obsolete (similar to how we added diagnostics to them)? i.e. one that is an error, but is always an error no matter what?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2020-12-25T19:21:29Z", "text": "> as this throws external runtime exceptions\r\n\r\nThat seems like a worse outcome. Code will compile without any indications if an issue, but then at runtime you will get cryptic runtime errors that don't even indicate where the problem exists. ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2020-12-25T19:24:48Z", "text": "> I see no benefits of denying VB access to new .NET core APIs that use ref structs.\r\n\r\nThe benefit for me is the clarity that this just isn't supported or usable at all. Rather than being in this position where somethings work, but some do not, and now random cryptic runtime errors might get thrown all over the place. That doesn't seem to be a good thing.  I'd rather this either just be supported and usable, or not supported and not usable.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "CyrusNajmabadi", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2020-12-25T19:25:16Z", "text": "Locking the convo until the team can decide on the best path forward here. ", "meta": {"posReactions": "0", "negReactions": "0"}}
