{"id": "ROOT", "speaker": "dagwieers", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-09-27T12:44:17Z", "text": "Feature: Allow until-loops on blocks or includes ##### SUMMARY\r It would be quite useful if you can loop over more than one single tasks.\r \r For instance if you have to poll a remote system for some progress and at the same time you want to push this progress to another backend, you could be doing:\r \r ```yaml\r - hosts: localhost\r   tasks:\r   - name: Start a long-running task\r     uri:\r       url: https://some-service/v1/put/new_job\r       body: { foo: bar }\r     register: new_job\r \r   - until: job_status.json.message in ['Finished', 'Failed']\r     block:\r     - name: Get job status\r       uri:\r         url: https://some-service/v1/get/new_job\r       register: job_status\r \r     - name: Report job status to web service\r       uri:\r         url: https://backend-system/v1/post/job_status\r         body: '{{ job_status.json }}'\r ```\r \r There are many uses to this.\r \r ##### ISSUE TYPE\r - Feature Idea\r \r ##### COMPONENT NAME\r Core", "meta": {"posReactions": "68", "negReactions": "0"}}
{"id": "COM0", "speaker": "mkrizek", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-09-27T13:17:02Z", "text": "https://github.com/ansible/ansible/issues/13262", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "dagwieers", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2018-09-27T13:35:34Z", "text": "@mkrizek Hmm, I searched for various combination of keywords, and that one did not stick out :-(\r\n\r\nThat said, I tried using `until:` with `block:`, `include:` and `include_tasks`, but the first one fails, and the 2 others only run the included file once.\r\n\r\n```yaml\r\n- hosts: localhost\r\n  tasks:\r\n  - include: taskboot.yml\r\n    until: 5|random == 5\r\n```\r\n\r\nBut apparently looping only works when using `loop:` ?\r\n\r\n```yaml\r\n- hosts: localhost\r\n  tasks:\r\n  - include: taskboot.yml\r\n    loop: [ 1, 2, 3, 4, 5 ]\r\n```", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "dagwieers", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2018-09-27T13:38:01Z", "text": "Whatever I try, using `until:` does not work with `include:` and `include_tasks:`.\r\n\r\n```yaml\r\n- hosts: localhost\r\n  tasks:\r\n  - include: taskbook.yml\r\n    until: false\r\n    retries: 5\r\n    delay: 1\r\n```", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "mkrizek", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2018-09-27T13:54:41Z", "text": "Yeah, `until` is not a valid argument for includes, see https://github.com/ansible/ansible/pull/46177.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "dagwieers", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2018-09-27T13:58:09Z", "text": "@mkrizek In other words, what we need is not possible, neither on blocks or on includes.\r\n\r\nSo I will keep this one open, but changed the title.", "meta": {"posReactions": "0", "negReactions": "1"}}
{"id": "COM5", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2018-09-27T14:10:59Z", "text": "We do have an open proposal to \"taskify\" includes, which would allow things like until to work on them.\r\n\r\nhttps://github.com/ansible/proposals/issues/136\r\n\r\nI, however, do not believe that blocks should be extended to support this feature.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "dagwieers", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2018-09-27T14:15:10Z", "text": "@sivel And what would be the reason for not extending the functionality to blocks ? As it would be a natural thing if it would work. (i.e. being able to loop every construction within a play)", "meta": {"posReactions": "6", "negReactions": "0"}}
{"id": "COM7", "speaker": "bcoca", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2018-09-27T14:17:10Z", "text": "blocks are currently 'static' groupings, enabling loops on them (not just having tasks inherit them) would require making them dynamic ... as we saw with `include:` this has many consequences that are not immediately apparent.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2018-09-27T14:20:58Z", "text": "To extend what @bcoca mentions, doing so would require us to deprecate `block` and replace with something like `block_dynamic` and `block_static`.\r\n\r\nAlso, _every_ user of ansible utilizes blocks, whether explicit, or our internal implicit use of them.  They are a fundamental building block of how tasks are represented and executed.  Changing such an integral feature is sure to lead to unforeseen issues.", "meta": {"posReactions": "3", "negReactions": "1"}}
{"id": "COM9", "speaker": "dagwieers", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2018-09-28T15:35:37Z", "text": "In any case, the documentation does not give any detail, or even does not discuss what is supposed to work and what not. There's no real distinction between \"loops\" and until-loops, not sure how we can make this more clear overal. The expectation is that what works for \"loops\" also works for until-loops.", "meta": {"posReactions": "6", "negReactions": "0"}}
{"id": "COM10", "speaker": "bcoca", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2018-09-28T15:46:45Z", "text": "i would do both, allow until/retry loops to work with includes and then clearly document how they work ... so we have something to point at when it does not meet some people's expectations", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM11", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2018-09-28T16:35:13Z", "text": "Just to provide a small amount of detail about how includes work, is that dynamic includes are more of an internal trigger, as opposed to something that wraps execution.\r\n\r\nAs such, the task_executor short circuits early on an include, indicating to the strategy that it should read a file and insert task blocks into the TQM, that will later be processed by the task_executor.\r\n\r\nDue to this, there is no tracking of state as a roll up to the parent include.  So an until loop, which would rely on some version of a failed when/success scenario, would only refer to whether or not the strategy was told to do as detailed above.  In which case, it should always succeed.\r\n\r\nIn any case, the mode of operation is that we short circuit far before an until conditions are inspected.  If we just \"made it work\" right now, it definitely wouldn't do what a person expects.  To do what people expect, would require ansible/proposals#136 to be implemented.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "bcoca", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2018-09-28T16:38:07Z", "text": "the until in this case would have to rely on vars set or registered from the included tasks as the registration of the include itself would be useless ... it would still 'work' just not how most other cases do.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM13", "speaker": "dreamcat4", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2018-09-28T21:01:02Z", "text": "@dagwieers The other thread is locked now. But this recent suggestion (@sivel comment above) is brand new:\r\n\r\nhttps://github.com/ansible/ansible/issues/46203#issuecomment-425111123\r\n\r\nAnd you are saying we might want to leave open the possibility of someone else coming along later, to do a PR for looping over blocks off their own backs. Then at least we could make it crystal clear to them, as to make it as a separate and new `block_dynamic:`, and not touching the traditional static `block:` intact? Would that not make more sense to everybody ? Can we all agree upon that ahead of time? Because I agree with this idea. For all the same reasons - it's going to help prevent breaking other existing stuff which we rely on. Whilst still allowing the possibility of someone to come along, try making a PR for actually implementing it. Should we really want them to be making the best possible job and such. Then we should at least be clearly specifying this. If we already know that ahead of time. Which seems to be the case now? ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM14", "speaker": "mkrizek", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2018-10-31T14:29:00Z", "text": "Linking this here https://github.com/ansible/ansible/issues/16621", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM15", "speaker": "deatheros", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2018-11-05T13:00:06Z", "text": "+1 For implementing this feature", "meta": {"posReactions": "0", "negReactions": "2"}}
{"id": "COM16", "speaker": "ramon-garcia", "conversation_id": "ROOT", "reply_to": "COM15", "timestamp": "2018-11-30T16:24:45Z", "text": "It is natural that a block should be repeatable. Otherwise, it is very counterintuitive. It confuses.\r\n\r\nAnd there seems to be no way to write a playbook with loop with more than one statement. No programming language is so limited.", "meta": {"posReactions": "25", "negReactions": "0"}}
{"id": "COM17", "speaker": "ramon-garcia", "conversation_id": "ROOT", "reply_to": "COM16", "timestamp": "2018-11-30T21:02:25Z", "text": "It looks like in Ansible, if one needs to do something complex, one should write an action plugin. This is what we are going to do.\r\n\r\nHere one has many examples:\r\nhttps://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/action\r\n\r\nBest regards", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM18", "speaker": "Freeze", "conversation_id": "ROOT", "reply_to": "COM17", "timestamp": "2019-03-26T20:48:14Z", "text": "This is absolutely a shortcoming.  Ansible has been perfect for most of my needs so far, but it seems like expanding the capabilities of blocks would make Ansible a lot better solution. ", "meta": {"posReactions": "7", "negReactions": "0"}}
{"id": "COM19", "speaker": "lucasbasquerotto", "conversation_id": "ROOT", "reply_to": "COM18", "timestamp": "2019-03-26T23:37:19Z", "text": "I tried to use `until` in a `include_tasks` and it didn't worked. \r\n\r\nWhat I did as a workaround was to create a yml file that include the task (`loop.yml`) and call itself recursively (`recursive.yml`) while the condition is still not satisfied.\r\n\r\n_recursive.yml:_\r\n\r\n```yml\r\n---\r\n\r\n- name: 'checking {{ watch_job }} status (recursive)'\r\n  include_tasks: 'loop.yml'\r\n\r\n- name: 'count ({{ watch_count | int + 1 }})'\r\n  set_fact:\r\n    watch_count: '{{ watch_count | int + 1 }}'\r\n\r\n- name: 'retries ({{ (watch_timeout | int / watch_poll | int) | int }})'\r\n  set_fact:\r\n    watch_retries: '{{ (watch_timeout | int / watch_poll | int) | int }}'\r\n\r\n- name: 'timeout ({{ watch_timeout }} seconds)'\r\n  fail: \r\n    msg: \"Timeout of {{ watch_timeout }} seconds exceeded ({{ watch_retries }} retries)\"\r\n  when: (not watch_status.finished) and (watch_count | int > watch_retries | int)\r\n\r\n- name: 'wait for {{ watch_poll }} seconds'\r\n  wait_for:\r\n    timeout: '{{ watch_poll | int }}'\r\n  when: not watch_status.finished\r\n\r\n- name: 'call itself recursively'\r\n  include_tasks: 'recursive.yml'\r\n  when: not watch_status.finished\r\n```\r\n\r\nIn the above file, I included a timeout in the case of taking too long (this is in a role that [shows the output of what is running in the hosts](https://github.com/ansible/ansible/issues/30411#issuecomment-471277785)).\r\n\r\nNot the ideal solution, but worked for me and was relatively easy to change using `until` to do the above.", "meta": {"posReactions": "12", "negReactions": "0"}}
{"id": "COM20", "speaker": "efazenda", "conversation_id": "ROOT", "reply_to": "COM19", "timestamp": "2019-05-07T09:11:49Z", "text": "+1 for this feature !", "meta": {"posReactions": "6", "negReactions": "5"}}
{"id": "COM21", "speaker": "woopstar", "conversation_id": "ROOT", "reply_to": "COM20", "timestamp": "2019-05-07T20:16:18Z", "text": "+1", "meta": {"posReactions": "6", "negReactions": "5"}}
{"id": "COM22", "speaker": "wahab-icp", "conversation_id": "ROOT", "reply_to": "COM21", "timestamp": "2019-05-27T15:44:08Z", "text": "+1 for until loops on blocks", "meta": {"posReactions": "1", "negReactions": "5"}}
{"id": "COM23", "speaker": "matanbaru", "conversation_id": "ROOT", "reply_to": "COM22", "timestamp": "2019-05-28T14:38:49Z", "text": "I have been searching a way to do `until` (infinitely) for a success on all modules on the block and I managed to do this with `include_tasks` with `rescue`\r\n\r\nI could not use regular `until` because the IP is changing over time and had to modify it on the run\r\n\r\n> wait_until_success.yml\r\n\r\n```\r\n- name: 'Wait until success'\r\n  block:\r\n    - name: Get server updated ip\r\n      uri:\r\n        url: https://localhost/ip\r\n        return_content: yes\r\n        status_code: 200\r\n      register: ip\r\n\r\n    - name: ssh to the server\r\n      wait_for:\r\n        host: \"{{ ip }}\"\r\n        port: 22\r\n        timeout: 30\r\n        state: started\r\n  rescue:\r\n    - debug:\r\n        msg: \"Failed to connect - Retrying...\"\r\n    - include_tasks: wait_until_success.yml\r\n```", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM24", "speaker": "Ovski4", "conversation_id": "ROOT", "reply_to": "COM23", "timestamp": "2019-11-20T13:56:11Z", "text": "Same as @matanbaru with a way to fail after multiple retries\r\n\r\n```yml\r\n- name: 'Wait until success'\r\n  block:\r\n    - name: Set the retry count\r\n      set_fact:\r\n        retry_count: \"{{ 0 if retry_count is undefined else retry_count|int + 1 }}\"\r\n\r\n    - name: Get server updated ip\r\n      uri:\r\n        url: https://localhost/ip\r\n        return_content: yes\r\n        status_code: 200\r\n      register: ip\r\n\r\n    - name: ssh to the server\r\n      wait_for:\r\n        host: \"{{ ip }}\"\r\n        port: 22\r\n        timeout: 30\r\n        state: started\r\n  rescue:\r\n    - fail:\r\n        msg: Ended after 5 retries\r\n      when: retry_count|int == 5\r\n\r\n    - debug:\r\n        msg: \"Failed to connect - Retrying...\"\r\n\r\n    - include_tasks: wait_until_success.yml\r\n```", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM25", "speaker": "frsauvage", "conversation_id": "ROOT", "reply_to": "COM24", "timestamp": "2020-06-21T06:27:26Z", "text": "+1 could you please add retry-until in loops !\r\nAbsolutely \"Must Have\" feature !", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM26", "speaker": "chris93111", "conversation_id": "ROOT", "reply_to": "COM25", "timestamp": "2020-07-03T22:10:03Z", "text": "+1\r\n", "meta": {"posReactions": "1", "negReactions": "2"}}
{"id": "COM27", "speaker": "karolyi", "conversation_id": "ROOT", "reply_to": "COM26", "timestamp": "2020-07-29T16:46:36Z", "text": "+1", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM28", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM27", "timestamp": "2020-07-29T16:50:34Z", "text": "I've locked this to contributors for now.  Adding `+1` comments is too noisy.  For future reference, add a reaction to the issue body, and don't comment.", "meta": {"posReactions": "0", "negReactions": "0"}}
