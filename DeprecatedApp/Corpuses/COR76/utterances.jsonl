{"id": "ROOT", "speaker": "jamescassell", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-03-07T00:44:41Z", "text": "spurious CONDITIONAL_BARE_VARS warnings <!--- Verify first that your issue is not already reported on GitHub -->\r <!--- Also test if the latest release and devel branch are affected too -->\r <!--- Complete *all* sections as described, this form is processed automatically -->\r \r ##### SUMMARY\r <!--- Explain the problem briefly below -->\r \r Suprrious Deprecation warning and regular (non-deprecation) warnings when using boolean vars.\r \r ##### ISSUE TYPE\r - Bug Report\r \r ##### COMPONENT NAME\r <!--- Write the short name of the module, plugin, task or feature below, use your best guess if unsure -->\r core\r \r ##### ANSIBLE VERSION\r <!--- Paste verbatim output from \"ansible --version\" between quotes -->\r ```paste below\r ansible 2.8.0.dev0\r   config file = /etc/ansible/ansible.cfg\r   configured module search path = [u'/home/user/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\r   ansible python module location = /home/user/ansible-ansible/lib/ansible\r   executable location = /home/user/ansible-ansible/bin/ansible\r   python version = 2.7.5 (default, Oct 30 2018, 23:45:53) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]\r ```\r \r ##### CONFIGURATION\r <!--- Paste verbatim output from \"ansible-config dump --only-changed\" between quotes -->\r ```paste below\r DEFAULT_STDOUT_CALLBACK(env: ANSIBLE_STDOUT_CALLBACK) = debug\r ```\r \r ##### OS / ENVIRONMENT\r <!--- Provide all relevant information below, e.g. target OS versions, network device firmware, etc. -->\r CentOS/RHEL 7, Fedora 29\r \r ##### STEPS TO REPRODUCE\r <!--- Describe exactly how to reproduce the problem, using a minimal test-case -->\r \r <!--- Paste example playbooks or commands between quotes below -->\r ```yaml\r ---\r - hosts: localhost\r   gather_facts: no\r   vars:\r     mybare: true\r     myfalse: false\r     mycomplex: \"{{ mybare or myfalse }}\"\r   tasks:\r   - debug:\r       msg: bare\r     when: mybare\r   - debug:\r       msg: complex\r     when: mycomplex\r ```\r \r <!--- HINT: You can paste gist.github.com links for larger files -->\r \r ##### EXPECTED RESULTS\r <!--- Describe what you expected to happen when running the steps above -->\r \r Results on ansible 2.7:\r ```\r PLAY [localhost] ****************************************************************************************************************************************************************************************************************************\r \r TASK [debug] ********************************************************************************************************************************************************************************************************************************\r ok: [localhost] => {}\r \r MSG:\r \r bare\r \r \r TASK [debug] ********************************************************************************************************************************************************************************************************************************\r ok: [localhost] => {}\r \r MSG:\r \r complex\r \r \r PLAY RECAP **********************************************************************************************************************************************************************************************************************************\r localhost                  : ok=2    changed=0    unreachable=0    failed=0\r ```\r \r ##### ACTUAL RESULTS\r <!--- Describe what actually happened. If possible run with extra verbosity (-vvvv) -->\r \r Results on devel/2.8\r <!--- Paste verbatim command output between quotes -->\r ```paste below\r PLAY [localhost] ****************************************************************************************************************************************************************************************************************************\r \r TASK [debug] ********************************************************************************************************************************************************************************************************************************\r [DEPRECATION WARNING]: evaluating mybare as a bare variable, this behaviour will go away and you might need to add |bool to the expression in the future. Also see CONDITIONAL_BARE_VARS configuration toggle.. This feature will be removed\r  in version 2.12. Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.\r ok: [localhost] => {}\r \r MSG:\r \r bare\r \r \r TASK [debug] ********************************************************************************************************************************************************************************************************************************\r [DEPRECATION WARNING]: evaluating mycomplex as a bare variable, this behaviour will go away and you might need to add |bool to the expression in the future. Also see CONDITIONAL_BARE_VARS configuration toggle.. This feature will be\r removed in version 2.12. Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.\r  [WARNING]: conditional statements should not include jinja2 templating delimiters such as {{ }} or {% %}. Found: {{ mybare or myfalse }}\r \r ok: [localhost] => {}\r \r MSG:\r \r complex\r \r \r PLAY RECAP **********************************************************************************************************************************************************************************************************************************\r localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\r ```\r ", "meta": {"posReactions": "3", "negReactions": "0"}}
{"id": "COM0", "speaker": "mz0", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-03-07T15:07:47Z", "text": "same here:\r\n```\r\n- name: Flag swap LV found (skip otherwise).\r\n  set_fact: swap_lv=yes\r\n  when: res.stdout == \"vg-lv_swap\"\r\n\r\n- name: Flag swap LV not found (skip otherwise).\r\n  set_fact: swap_lv=no\r\n  when: res.stdout != \"vg-lv_swap\"\r\n\r\n- block:\r\n  - ... (5 tasks omitted)\r\n  when: swap_lv|bool\r\n```\r\n(shown with silencing workaround, without this '|bool' each task in block shows that warning)\r\n\r\n```\r\n[DEPRECATION WARNING]: evaluating swap_lv as a bare variable, this behaviour will go away and you\r\nmight need to add |bool to the expression in the future. Also see CONDITIONAL_BARE_VARS \r\nconfiguration toggle.. This feature will be removed in version 2.12. Deprecation warnings can be \r\ndisabled by setting deprecation_warnings=False in ansible.cfg.\r\n```", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2019-03-07T15:19:35Z", "text": "This is a purposeful warning for this situation.\r\n\r\nThe behavior that it is warning about, relates to how a single bare variable is handled in conditionals.\r\n\r\nWe have a piece of logic, that can perform unexpected actions that we are deprecating in 2.12.\r\n\r\nThat logic would enable the following bad behavior:\r\n\r\n```\r\n- debug:\r\n    msg: \"This should run with 'thing' is the string 'false'\"\r\n  when: thing\r\n  vars:\r\n    thing: \"false\"\r\n```\r\n\r\nThis task actually gets skipped, instead of run.  A string should be a truthy value, but is unwound in a way that makes it falsy.\r\n\r\nInstead of treating that as:\r\n\r\n```\r\n{% if thing %}True{% else %}False{% endif %}\r\n```\r\n\r\nIt instead get's treated as:\r\n\r\n```\r\n{% if false %}True{% else %}False{% endif %}\r\n```", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM2", "speaker": "jamescassell", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2019-03-07T15:35:57Z", "text": "I assume my reproducer playbook will work identically as it does today (2.7) once the deprecation message is gone.  Can an option to be added to squash only this warning?  There is nothing wrong w/ the playbook I described above.\r\n\r\nThe second warning in the \"complex\" task for certain seems like a recurrence of a bug that happened a few releases ago.\r\n\r\nEdit: it would be most useful to only show the warning for cases where a string is converted implicitly to a bool.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2019-03-07T15:40:04Z", "text": "It should work the same.  You can try to silence it by setting `CONDITIONAL_BARE_VARS` to `False` (https://docs.ansible.com/ansible/devel/reference_appendices/config.html#conditinal-bare-vars)\r\n\r\nThere are issues aside from bool conversion as well.\r\n\r\nIn the case of `thing: \"foo\"`, it would be changed to `{% if foo %}` which would give an undefined var error, if `foo` did not exist, or if it existed, it could also give an unexpected outcome.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "jamescassell", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2019-03-07T15:48:53Z", "text": "So this feature is opt-in for now?  And if I opt-in, it will squash the warning?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2019-03-07T15:55:48Z", "text": "It is opt-in, and if you opt-in, the warning will disappear.  Once 2.12 lands, the default will swap to `False`, the current default is `True`", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM6", "speaker": "ChristianCiach", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2019-05-23T11:12:49Z", "text": "Does it really make sense to show the warning even if the variable in question is undoubtedly a boolean? There is no difference in this case (as far as I understand this). It doesn't make sense to pipe a boolean variable through the `|bool` filter.\r\n\r\nAlso, I think the warning itself is misleading. It says `evaluating x as a bare variable, this \r\nbehaviour will go away`. This sounds like bare variables won't be supported at all in the future, but in reality they will just be interpreted differently in cases where the variable is of type String.", "meta": {"posReactions": "8", "negReactions": "0"}}
{"id": "COM7", "speaker": "dbilling", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2019-05-28T21:16:39Z", "text": "Completely agree with @ChristianCiach -- shouldn't this warning be only issued when a bare **string** variable is used in a conditional?  That would be deserving of a warning. However, this deprecation warning also seems to be issued when a bare **boolean** variable is being used in a conditional. \r\n\r\nLet's look at an example included in ansible's own documentation:  https://docs.ansible.com/ansible/latest/user_guide/playbooks_conditionals.html#the-when-statement\r\n```\r\nvars:\r\n  epic: true\r\ntasks:\r\n    - shell: echo \"This certainly is epic!\"\r\n       when: epic\r\n```\r\n\r\nWhy is this triggering the deprecation warning?   This warning will cause a tremendous amount of work for the ansible community... that is, tons of playbooks will need to be rewritten that have conditionals checking bare booleans.  (for example, adding the | bool filter to make the warning go away)  Wouldn't it make sense to only have the deprecation warning pop out when it's a naked string variable is being evaluated, and not have the warning for a naked boolean variable?", "meta": {"posReactions": "2", "negReactions": "0"}}
{"id": "COM8", "speaker": "ChristianCiach", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2019-05-29T08:56:16Z", "text": "It should also be mentioned that ansible-lint rule E602 explicitly encourages the use of bare-variable conditionals that trigger deprecation warnings now. https://docs.ansible.com/ansible-lint/rules/default_rules.html", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "jamescassell", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2019-05-29T10:40:40Z", "text": "> It should also be mentioned that ansible-lint rule E602 explicitly encourages the use of bare-variable conditionals that trigger deprecation warnings now. https://docs.ansible.com/ansible-lint/rules/default_rules.html\r\n\r\nNothing is really being deprecated for those using true booleans, only a default changed.  I agree that it should not be triggered in this case. You can squash these warnings by opting in to the new behavior, which is what everyone wanted anyway from the start.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "dbilling", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2019-05-29T17:00:57Z", "text": "Opting into the new/future behavior  (i.e. setting conditional_bare_variables to false in ansible.cfg) is only a resonable solution for an end user.  For those that write and maintain roles consumed by others, these spurious warnings create a horrible choice: they will either need to continuously tell all their users to ignore the copious warnings/reconfigure their ansible.cfg file, or, alternatively, make silly changes to the role to make the spurious warnings go away.    Most role maintainers will simply give in, and add a \" | bool\" filter, even though using the | bool filter on a boolean is just silly.   This is really a sad situation, and I'm really surprised to see Ansible miss so badly.  Ansible's own examples cause this spurious warning, yet there have been no changes to the examples!\r\n\r\n\r\n", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM11", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2019-05-30T15:53:26Z", "text": "After a discussion in our recent IRC meeting (https://meetbot.fedoraproject.org/ansible-meeting/2019-05-30/ansible_public_core_irc_meeting.2019-05-30-15.01.log.html#l-116) we would entertain a PR that tries to further clarify the warning, or restrict it to a smaller subset of conditions.\r\n\r\nAccepting the PR would be dependent on the implications of the change and specific implementation, ensuring that we do not cause performance regressions or cause other problems.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "s-hertel", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2019-05-30T16:38:20Z", "text": "I have opened a tentative solution [here](https://github.com/ansible/ansible/pull/57190) to restrict it to a smaller subset of warnings and would appreciate any feedback.", "meta": {"posReactions": "0", "negReactions": "0"}}
