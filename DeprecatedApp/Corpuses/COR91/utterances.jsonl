{"id": "ROOT", "speaker": "kenyon", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2020-04-08T07:45:58Z", "text": "v2.9.6 templating performance regression due to caching change in #67429 ##### SUMMARY\r #67429 (included in Ansible v2.9.6) causes a massive performance penalty compared to Ansible v2.9.5. I have a project making heavy use of Ansible's `template` module. With v2.9.5 it takes about 15 seconds to render a file. With v2.9.6, it takes about 9 minutes. Reverting the change in #67429 (just changing `if cache and only_one:` back to `if cache:`) restores the v2.9.5 performance.\r \r ##### ISSUE TYPE\r - Bug Report\r \r ##### COMPONENT NAME\r `lib/ansible/template/__init__.py`\r \r ##### ANSIBLE VERSION\r <!--- Paste verbatim output from \"ansible --version\" between quotes -->\r ```paste below\r ansible 2.9.6\r   config file = /users/kenyon/git/tni4/ansible.cfg\r   configured module search path = ['/users/kenyon/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']\r   ansible python module location = /users/kenyon/.local/share/virtualenvs/tni4-I44CyCAv/lib/python3.6/site-packages/ansible\r   executable location = /users/kenyon/.local/share/virtualenvs/tni4-I44CyCAv/bin/ansible\r   python version = 3.6.8 (default, Apr 25 2019, 21:02:35) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]\r ```\r \r ##### CONFIGURATION\r <!--- Paste verbatim output from \"ansible-config dump --only-changed\" between quotes -->\r ```paste below\r DEFAULT_HOST_LIST(/users/kenyon/git/tni4/ansible.cfg) = ['/users/kenyon/git/tni4/hosts']\r ```\r \r ##### OS / ENVIRONMENT\r <!--- Provide all relevant information below, e.g. target OS versions, network device firmware, etc. -->\r CentOS 7\r \r ##### STEPS TO REPRODUCE\r <!--- Describe exactly how to reproduce the problem, using a minimal test-case -->\r Use large templates with lots of Jinja code. I am rendering configuration files for network devices, so the end resulting rendered files are around 2000 lines or less, but the templates use a lot of Jinja features.\r \r ##### EXPECTED RESULTS\r <!--- Describe what you expected to happen when running the steps above -->\r No performance regression.\r \r ##### ACTUAL RESULTS\r <!--- Describe what actually happened. If possible run with extra verbosity (-vvvv) -->\r Performance regression.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM0", "speaker": "ansibot", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2020-04-08T07:53:18Z", "text": "Files identified in the description:\n* [`lib/ansible/modules/files/template.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/files/template.py)\n* [`lib/ansible/plugins/action/template.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/action/template.py)\n* [`lib/ansible/plugins/lookup/template.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/lookup/template.py)\n* [`lib/ansible/template/__init__.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/__init__.py)\n* [`lib/ansible/template/native_helpers.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/native_helpers.py)\n* [`lib/ansible/template/safe_eval.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/safe_eval.py)\n* [`lib/ansible/template/template.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/template.py)\n* [`lib/ansible/template/vars.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/vars.py)\n\nIf these files are incorrect, please update the `component name` section of the description or use the `!component` bot command.\n\n[click here for bot help](https://github.com/ansible/ansibullbot/blob/master/ISSUE_HELP.md)\n<!--- boilerplate: components_banner --->", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2020-04-09T18:20:28Z", "text": "After reviewing the change, we believe this to be a correct change. However, since you are seeing a performance degradation, I'm going to assume that you have some variable assigned to a `lookup`, that is being repeatedly re-evaluated now.\r\n\r\nCan you confirm whether this is the case, and how that variable is being used in these templates?\r\n\r\nIn order to more effectively help you, we ultimately need a reproducer that we can run that replicates the behavior you describe.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2020-04-09T19:01:09Z", "text": "needs_info", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "kenyon", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2020-04-10T07:14:06Z", "text": "I'm only using `lookup` as in `somevar: '{{ lookup(\"vars\", ...) }}'`, and only in two places out of thousands of lines, and the performance is degraded even when templating files that don't include those `lookup` calls, so those aren't the problem (not sure if that's what you meant by \"some variable assigned to a `lookup`\").\r\n\r\nI'll try to come up with a minimal reproducer soon.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "Oloremo", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2020-04-17T13:04:20Z", "text": "We use a lot of lookup in variables too and observing a 26% performance degradation in our case on 2.9.6+", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM5", "speaker": "kenyon", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2020-04-19T23:57:19Z", "text": "Well I'm having trouble making a reproducer for this. Unfortunately I can't easily attempt to reproduce this on the same hardware where I first experienced the problem because my company network heavily restricts Internet access from my development environment. So I've been trying to reproduce on my home computer, but am only getting essentially identical results between 2.9.5 and 2.9.6. One difference between my work and home environments is that the work env has $HOME mounted over NFS, so I wonder if that has something to do with it. Otherwise, I'm not sure.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "timflannagan", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2020-05-01T15:57:47Z", "text": "I can also confirm that I'm seeing this templating caching change have pretty significant performance degradation issues. Before 2.9.6, role execution took anywhere from 3-7 minutes, and when we bump the Ansible minor version to 2.9.6+, it typically takes 45+ minutes to deploy all of our resources and this is always reproducible. When I deploy with more verbose logs, I can see that a task given a [jinja2 expression](https://github.com/kube-reporting/metering-operator/blob/master/images/metering-ansible-operator/roles/meteringconfig/tasks/configure_root_ca.yml#L13) makes a file lookup call many, many times:\r\n\r\n```yaml\r\nTASK [meteringconfig : Check if Root CA secret already exists] *****************\r\ntask path: /opt/ansible/roles/meteringconfig/tasks/configure_root_ca.yml:9\r\nFriday 01 May 2020  15:43:09 +0000 (0:00:00.054)       0:00:20.668 ************\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\nFile lookup using /opt/ansible/charts/openshift-metering/values.yaml as file\r\n\r\n...\r\n```\r\n\r\nIn comparison to 2.9.5, this file lookup call was made one or two times, and if I revert the change to `if cache and only_one`, I see the performance issues resolved.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM7", "speaker": "geerlingguy", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2020-05-01T16:32:33Z", "text": "> One difference between my work and home environments is that the work env has $HOME mounted over NFS, so I wonder if that has something to do with it.\r\n\r\n@kenyon - That would definitely have an impact, if something is doing a filesystem lookup X times, on NFS it might be a 20-30ms delay, whereas on a local SSD it's like 0.01ms... if it's running 100 lookups, that's an extra 3 seconds per task. I've run into similar issues when pulling data from EFS on AWS (not reproducible outside of that environment).", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM8", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2020-05-01T16:54:53Z", "text": "@timflannagan1 yes, so in your case, because templating is lazy evaluated, every time `meteringconfig_default_values` is used, it's re-evaluated.  The `only_one` var used in templating is described as:\r\n\r\n```\r\n                    # Check to see if the string we are trying to render is just referencing a single\r\n                    # var.\r\n```\r\n\r\nBecause `meteringconfig_default_values` has a value using `lookup` it is not just a single var.\r\n\r\nRight now, to improve performance, you would need to have a `set_fact` task towards the start of the role that \"finalizes\" the variable, so that the result is stored.\r\n\r\n```\r\n- set_fact:\r\n    meteringconfig_default_values: \"{{ meteringconfig_default_values }}\"\r\n```\r\n\r\nWe've been talking about someway to tell ansible to finalize a variable immediately on definition, like:\r\n\r\n```\r\nmeteringconfig_default_values: !finalize \"{{ lookup('file', meteringconfig_default_values_file) | from_yaml }}\"\r\n```\r\n\r\nBut that feature does not exist yet.\r\n\r\nAnother potential future feature, is a way to instruct `lookup` to cache the value.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "Oloremo", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2020-05-01T17:44:38Z", "text": "I'm puzzled why this caching was removed without an optional fallback. lookup() could have dynamic data! Ok, mine don't. Could we have an optional and disabled by default argument \"enable lookup cache\"?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2020-05-01T17:56:35Z", "text": "@Oloremo We fixed valid bugs by making this change.  The change in question is a correct change. However, it exposes that some people were relying on buggy behavior, without realizing it.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "Oloremo", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2020-05-01T18:07:24Z", "text": "It's a correct change in 90% of the cases, I agree. Yet there is cases where lookups work with static data and adding an argument to the lookup function would solve 100% of cases.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "thaumos", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2020-05-01T18:22:10Z", "text": "I think what @sivel is saying that while we fixed buggy behaviour as a result, it's not as easy for us  to implement the expected caching behaviour as suggested or previously worked.  \r\n\r\nFor now, there is a work-around, using set_fact.  Let's use that for now.\r\n\r\nWe are going to introduce a feature in a future release, after 2.10, to re-implement the expected caching behaviour.  That behaviour being, to allow for performance improvement to exist, by having an explicit decision made by the content creator to do the caching.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM13", "speaker": "Oloremo", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2020-05-01T19:35:43Z", "text": "No chance to introduce it in 2.9? It seems like a single argument and an `if`.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM14", "speaker": "zem", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2020-05-13T21:01:38Z", "text": "+1 \r\n\r\nThe bug happens here too. Steps are taking up to 20 Minutes with 2.9.7 when they access a software version/location lookup structure that maps a current variable multiple times. \r\n\r\nFor now we have installed an older version (2.9.3) as workaround. \r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM15", "speaker": "sivel", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2020-05-13T21:08:43Z", "text": "As an update to this issue, we will not revert the fix, as the original bug has been reclassified as a CVE and documented at https://access.redhat.com/security/cve/CVE-2020-10729\r\n\r\nThe 2.9.x series will not see any resolution of this performance degradation, as it will require a new feature to implement. It is also unlikely that such a feature will make it into the 2.10 release.\r\n\r\nIn the meantime, as indicated above, I recommend using an intermediate `set_fact` task to \"finalize\" the value.  If you are experiencing this issue during template file generation due to looping, you can also take advantage of Jinja2 [assignments](https://jinja.palletsprojects.com/en/master/templates/#assignments) to create an intermediate cached variable.\r\n\r\nFor the time being I am locking this issue to further activity.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM16", "speaker": "ansibot", "conversation_id": "ROOT", "reply_to": "COM15", "timestamp": "2020-05-21T21:27:20Z", "text": "Files identified in the description:\n* [`lib/ansible/modules/template.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/template.py)\n* [`lib/ansible/plugins/action/template.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/action/template.py)\n* [`lib/ansible/plugins/lookup/template.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/lookup/template.py)\n* [`lib/ansible/template/__init__.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/__init__.py)\n* [`lib/ansible/template/native_helpers.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/native_helpers.py)\n* [`lib/ansible/template/safe_eval.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/safe_eval.py)\n* [`lib/ansible/template/template.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/template.py)\n* [`lib/ansible/template/vars.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/vars.py)\n\nIf these files are incorrect, please update the `component name` section of the description or use the `!component` bot command.\n\n[click here for bot help](https://github.com/ansible/ansibullbot/blob/master/ISSUE_HELP.md)\n<!--- boilerplate: components_banner --->", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM17", "speaker": "ansibot", "conversation_id": "ROOT", "reply_to": "COM16", "timestamp": "2020-08-25T22:53:37Z", "text": "Files identified in the description:\n* [`lib/ansible/template/__init__.py`](https://github.com/ansible/ansible/blob/devel/lib/ansible/template/__init__.py)\n\nIf these files are incorrect, please update the `component name` section of the description or use the `!component` bot command.\n\n[click here for bot help](https://github.com/ansible/ansibullbot/blob/master/ISSUE_HELP.md)\n<!--- boilerplate: components_banner --->", "meta": {"posReactions": "0", "negReactions": "0"}}
