{"id": "ROOT", "speaker": "mjscosta", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-04-21T20:39:58Z", "text": "##vso[task.prependpath] in linux always results in an extra quote added wiht the prepended path ## Required Information\r \r Entering this information will route you directly to the right team and expedite traction.\r \r **Question, Bug, or Feature?**  \r *Type*: Bug\r \r **Enter Task Name**: ##vso[task.prependpath]\r \r ## Environment\r - Server - Azure Pipelines or TFS on-premises?\r    Azure Pipelines\r     \r     - If using Azure Pipelines, provide the account name, team project name, build definition name/build number: these are private data in private builds not to be tracked publicly.\r \r - Agent - Hosted or Private:  Hosted\r     \r     - If using Hosted agent, provide agent queue name: Hosted Ubuntu 1604\r \r ## Issue Description\r \r ### Test 1\r Using the following to set prepend the path results in an extra quote in the PATH\r ```\r   - script: \"echo '##vso[task.prependpath]$(Build.SourcesDirectory)/scripts1'\"\r   - script: 'echo \"PATH: ${PATH}\"'\r \r   - script: \"echo '##vso[task.prependpath]$(Build.SourcesDirectory)/scripts2'\"\r   - script: 'echo \"PATH: ${PATH}\"'\r ```\r output1:\r ```\r PATH: /home/vsts/work/1/s/scripts1:\"/home/vsts/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\"\r ```\r \r output2\r ```\r PATH: /home/vsts/work/1/s/scripts2:/home/vsts/work/1/s/scripts1:\"/home/vsts/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\"\r ```\r \r Expected result:\r ```\r PATH: /home/vsts/work/1/s/scripts2:/home/vsts/work/1/s/scripts1:/home/vsts/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\r ```\r \r This seems to be causing some paths on added not be used in the search", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM0", "speaker": "damccorm", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-11-20T18:48:39Z", "text": "Hey @mjscosta - this looks like it might be the same issue as https://github.com/microsoft/azure-pipelines-tasks/issues/10331\r\n\r\nCould you try running `set +x` at the start of your script? If that doesn't work, could you try queuing a build with system diagnostics turned on and sharing the output?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "HughDevlin", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2019-12-05T16:00:20Z", "text": "Yesterday i lost a day cleaning up a spurious trailing single quote. Today I put together a minor variation on your \"Set variables in scripts\" YAML example on your \"Variables\" concept page. I hope this suggests some simple test cases.\r\n\r\n```\r\ntrigger: none\r\n\r\npool:\r\n  vmImage: 'ubuntu-latest'\r\n\r\nsteps:\r\n- checkout: none\r\n- script: |\r\n    FOO=BAR\r\n    echo $FOO\r\n    echo \"##vso[task.setvariable variable=myvar]$FOO\"\r\n    set\r\n  displayName: 'Reproduce vso trailing single quote bug; call vso'\r\n- script: |\r\n    echo my pipeline variable is $(myvar)\r\n  displayName: 'Reproduce vso trailing single quote bug; echo variable'\r\n```\r\n\r\nExpected: BAR\r\nActual: BAR'", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "damccorm", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2019-12-05T16:09:41Z", "text": "Hey @HughDevlin per my comment above, I think this is all probably related to #10331 - we're working on a better long term fix, but in the short term adding `set +x` should fix the problem.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "HughDevlin", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2019-12-05T17:07:37Z", "text": "No, adding `set +x` does not fix the problem, I'll test it if you won't:\r\n\r\n```\r\ntrigger: none\r\n\r\npool:\r\n  vmImage: 'ubuntu-latest'\r\n\r\nsteps:\r\n- checkout: none\r\n- script: |\r\n    set +x\r\n    FOO=BAR\r\n    echo $FOO\r\n    echo \"##vso[task.setvariable variable=myvar]$FOO\"\r\n    set\r\n  displayName: 'Reproduce vso trailing single quote bug; call vso'\r\n- script: |\r\n    echo my pipeline variable is $(myvar)\r\n  displayName: 'Reproduce vso trailing single quote bug; echo variable'\r\n```\r\nExpected: BAR\r\nActual: BAR'\r\n\r\nAlso, I note the potential duplicate you reference  #10331 is currently closed as no fault found which does not suggest a fix is in progress.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "HughDevlin", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2019-12-05T17:26:42Z", "text": "Please add ##vso[task.setvariable] to the description.Thanks.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "damccorm", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2019-12-05T17:28:14Z", "text": "> No, adding set +x does not fix the problem, I'll test it if you won't:\r\n\r\nOh, I see - this is the same type of root cause, but actually slightly different - sorry about that. Its actually the `set` command that is causing problems here which is why I didn't initially capture the issue.\r\n\r\nBash is setting the `$_` variable to the first arg of the previous command that was executed (see [here](https://unix.stackexchange.com/questions/280453/understand-the-meaning-of) for more info on this behavior). When you call `set`, that is getting written out to stdout. Since the previous command was a ## command, it writes out `_='##vso[task.setvariable variable=myvar]BAR'` - see [here](https://dev.azure.com/damccorm-repros/trailing-tick/_build/results?buildId=260&view=logs&j=12f1170f-54f2-53f3-20dd-22fc7dff55f9&t=f8ed7bd8-2a7f-56f6-9385-7fc29a8b5b7b&l=222) for a repro with diagnostics turned on that shows this behavior.\r\n\r\nSo this is actually the correct behavior here - I'd recommend wiping `$_` before running `set`, which I've confirmed works [here](https://dev.azure.com/damccorm-repros/trailing-tick/_build/results?buildId=262&view=logs&j=12f1170f-54f2-53f3-20dd-22fc7dff55f9)\r\n\r\n> Also, I note the potential duplicate you reference #10331 is currently closed as no fault found which does not suggest a fix is in progress.\r\n\r\nSure, probably should have been a little clearer here - right now, the system is working as designed. However, as you've seen here, this behavior is probably not desirable for all use cases. Since its not a bug, we're not going to change behavior here, but we are looking at a feature to workaround this by making some variables read only (so they can't get overwritten). You can see the spec for that feature here - https://github.com/microsoft/azure-pipelines-yaml/pull/396/files", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "damccorm", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2019-12-05T17:29:15Z", "text": "> Please add ##vso[task.setvariable] to the description.Thanks.\r\n\r\nI think its probably the same issue, I'd prefer to leave it to the issue author's discretion.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "HughDevlin", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2019-12-05T17:41:46Z", "text": "We agree, this behavior is not desirable.\r\nWe disagree, it is bug.\r\nAfter you implement a new category of variables, read-only variables, and ask customers to flag variables as read-only with a new parameter at variable creation, you will maintain the undesirable behavior for non-read-only variables, because it is a design feature?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "damccorm", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2019-12-05T18:18:01Z", "text": "_Updated the wording in my comment above for clarity_\r\n\r\nTo be clear, I think the behavior is undesirable for this use case, but in general it _is_ the behavior we want. The contract we have with the end user is essentially: any time you write something to stdout that matches our `##vso` commands, we'll process it. That includes when tools write something to stdout, or a command writes something to stdout. We have no way of differentiating between you trying to write something and the script accidentally writing something.\r\n\r\nIMO the only potentially questionable behavior here is that we don't require the `##vso` command to be at the start of a line. I see pros and cons on that one, but that's somewhat moot at this point because we wouldn't be able to change that without risking breaking a significant portion of customers. Even with that, its not a bug as much as a design question that you _could_ disagree with.\r\n\r\nDo you think that's fair?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "HughDevlin", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2019-12-05T18:43:06Z", "text": "> Bash is setting the $_ variable to the first arg of the previous command that was executed (see here for more info on this behavior). When you call set, that is getting written out to stdout. Since the previous command was a ## command, it writes out _='##vso[task.setvariable variable=myvar]BAR'\r\n\r\nSorry, I do not think that's fair.\r\n\r\nIf as you say setting $_ to an arbitrary value prior to invoking ##vso is a circumvention, it is very clear to me that ##vso is making an unjustified assumption about its execution environment, and that needs to be fixed, even if it is not an easy fix. Is that not clear to you?\r\n\r\nIf I invoke ##vso in a script, it behaves differently (undesirably) depending on the immediately previous command, and this is a design feature?\r\n\r\nIn other words, your demonstrated circumvention adding $_=blah before calling ##vso begs the question, well azure, maybe instead of asking customers to add this line to their scripts maybe ##vso should always do something similar under the covers? \r\n\r\nYour proposed feature enhancement leaves existing customers with non-read-only variables vulnerable to this undesirable behavior, bottom line ##vso setvariable without the readOnly=true flag are so undesirable as to be useless.\r\n\r\nFurther, it seems to me, that were the proposed feature enhancement implemented, and customers embraced the readOnly flag, that azure would occasionally issue warning messages \"attempt to update read only variable\" instead of occasionally tacking on a single quote, I guess MS could ask customers to add $_=blah before calling ##vso to suppress the warning message, but that hardly seems like progress to me.\r\n\r\nPlease add ##vso setvariable to the issue description so that other concerned parties, customer and MS, can more accurately recognize the scope of this issue and get more eyes on the proposed feature enhancement. Thank you.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "damccorm", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2019-12-05T19:07:30Z", "text": "I think I maybe haven't made the problem here clear, there seems to be a little bit of misunderstanding.\r\n\r\n>If as you say setting $_ to an arbitrary value prior to invoking ##vso is a circumvention, it is very clear to me that ##vso is making an unjustified assumption about its execution environment, and that needs to be fixed, even if it is not an easy fix. Is that not clear to you?\r\n> If I invoke ##vso in a script, it behaves differently (undesirably) depending on the immediately previous command, and this is a design feature?\r\n\r\nThe issue is not that `##vso` commands are dependent on the previous line - its actually that in Bash, `set` gives you different output dependent on the previous line (since it is very intentionally dependent on the environment). Since you have an environment variable `$_` now set to `_='##vso[task.setvariable variable=myvar]BAR'`, set prints that line which invokes the `##` command a second time. So what is happening here is:\r\n\r\n```\r\necho \"##vso[task.setvariable variable=myvar]$FOO\"\r\n// The variable has been set to BAR\r\nset\r\n// The variable now gets set to BAR'\r\n```\r\n\r\nThe `##` commands get masked from output which makes this a little challenging to see, but if you turn on diagnostics you can see that's what is happening. That's also why your case doesn't repro if you remove the `set` command.\r\n\r\n> In other words, your demonstrated circumvention adding $_=blah before calling ##vso begs the question, well azure, maybe instead of asking customers to add this line to their scripts maybe ##vso should always do something similar under the covers?\r\n\r\nThis is mostly addressed by what I said previously in this comment, but to be clear, you'd actually want the `$_=blah` before `set` since that's the problematic command. So it would look like:\r\n\r\n```\r\necho \"##vso[task.setvariable variable=myvar]$FOO\"\r\n$_=abc\r\nset\r\n```\r\n\r\nYou wouldn't need this if you were running a different command which doesn't print the environment.\r\n\r\nI would also kindly ask that we keep the conversation friendly and respectful. Please refer to our code of conduct: https://opensource.microsoft.com/codeofconduct/", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "HughDevlin", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2019-12-05T19:21:25Z", "text": "Dear friend,\r\n\r\nMay I respectfully advocate for intuitive behavior in our software, and may I respectfully suggest that if i need to turn on diagnostic tracing to understand how a bug is feature, perhaps it is a bug.\r\n\r\nMay i respectfully remind you and readers that the MS published idiom for ##vso usage is embedded in echo commands. Respectfully I do not agree that a fix is impossible. I think ##vso needs to be smarter.\r\n\r\nI think this issue and the proposed solution needs more eyes.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "damccorm", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2019-12-05T19:46:53Z", "text": "I'm going to ask again that we keep the conversation respectful going forward and work towards resolving the problem - otherwise I'll lock the thread to let the conversation cool off.\r\n\r\nAs far as the issue itself goes, I'd again reiterate that I think its working as intended, but we do have the read only feature coming to address use cases like yours. If you disagree, I'd appreciate clarification on how you believe the feature is working right now and how you believe it should work.\r\n\r\nFWIW, the relevant design is as follows:\r\n\r\nAny time a `##vso` command appears in stdout it is processed - regardless of where it appears in the output. If you set a variable twice, the second time you set it wins out. `##vso` commands are wiped from the output (though you can see that they were successfully processed in diagnostic mode).", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM13", "speaker": "HughDevlin", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2019-12-05T20:51:48Z", "text": "Dear friend, may I respectfully ask where is this documented? My sincere apologies if I missed something.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM14", "speaker": "damccorm", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2019-12-05T21:20:45Z", "text": "Our ## syntax is documented here - https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-in-script\r\n\r\nIf you think we need further documentation please raise an issue in the docs repo - [this link](https://github.com/MicrosoftDocs/vsts-docs/issues/new?title=&body=%0A%0A%5BEnter%20feedback%20here%5D%0A%0A%0A---%0A%23%23%23%23%20Document%20Details%0A%0A%E2%9A%A0%20*Do%20not%20edit%20this%20section.%20It%20is%20required%20for%20docs.microsoft.com%20%E2%9E%9F%20GitHub%20issue%20linking.*%0A%0A*%20ID%3A%20dd7e0bd3-1f7d-d7b6-cc72-5ef63c31b46a%0A*%20Version%20Independent%20ID%3A%20dae87abd-b73d-9120-bcdb-6097d4b40f2a%0A*%20Content%3A%20%5BVariables%20-%20Azure%20Pipelines%5D(https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fazure%2Fdevops%2Fpipelines%2Fprocess%2Fvariables%3Fview%3Dazure-devops%26tabs%3Dyaml%252Cbatch%23feedback)%0A*%20Content%20Source%3A%20%5Bdocs%2Fpipelines%2Fprocess%2Fvariables.md%5D(https%3A%2F%2Fgithub.com%2FMicrosoftDocs%2Fvsts-docs%2Fblob%2Fmaster%2Fdocs%2Fpipelines%2Fprocess%2Fvariables.md)%0A*%20Product%3A%20**devops**%0A*%20Technology%3A%20**devops-cicd**%0A*%20GitHub%20Login%3A%20%40juliakm%0A*%20Microsoft%20Alias%3A%20**jukullam**) should prepoluate it with the info needed to get it triaged/responded to fastest.\r\n\r\nI'm going to lock this thread since I think it has ceased being productive and respectful.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM15", "speaker": "damccorm", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2019-12-05T21:21:57Z", "text": "I'm also going to close since as it stands now this is still a no-op on our end.", "meta": {"posReactions": "0", "negReactions": "0"}}
