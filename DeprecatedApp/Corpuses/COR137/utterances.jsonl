{"id": "ROOT", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-07-05T08:46:40Z", "text": "SEA3D vs GLTF This is the current (july 2018) GLTF status.\r Test case: the same skinned mesh exported from 3DS Max 2018.\r Standard material: Diffuse + Specular + Normal\r \r 1) SEA3D exporter + SEA3D importer:\r http://necromanthus.com/Test/html5/Lara.html \r SEA file size: 658 KB\r Result: close to perfect\r \r 2) Babylon3D GLTF exporter + GLTF importer:\r http://necromanthus.com/Test/html5/Lara_gltf.html \r GLB file size: 1,850 KB\r Result: messed up materials\r \r I've also tested the FBX2GLTF utility (by Facebook): the same wrong results\r \r Important note: there is nothing wrong with THREE.js and PBR materials:\r http://necromanthus.com/Test/html5/Lara_PBR.html \r \r In any case, PBR was a bad choice for GLTF and also, all the current converters are collection of bugs.\r ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM0", "speaker": "Mugen87", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2018-07-05T12:37:30Z", "text": "I don't think this repo is the right place for this post. It's neither a feature request, nor a bug. So my question is: What are you trying to accomplish with this issue? Bashing `glTF`?\r\n\r\nIf you encounter problems with an exporter or converter, I suggest you open an issue at the respective github repo.\r\n\r\n> In any case, PBR was a bad choice for GLTF and also, all the current converters are collection of bugs.\r\n\r\nI generally reject such Trump-like statements. They have a provocative nature and are not objective at all.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM1", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2018-07-05T12:42:38Z", "text": "> I don't think this repo is the right place for this post.\r\n\r\nIt's the best place for sure and it shows the current GLTF status.\r\n\r\n> I generally reject such Trump-like statements.\r\n\r\nReally?\r\nHere is a statement from Trump: Google already failed with UTF8.\r\n\r\n> If you encounter problems with an exporter or converter, I suggest you open an issue at the respective github repo.\r\n\r\nMany of them blame THREE.js for bad GLTF results.\r\nThe posted samples prove they are wrong.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "looeee", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2018-07-05T14:31:57Z", "text": "@RemusMar are you suggesting any particular actions we should take? If not I vote to close this issue.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2018-07-05T14:41:18Z", "text": "> RemusMar are you suggesting any particular actions we should take?\r\n\r\nThree possible causes for the wrong GLTF results:\r\n1. the Babylon3D exporter is buggy (they say it's not)\r\n2. the FBX2GLTF converter is buggy (they say it's not)\r\n3. the GLTF importer is buggy.\r\n\r\nBut you and Mugen87 want to close the topic because there is no issue and everytbody is happy ...", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "looeee", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2018-07-05T14:51:12Z", "text": "> the GLTF importer is buggy\r\n\r\nYou mean the GLTFLoader? Can you identify what the bug is? It would be especially helpful if you can find a very simple model that demonstrates the bug.\r\n\r\n>  (they say it's not)\r\n\r\nIf you've made bug reports on the Babylon3D exporter and FBX2GLTF can you link to them here?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2018-07-05T14:59:04Z", "text": "> You mean the GLTFLoader? \r\n\r\nYes.\r\nImporter = Loader + Parser\r\n\r\n> It would be especially helpful if you can find a very simple model that demonstrates the bug.\r\n\r\nYou have everything you need to study the issue.\r\nAny PHONG material (Diffuse + Specular + Normal) exported or converted to GLTF gives wrong results.\r\np.s.\r\nPHONG represents 50-60% of the current samples, compared to Physical less than 1%.\r\nThat's why I said that PBR was a bad choice for GLTF.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM6", "speaker": "looeee", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2018-07-05T15:08:13Z", "text": "> You have everything you need to study the issue\r\n\r\nIn other words you want someone else to do the work for you \ud83d\ude44\r\n\r\nRegarding Phong materials and glTF, I agree that this makes glTF a bad choice for converting older models - especially models originally exported as FBX which only supports Phong or Lambert shading.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2018-07-05T15:09:50Z", "text": "> n other words you want someone else to do the work for you\r\n\r\nI don't have enough spare time for \"GitHub activities\".\r\nYou got the report and the working samples.\r\nThat's all for now.\r\ncheers", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "looeee", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2018-07-05T15:20:58Z", "text": "In that case, I still don't consider this to be a complete or actionable bug report and I continue to vote to close this issue.", "meta": {"posReactions": "3", "negReactions": "1"}}
{"id": "COM9", "speaker": "mrdoob", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2018-07-06T03:06:29Z", "text": "Hey @RemusMar,\r\n\r\nThanks for reporting this. Some notes...\r\n\r\n**File size**\r\nI'm not sure where you're getting these numbers, this is what I see:\r\n\r\n```\r\nLara.sea: 1,032,525 bytes \r\nLara.glb: 1,850,164 bytes\r\n\r\nLara.sea.gz: 1,031,840 bytes\r\nLara.glb.gz: 919,712 bytes \r\n```\r\n\r\n**Materials**\r\nYour model uses `Diffuse + Specular`. Unfortunately, seems like the specular texture is not being exported. GLTF supports 2 PBR modes: `Metalness + Roughness` and `Specular + Glossiness`. You want to export your model using the second mode. `GLTFLoader` supports both but maybe the Babylon.js doesn't have an option to export in that mode? In that case you may want to do a feature request on their project.\r\n\r\nLet us know what you find out.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2018-07-06T06:56:27Z", "text": "Hi Ricardo,\r\n\r\n1. File size.\r\nIf you download the files (with Firefox) you'll get:\r\nLara.sea: 658,901 bytes\r\nLara.glb: 1,850,964 bytes\r\nEven more: the GLB file does not even contain the equivalent (Metalness) of the Specular texture !\r\n\r\n2) Materials\r\nAs I said before, the original MAX  and FBX files contain a standard PHONG material:\r\nDiffuse + Specular + Normal \r\nNone of the current GLTF exporters and converters is able to generate a correct Physical material.\r\nPHONG is way more popular than Physical.\r\n\r\np.s.\r\nI'm not interested in the GLTF format (SEA3D is better from any point of view).\r\nI just want to help other poeple.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2018-07-06T10:11:28Z", "text": "Another userful sample:\r\nHere is a NATIVE Physical material in 3DS Max 2018 exported to GLTF with Babylon3D exporter:\r\nhttp://necromanthus.com/Test/html5/Lara_gltf_physical.html \r\nNow the metalness is present, but the result is still wrong:\r\n- it looks emissive (but it's not)\r\n- it has a red color bump\r\n\r\nHowever, this GLB file looks better (compared to THREE) in the Babylon sandbox ( https://sandbox.babylonjs.com ).\r\nAgain, this is how the Physical material should look in THREE:\r\nhttp://necromanthus.com/Test/html5/Lara_PBR.html \r\n\r\nSo let's forget now about PHONG and buggy exporters and converters.\r\nWe should investigate why the GLB file looks better in the Babylon sandbox.\r\nBuggy GLTF Loader in THREE ?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM12", "speaker": "pailhead", "conversation_id": "ROOT", "reply_to": "COM11", "timestamp": "2018-07-06T19:30:26Z", "text": "If one could quickly prototype some hacks over the existing phong / standard implementations i bet it would be pretty useful \ud83d\ude09 \r\n\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM13", "speaker": "mrdoob", "conversation_id": "ROOT", "reply_to": "COM12", "timestamp": "2018-07-08T10:53:47Z", "text": "@RemusMar Seems like the glb includes a `AmbientLight`.\r\n\r\n<img width=\"766\" alt=\"screen shot 2018-07-08 at 7 44 30 pm\" src=\"https://user-images.githubusercontent.com/97088/42419015-7a49ede0-82e7-11e8-8067-ae27f0b0937a.png\">\r\n\r\nIf you set `visible` to `false` to the imported `AmbientLight` the character starts to look less red.\r\n\r\nThe last thing to do is setting `renderer.gammaOutput = true`. (Needed when using GLTF #12766)\r\n\r\n<img width=\"634\" alt=\"screen shot 2018-07-08 at 7 48 00 pm\" src=\"https://user-images.githubusercontent.com/97088/42419034-dca797b2-82e7-11e8-8548-e9f204aa7b54.png\">\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM14", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM13", "timestamp": "2018-07-08T12:46:45Z", "text": "> Seems like the glb includes a AmbientLight.\r\n\r\nGood catch Ricardo! :thumbsup: \r\n\r\n> If you set visible to false to the imported AmbientLight the character starts to look less red.\r\n\r\nSomething better (no wasted resources):\r\n```javascript \r\n\t\tgltf.scene.remove( gltf.scene.children[2] );\r\n```\r\n\r\n> The last thing to do is setting renderer.gammaOutput = true. (Needed when using GLTF #12766)\r\n\r\nThat indicates buggy GLTF Loader (and it has to be fixed).\r\nIf I use that for other loaders, I get wrong colors for the loaded models.\r\nJust think about this scenario: use various loaders for the same scene and one of them is GLTF.\r\nIt will mess up the entire scene!\r\n\r\nAnyway, after removing that ambient light and using this workaround, this is the result:\r\nhttp://necromanthus.com/Test/html5/Lara_gltf_physical.html \r\nMuch better compared to the initial GLTF one, but the material quality is far away from this one:\r\nhttp://necromanthus.com/Test/html5/Lara_PBR.html \r\nImpressive lighting response and great metalness for bra and bikini.\r\n\r\nAt this stage I won't use GLTF in any serious project.\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM15", "speaker": "mrdoob", "conversation_id": "ROOT", "reply_to": "COM14", "timestamp": "2018-07-08T14:56:45Z", "text": "Can you try adding a `envMap` cubemap to these examples too? PBR looks the best when a `envMap` is supplied.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM16", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM15", "timestamp": "2018-07-08T15:34:07Z", "text": "> Can you try adding a envMap cubemap to these examples too?\r\n> PBR looks the best when a envMap is supplied.\r\n\r\nI've added offline.\r\nOf course it looks better, but PHONG with Environment map still looks WAY better (in THREE).\r\nAlso, the envMap does not fix the GLTF Loader issue(s).", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM17", "speaker": "mrdoob", "conversation_id": "ROOT", "reply_to": "COM16", "timestamp": "2018-07-08T16:57:42Z", "text": "> I've added offline.\r\n\r\nCould you update the online samples?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM18", "speaker": "donmccurdy", "conversation_id": "ROOT", "reply_to": "COM17", "timestamp": "2018-07-09T02:43:59Z", "text": "The glTF format supports PBR and unlit shaders at this time. Whether the BabylonJS and FBX2GLTF tools do the Phong-to-PBR conversion in a way that preserves Phong specular maps, I don't know \u2014 that would be a question for the repos of those tools. If you are trying to preserve the exact appearance of models using classic Phong shaders, you may have an easier time with other formats.\r\n\r\n> > The last thing to do is setting renderer.gammaOutput = true.\r\n> \r\n> That indicates buggy GLTF Loader (and it has to be fixed).\r\n\r\nThis is a deliberate decision and not a bug. Base color and emissive textures in glTF (and, typically, diffuse textures in any format...) are in sRGB colorspace. GLTFLoader marks them as such (`material.map.encoding = THREE.sRGBEncoding`), so that they're converted to linear colorspace for correct PBR lighting calculations. Finally colors should be converted back to sRGB (e.g. `renderer.gammaOutput=true`).\r\n\r\nIf you skip all of this, with any format, lighting calculations are incorrect. SEA3DLoader, FBXLoader, and ColladaLoader never touch the `.encoding` property of any texture, and leave it to the end user to change texture colorspace and renderer colorspace. I'm pretty confident that the large majority of three.js users are passing sRGB colors into three.js without converting, despite the fact that renderer lighting calculations assume linear colorspace, and getting results that are \"good enough\" but inconsistent with other engines and authoring environments. For correct results you should be using `renderer.gammaOutput=true`, and marking sRGB textures as sRGB.\r\n\r\nNone of these issue are specific to glTF (see https://github.com/mrdoob/three.js/issues/11337), but with GLTFLoader we're trying to achieve consistency with other engines and 3D authoring environments, and have chosen to treat all sRGB textures as sRGB for a first step. If you're mixing models from other formats in the scene, then yes it's awkward, and you'd need to either mark the diffuse textures of those formats as sRGB or mark the colorspace on the glTF models to linear (the latter is incorrect for all model formats involved, but may look good enough if you don't need precise colors).\r\n\r\n***\r\n\r\nIt does not seem like there is anything actionable here, unless there are specific issues we can report to the tools mentioned. @RemusMar if you are happy with your SEA3D workflow, that's great \u2014 I'm not interested in debating formats or persuading you to change from something that is already working well for you.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM19", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM18", "timestamp": "2018-07-09T06:46:25Z", "text": "> Could you update the online samples?\r\n\r\nRicardo,\r\nPHONG looks great with Diffuse + Specular only.\r\nPBR does not look great with BaseColor + MetallicRoughness only.\r\nThat's the main problem here.\r\nThe Normal/Bump and Environment textures are irrelevant at this point.\r\nOn top of that: more texture layers = bigger file size and performances drop\r\n\r\n> If you skip all of this, with any format, lighting calculations are incorrect. SEA3DLoader, FBXLoader, and ColladaLoader never touch the .encoding property of any texture\r\n\r\nThat was a wise decision.\r\n\r\n> I'm not interested in debating formats or persuading you to change from something that is already working well for you.\r\n\r\nDon,\r\nI'm not debating the \"PBR only\" bad choice for GLTF.\r\nThis topic shows GLTFLoader design flaws.\r\nWe don't reinvent the wheel here, so \"renderer.gammaOutput = true\" is not an option now, when GLTF represents less than 1% of the market.\r\ncheers", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM20", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM19", "timestamp": "2018-07-09T08:28:15Z", "text": "> Can you try adding a envMap cubemap to these examples too? PBR looks the best when a envMap is supplied.\r\n> Could you update the online samples?\r\n\r\nBecause you asked me to:\r\n\r\nSEA3D + Phong: http://necromanthus.com/Test/html5/Lara_envMap.html \r\nvs\r\nGLTF + PBR: http://necromanthus.com/Test/html5/Lara_gltf_envMap.html \r\n\r\nThe quality drop is obvious.\r\nAlso, in 3DS Max 2018 the Physical material looks WAY better than the GLTF result.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM21", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM20", "timestamp": "2018-07-09T12:25:36Z", "text": "> None of these issue are specific to glTF (see #11337), but with GLTFLoader we're trying to achieve consistency with other engines and 3D authoring environments,\r\n\r\nThat's completely wrong Don!\r\nHere we're talking about GLTFLoader and THREE.js\r\nThe users are interested in the best results with THREE.\r\nOther engines and 3D authoring environments are irrelevant here.\r\n\r\nAnd you still don't understand the main problem here.\r\nFor the last time:\r\n\r\n1) JSONLoader (or SEA3D loader) + PBR = GOOD results (close to Phong):\r\nhttp://necromanthus.com/Test/html5/Lara_PBR.html \r\n\r\n2) GLTFLoader + PBR = BAD results\r\nhttp://necromanthus.com/Test/html5/Lara_gltf_physical.html \r\n\r\np.s.\r\nIn the first sample you don't even need \"renderer.gammaOutput = true\" to get good results !!!", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM22", "speaker": "donmccurdy", "conversation_id": "ROOT", "reply_to": "COM21", "timestamp": "2018-07-09T15:11:57Z", "text": "\r\n> The users are interested in the best results with THREE. Other engines and 3D authoring environments are irrelevant here.\r\n\r\nBeing able to author a PBR model in Substance Painter or download one from Sketchfab, and have the model appear as the artist designed it, is good for three.js users. I don't think there's any definition of \"best result\" where that sort of consistency can be dismissed.\r\n\r\n> This topic shows GLTFLoader design flaws. We don't reinvent the wheel here, so \"renderer.gammaOutput = true\" is not an option now...\r\n\r\nThis isn't reinventing any wheels, and it isn't a design flaw. PBR calculations are done in linear space, with every engine I'm aware of. If you pass sRGB data into the renderer and pretend it's linear, the lighting and blending math will come out wrong. The difference is not huge, and so this not a major concern for many three.js users, but nevertheless it is not as good as it could be. For that reason, your \"good\" result example is not actually correct. But as you've said before, backward-compatibility is important, so I'm not here to advocate for changing any three.js defaults. But because glTF is a new format, and because we're trying to get PBR right, we're going to mark sRGB textures as sRGB, even if other loaders are not doing so.\r\n\r\nSee [this article about Unreal](http://artbyplunkett.com/Unreal/unrealgamma.html) \u2014 \r\n\r\n> ...textures that are used for color information should have the sRGB flag checked, and textures that are used for masks and numerical calculations in shaders and effects (like Normal maps) should have it unchecked. And if you follow this simple guideline you mostly get the best effect.\r\n\r\nThis is precisely what we are doing.", "meta": {"posReactions": "4", "negReactions": "1"}}
{"id": "COM23", "speaker": "looeee", "conversation_id": "ROOT", "reply_to": "COM22", "timestamp": "2018-07-09T18:39:25Z", "text": "> ...I'm pretty confident that the large majority of three.js users are passing sRGB colors into three.js without converting, despite the fact that renderer lighting calculations assume linear colorspace\r\n\r\nYou are talking about PBR materials with glTF, but I assume this is just as much a problem with a Phong material?\r\n\r\n> ...because glTF is a new format, and because we're trying to get PBR right, we're going to mark sRGB textures as sRGB, even if other loaders are not doing so.\r\n\r\n@donmccurdy should other loaders be doing so? It seems like this inconsistency between loaders is a point of confusion for users, and it would make sense for all of them to treat sRGB textures the same way if possible. ", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM24", "speaker": "donmccurdy", "conversation_id": "ROOT", "reply_to": "COM23", "timestamp": "2018-07-09T19:16:30Z", "text": "> You are talking about PBR materials with glTF, but I assume this is just as much a problem with a Phong material?\r\n\r\nYes, the problem is the same for Phong materials or PBR materials loaded in any other format.\r\n\r\n> ...should other loaders be doing so? It seems like this inconsistency between loaders is a point of confusion for users, and it would make sense for all of them to treat sRGB textures the same way if possible.\r\n\r\nIf we had a time machine, yes, the other loaders should also be marking sRGB textures containing color data as sRGB. But making the change now would cause confusion and break backward-compatibility, and the `gammaOutput=true` setting needed to fix output is not intuitive \u2014 I don't think changing other loaders can be justified given those issues.\r\n\r\nLet's keep an eye on https://github.com/mrdoob/three.js/issues/11337. I hope the resolution there will make color workflows more intuitive. With that and NodeMaterial, there may be opportunities to fix some existing issues without breaking anyone's existing applications.", "meta": {"posReactions": "2", "negReactions": "1"}}
{"id": "COM25", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM24", "timestamp": "2018-07-10T06:40:10Z", "text": "> Being able to author a PBR model in Substance Painter or download one from Sketchfab,\r\n\r\nThey are irrelevant.\r\nI get much better results in 3DS Max and that tells me that the GLTFLoader and/or your PBR model are not properly implemented.\r\n\r\n> The difference is not huge, and so this not a major concern for many three.js users, but nevertheless it is not as good as it could be.\r\n\r\nYour girlfriend looks bad but you're happy because your boss told you that's normal.\r\nOMG ...\r\n\r\n> For that reason, your \"good\" result example is not actually correct.\r\n\r\nIn fact you should fix your \"correct\" example to look good.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM26", "speaker": "looeee", "conversation_id": "ROOT", "reply_to": "COM25", "timestamp": "2018-07-14T14:36:45Z", "text": "> If we had a time machine, yes, the other loaders should also be marking sRGB textures containing color data as sRGB.  \r\n\r\nYeah, it's unfortunate but I agree that it's not worth breaking backwards compatibility over this. \r\n\r\nHowever, as I've been working with larger FBX scenes consisting of multiple models, animated cameras and so on I've found myself wishing that the output of the loader was something more like GLTFLoader's output - that is, it should return an `fbx` object with properties:\r\n\r\n```\r\nfbx.animations; // Array<THREE.AnimationClip>\r\nfbx.models; // Array <THREE.Group, THREE.Mesh, THREE.SkinnedMesh>\r\nfbx.cameras; // Array<THREE.Camera>\r\nfbx.asset; // Object\r\n```\r\n\r\nThere may be other loaders that would benefit from a similar change.  We should add this to the backburner (and certainly wait on #11337), but if any loaders do have breaking changes made for whatever reason, then we can use that as opportunity to apply this change as well. \r\n\r\nPerhaps we should open a new issue to keep track of this? ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM27", "speaker": "Mugen87", "conversation_id": "ROOT", "reply_to": "COM26", "timestamp": "2018-07-14T15:05:50Z", "text": "> Perhaps we should open a new issue to keep track of this?\r\n\r\nPlease do. That's better than resume the conversation in this closed thread.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM28", "speaker": "RemusMar", "conversation_id": "ROOT", "reply_to": "COM27", "timestamp": "2018-07-20T09:58:03Z", "text": "Just removed the FORCED sRGB encoding in the GLTFLoader.\r\n```javascript\r\n//\t\t\tif ( material.map ) material.map.encoding = THREE.sRGBEncoding;\r\n//\t\t\tif ( material.emissiveMap ) material.emissiveMap.encoding = THREE.sRGBEncoding;\r\n//\t\t\tif ( material.specularMap ) material.specularMap.encoding = THREE.sRGBEncoding;\r\n```\r\n\r\nThe result is better from any point of view:\r\n- better lighting and material quality\r\n- no need of \"renderer.gammaOutput = true\" anymore (a bad idea anyway)\r\n- now you can use the GLTFLoader with other loaders for the same scene (renderer)\r\n\r\nSEA3D + Phong: http://necromanthus.com/Test/html5/Lara_envMap.html\r\nvs\r\nGLTF + PBR: http://necromanthus.com/Test/html5/Lara_gltf_envMap.html\r\n", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM29", "speaker": "donmccurdy", "conversation_id": "ROOT", "reply_to": "COM28", "timestamp": "2018-07-20T17:07:02Z", "text": "I've addressed each of those points in https://github.com/mrdoob/three.js/issues/14419#issuecomment-403513554 \u2014 we will not be removing the sRGB encoding assignment to sRGB textures in GLTFLoader. If you would like to override that, it is easy to change the texture encoding after loading the model.\r\n\r\nIf there are no other actions to take here, this issue should be closed.", "meta": {"posReactions": "1", "negReactions": "1"}}
