{"id": "ROOT", "speaker": "mnn", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-10-29T08:51:43Z", "text": "Some parameter names of function lead to shader compilation errors **Godot version:** 3.1.1\r \r **OS/device including version:** Linux (Manjaro 18.1.2)\r \r **Issue description:**\r White rectangle is drawn (outside of image) when shader uses specific argument names in function.\r \r **Steps to reproduce:**\r Create 2D sprite and attach shader:\r ```glsl\r shader_type canvas_item;\r \r vec4 f(sampler2D TEXTURE, vec2 UV, float TIME) {\r \tvec4 tx = texture(TEXTURE, UV);\r \treturn tx;\r }\r \r void fragment() {\r \tCOLOR = f(TEXTURE, UV, TIME);\r }\r ```\r \r Looking at the compiled shader, I thought maybe `TEXTURE` and `UV` are magically accessible in functions.\r \r ```glsl\r vec4 g() {\r \tvec4 tx = texture(TEXTURE, UV);\r \treturn tx;\r }\r ```\r \r They are not: `Unknown identifier in expression: TEXTURE`.\r \r It's interesting that passing `TIME` works fine, but not the others mentioned above.\r \r <!--**Minimal reproduction project:**-->\r ", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM0", "speaker": "Chaosus", "conversation_id": "ROOT", "reply_to": "ROOT", "timestamp": "2019-10-29T09:21:28Z", "text": "Duplicate of #32978", "meta": {"posReactions": "1", "negReactions": "1"}}
{"id": "COM1", "speaker": "mnn", "conversation_id": "ROOT", "reply_to": "COM0", "timestamp": "2019-10-29T09:39:17Z", "text": "That \"duplicate\" doesn't mention shader being **broken**, only that it is possible to pass `TIME` and `UV` (btw `UV` doesn't work for me). From my testing it is clear `TEXTURE`, if named same, cannot be passed without second compiler (glsl?) crashing.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM2", "speaker": "Chaosus", "conversation_id": "ROOT", "reply_to": "COM1", "timestamp": "2019-10-29T09:51:27Z", "text": "It looking like the same issue, and happens for the same reason - comparsion with pre-existed shader variables for the function parameters does not exist.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM3", "speaker": "mnn", "conversation_id": "ROOT", "reply_to": "COM2", "timestamp": "2019-10-29T09:57:54Z", "text": "> It looking like the same issue, and happens for the same reason\r\n\r\nMaybe same reason, but the result is different and expected behaviour as well.\r\n\r\n> comparsion with pre-existed shader variables for the function parameters does not exist\r\n\r\nNot true (if I understand you correctly), `g` function clearly demonstrates the `TEXTURE` does not exist. And `f` is fed a valid variable from `fragment` function (unlike the \"duplicate\" issue), yet the shader **fails** to compile (also unlike the \"duplicate\" issue).\r\n\r\nKinda glad I will be leaving Godot, this \"duplicate\" labeling feels as lazy as on stackoverflow...", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM4", "speaker": "Chaosus", "conversation_id": "ROOT", "reply_to": "COM3", "timestamp": "2019-10-29T10:03:00Z", "text": "You could add these descriptions to the original \"duplicate\" issue and this is fine. I'm very sorry if this will cause you to leave Godot.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM5", "speaker": "akien-mga", "conversation_id": "ROOT", "reply_to": "COM4", "timestamp": "2019-10-29T10:10:51Z", "text": "It *is* the same bug as #32978, I don't see why you're being so annoyed about it being closed as a duplicate.\r\n\r\nUse this code, it works fine:\r\n```\r\nshader_type canvas_item;\r\n\r\nvec4 f(sampler2D p_TEXTURE, vec2 p_UV, float p_TIME) {\r\n\tvec4 tx = texture(p_TEXTURE, p_UV);\r\n\treturn tx;\r\n}\r\n\r\nvoid fragment() {\r\n\tCOLOR = f(TEXTURE, UV, TIME);\r\n}\r\n```\r\n\r\nSo the issue *is* about the shader language allowing users to pass global, context-specific (`TEXTURE` is only available in `fragment()` for example) built-ins as argument names, and the shadowing doesn't work as it should. Most likely, the magic performed by Godot to replace built-in by their actual value also replaces it in the function where they have been declared as arguments. In your case, this function is outside `fragment()` and used `TEXTURE` which is fragment-only, so it breaks. Same bug, just different manifestation.\r\n\r\n> Kinda glad I will be leaving Godot, this \"duplicate\" labeling feels as lazy as on stackoverflow...\r\n\r\nThat's petty, but well. We have enough work not to have to keep duplicate issues open for entitled users.", "meta": {"posReactions": "1", "negReactions": "0"}}
{"id": "COM6", "speaker": "mnn", "conversation_id": "ROOT", "reply_to": "COM5", "timestamp": "2019-10-29T10:11:58Z", "text": "> I'm very sorry if I cause you to leave Godot.\r\n\r\nYou did not, simply my next project will be 3D and Godot is not yet there (I am hoping it will be).\r\n\r\n> You could add these descriptions to the original \"duplicate\" issue and this is fine\r\n\r\nBut, that bug is from an engine user perspecity entirely different:\r\n\r\nthis: crashes shader compilation results in white square\r\n\"duplicate\": magically works, even though it should'n\r\n\r\nthis: `TEXTURE` and `UV` doesn't work\r\n\"duplicate\": `UV` and `TIME` work, even though it shoudl'n\r\n\r\nthis: 2D\r\n\"duplicate\": 3D\r\n\r\nthis: I **am** passing correct values, yet compilation fails and result is broken sprite.\r\n\"duplicate\": passes incorrect values (constants), yet they are being replaced in a function by dynamic values of shader variables\r\n\r\nDo I need to continue? I don't understand how this can be a duplicate when result is different, variables are different (`TEXTURE`, `TIME`) or working differently (`UV`).", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM7", "speaker": "akien-mga", "conversation_id": "ROOT", "reply_to": "COM6", "timestamp": "2019-10-29T10:14:47Z", "text": ">  \"duplicate\": magically works, even though it should'n\r\n\r\nIt does not work, read the code. If it worked the material would be plain white (`vec3(1.0, 1.0, 1) * sin(0.0)`).", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM8", "speaker": "mnn", "conversation_id": "ROOT", "reply_to": "COM7", "timestamp": "2019-10-29T10:15:08Z", "text": "> That's petty, but well.\r\n\r\nMaybe, but factually correct.\r\n\r\n> We have enough work not to have to keep duplicate issues open for entitled users.\r\n\r\nI took the time to compile a bug report, only to be closed instantly as a duplicate when nothing in \"duplicate\" is same as in my bug report?", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM9", "speaker": "akien-mga", "conversation_id": "ROOT", "reply_to": "COM8", "timestamp": "2019-10-29T10:18:48Z", "text": "At some point you have to trust engine contributors to know what bugs are. You see symptoms, we see the underlying cause for them, and we tell you that these are both symptoms of the exact same bug.\r\n\r\nA duplicate bug report is not a bad thing, it just confirms the bug with possibly slightly different steps to reproduce. It's pointless to keep two or 50 issues open about the same bug, so we close duplicates, usually keeping the oldest one open.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM10", "speaker": "mnn", "conversation_id": "ROOT", "reply_to": "COM9", "timestamp": "2019-10-29T10:18:52Z", "text": "> It does not work, read the code. If it worked the material would be plain white (vec3(1.0, 1.0, 1) * sin(0.0)).\r\n\r\nI mean it compiles and runs, at least that what title suggests: \"Strange syntax is **allowed** to pass global parameters to the shader function\". It \"works\" as in the functions gets `TIME` from context of a `fragment` (not passed argument in call) which doesn't happen in my case - it crashes during compilation because probably renaming fails.", "meta": {"posReactions": "0", "negReactions": "0"}}
{"id": "COM11", "speaker": "akien-mga", "conversation_id": "ROOT", "reply_to": "COM10", "timestamp": "2019-10-29T10:20:14Z", "text": "Here, renamed, be happy.", "meta": {"posReactions": "0", "negReactions": "0"}}
