[
    {
        "author_association": "MEMBER",
        "body": "Alright, I've claimed this issue for the text buffer updates.",
        "created_at": "2021-01-12T03:29:53Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-758371554",
        "id": 758371554,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODM3MTU1NA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 2,
            "laugh": 0,
            "rocket": 0,
            "total_count": 2,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/758371554/reactions"
        },
        "updated_at": "2021-01-12T03:29:53Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/758371554",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "NONE",
        "body": "> Representative complicated case (huge character)\n\nTAB characters in <https://github.com/microsoft/terminal/issues/7810> could also be stored this way.",
        "created_at": "2021-01-12T05:26:07Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-758411490",
        "id": 758411490,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODQxMTQ5MA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 2,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 2,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/758411490/reactions"
        },
        "updated_at": "2021-01-12T05:26:07Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/758411490",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/46201428?v=4",
            "events_url": "https://api.github.com/users/KalleOlaviNiemitalo/events{/privacy}",
            "followers_url": "https://api.github.com/users/KalleOlaviNiemitalo/followers",
            "following_url": "https://api.github.com/users/KalleOlaviNiemitalo/following{/other_user}",
            "gists_url": "https://api.github.com/users/KalleOlaviNiemitalo/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/KalleOlaviNiemitalo",
            "id": 46201428,
            "login": "KalleOlaviNiemitalo",
            "node_id": "MDQ6VXNlcjQ2MjAxNDI4",
            "organizations_url": "https://api.github.com/users/KalleOlaviNiemitalo/orgs",
            "received_events_url": "https://api.github.com/users/KalleOlaviNiemitalo/received_events",
            "repos_url": "https://api.github.com/users/KalleOlaviNiemitalo/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/KalleOlaviNiemitalo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/KalleOlaviNiemitalo/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/KalleOlaviNiemitalo"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "@KalleOlaviNiemitalo Indeed! I'd thought about this when designing the new advances-based buffer, but I was a little worried about the implications. We don't have good coverage for what happens when the cursor moves into a column covered by a wide glyph, and I think nailing that down will be important for getting tab-in-buffer working.",
        "created_at": "2021-01-12T21:23:10Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-759016735",
        "id": 759016735,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTAxNjczNQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759016735/reactions"
        },
        "updated_at": "2021-01-12T21:23:10Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759016735",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "Actually, on second thought ... this isn't as bad as I'd expected. We already move into multi-cell glyphs, and we don't damage them properly when they're overstruck. We don't render the cursor with the correct width when we're inside such a glyph either...\r\n\r\nWhen the new damage and column-to-region mapping algorithms, this may be a breeze.",
        "created_at": "2021-01-12T21:30:12Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-759026924",
        "id": 759026924,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTAyNjkyNA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759026924/reactions"
        },
        "updated_at": "2021-01-12T21:30:12Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759026924",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "NONE",
        "body": "Will this rewrite support a TextBuffer >= 32767?  Currently ROW._id is a SHORT and TextBuffer size is a COORD, which is also composed of SHORTs.\r\n\r\nChanging TextBuffer COORD references to til::point mean a major rewrite of half the code, but it's needed if you want to support Infinite Scrollback (with files).",
        "created_at": "2021-01-13T00:27:03Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-759122461",
        "id": 759122461,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTEyMjQ2MQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759122461/reactions"
        },
        "updated_at": "2021-01-13T00:27:03Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759122461",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7663686?v=4",
            "events_url": "https://api.github.com/users/naikel/events{/privacy}",
            "followers_url": "https://api.github.com/users/naikel/followers",
            "following_url": "https://api.github.com/users/naikel/following{/other_user}",
            "gists_url": "https://api.github.com/users/naikel/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/naikel",
            "id": 7663686,
            "login": "naikel",
            "node_id": "MDQ6VXNlcjc2NjM2ODY=",
            "organizations_url": "https://api.github.com/users/naikel/orgs",
            "received_events_url": "https://api.github.com/users/naikel/received_events",
            "repos_url": "https://api.github.com/users/naikel/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/naikel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/naikel/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/naikel"
        }
    },
    {
        "author_association": "COLLABORATOR",
        "body": "@DHowett I don't think this is as simple as you think. Lets say you write out the string `ABCDEFGHIJ`, move the cursor back to column 3 (on the character `C`), and then output a `TAB`. This moves the cursor to column 9 (on the character `I`), but there's no visible change to the content. In what way does the buffer now change to reflect that `TAB`?\r\n\r\nThings like a zero-width-joiner are even more problematic. Let's say you write out a waving white flag (`U+1F3F3`), a space, and a rainbow (`U+1F308`), then go back and replace that space with a zero-width-joiner. The buffer sequence is now flag-zwj-rainbow, which Unicode defines as a rainbow flag. How would you alter the display to reflect those 3 characters collapsing into 1?\r\n\r\nAnd whatever you do has to be compatible with the way other terminal emulators behave, and more importantly, the way apps expect the terminals to behave, otherwise they just won't work correctly in Windows Terminal. I suspect some of the things you're envisioning here are simply not possible.\r\n",
        "created_at": "2021-01-13T00:36:56Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-759125609",
        "id": 759125609,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTEyNTYwOQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759125609/reactions"
        },
        "updated_at": "2021-01-13T00:36:56Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759125609",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
            "events_url": "https://api.github.com/users/j4james/events{/privacy}",
            "followers_url": "https://api.github.com/users/j4james/followers",
            "following_url": "https://api.github.com/users/j4james/following{/other_user}",
            "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/j4james",
            "id": 4181424,
            "login": "j4james",
            "node_id": "MDQ6VXNlcjQxODE0MjQ=",
            "organizations_url": "https://api.github.com/users/j4james/orgs",
            "received_events_url": "https://api.github.com/users/j4james/received_events",
            "repos_url": "https://api.github.com/users/j4james/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/j4james"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "@j4james I'm not terribly concerned about tab - it's an auxiliary consideration for this spec. If we wanted to replicate iTerm's behavior here, it could only replace up to the next `$TABSTOP` characters with a N-column `\\t` if the moved-over portion was otherwise stored as spaces.\r\n\r\nZWJ is another \"future consideration\". I'm hoping that this is more robust for now, rather than fully scalable for the future. N:M glyph mapping, inserting ZWJs, etc. is _more impossible_ with what we have than this specification.\r\n\r\nI wouldn't expect overstriking a non-joining space with a joining one to ever join adjacent columns once they're frozen in place in the text buffer. The behavior would, rather, be \"ZWJ only attaches characters if they are written consecutively, and a cursor move breaks a character-in-composition\" or \"ZWJ is zero-width and always attaches to the character stored in the prior column.\" Either of those would be _more possible_ than what we're working with today. It doesn't necessarily mean they're right, it just means that our horizon expands to better consider them.\r\n\r\nAll that, though, is not in scope right now. Incremental progress :smile: while retaining compatibility with what applications (using both the Win32 Console APIs and VT) do today are my goal.",
        "created_at": "2021-01-13T00:49:02Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-759129894",
        "id": 759129894,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTEyOTg5NA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759129894/reactions"
        },
        "updated_at": "2021-01-13T00:49:02Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759129894",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "@naikel breaking any dependency we have on COORD internally is a significant bonus.",
        "created_at": "2021-01-13T00:53:49Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-759131478",
        "id": 759131478,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTEzMTQ3OA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759131478/reactions"
        },
        "updated_at": "2021-01-13T00:53:49Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759131478",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "NONE",
        "body": "@DHowett I tried once to extend TextBuffer >= 32767 changing ROW._id from SHORT to size_t and TextBuffer COORD to til::point and after three days failed miserably.  I think it's easier to just code a whole new terminal from scratch.  \r\n\r\nEDIT: I really hope you can do this!",
        "created_at": "2021-01-13T00:55:28Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-759131988",
        "id": 759131988,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTEzMTk4OA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759131988/reactions"
        },
        "updated_at": "2021-01-13T01:07:37Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/759131988",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/7663686?v=4",
            "events_url": "https://api.github.com/users/naikel/events{/privacy}",
            "followers_url": "https://api.github.com/users/naikel/followers",
            "following_url": "https://api.github.com/users/naikel/following{/other_user}",
            "gists_url": "https://api.github.com/users/naikel/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/naikel",
            "id": 7663686,
            "login": "naikel",
            "node_id": "MDQ6VXNlcjc2NjM2ODY=",
            "organizations_url": "https://api.github.com/users/naikel/orgs",
            "received_events_url": "https://api.github.com/users/naikel/received_events",
            "repos_url": "https://api.github.com/users/naikel/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/naikel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/naikel/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/naikel"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "Thoughts for replacing the global function pointer that determines glyph width (which the Renderer uses to answer for ambiguous glyphs).\r\n\r\n```cpp\r\nstruct IMeasurer {\r\n    // Measures one codepoint, stored as UTF-16 code units\r\n    virtual CodepointWidth MeasureCodepoint(std::wstring_view) = 0;\r\n\r\n    // Measures multiple codepoints, stored as a string of UTF-16 code units.\r\n    // This function should (?) return 0-width code units for combining characters\r\n    // if and only if they would actually combine. Use Renzhi's new measuring algorithm here.\r\n\tvirtual std::vector<CodepointWidth> MeasureString(std::wstring_view) = 0;\r\n}\r\n```\r\n\r\n```cpp\r\nstruct UnicodeUCDMeasurer : public IMeasurer {\r\n    // implements it using raw compiled-in unicode UCD, never asks anyone else, totally static\r\n}\r\n```\r\n\r\n```cpp\r\nstruct RendererFallbackMeasurer : public IMeasurer {\r\n    IMeasurer* rootMeasurer;\r\n    RenderEngine* renderEngine;\r\n\r\n    // IFF rootMeasurer returns Ambiguous widths for any individual codepoints, ask the render engine\r\n    // This is only required for conhost, where we **must** maintain compatibility with \"font dictates display width\"\r\n}\r\n```",
        "created_at": "2021-01-29T04:32:24Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-769568037",
        "id": 769568037,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTU2ODAzNw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/769568037/reactions"
        },
        "updated_at": "2021-01-29T04:33:23Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/769568037",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "COLLABORATOR",
        "body": "> ```c++\r\n>     // This function should (?) return 0-width code units for combining characters\r\n>     // if and only if they would actually combine. Use Renzhi's new measuring algorithm here.\r\n> ```\r\n\r\nCan I ask what Renzhi's algorithm is? My concern is if it doesn't match the behaviour of the _wcwidth_ routines that Linux apps often use, then those apps are just not going to work correctly in WT, no matter how brilliantly we render zero-width joiners.\r\n\r\nAlso how does this relate to what is stored in the buffer? Is the intention to measure before deciding how something gets stored, or is the measuring to determine how the buffer is rendered? The reason I ask, is because if element N in the row buffer doesn't map to column N on the display, then some VT operations will also not work correctly.\r\n\r\nThis can even be a problem for client-side operations, like search and selection, although that at least is something we could maybe compensate for. And I know the DX renderer already has issues with the buffer to screen mapping, but I'd rather it didn't get worse.",
        "created_at": "2021-01-29T21:48:32Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-770068391",
        "id": 770068391,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDA2ODM5MQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/770068391/reactions"
        },
        "updated_at": "2021-01-29T21:48:32Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/770068391",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
            "events_url": "https://api.github.com/users/j4james/events{/privacy}",
            "followers_url": "https://api.github.com/users/j4james/followers",
            "following_url": "https://api.github.com/users/j4james/following{/other_user}",
            "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/j4james",
            "id": 4181424,
            "login": "j4james",
            "node_id": "MDQ6VXNlcjQxODE0MjQ=",
            "organizations_url": "https://api.github.com/users/j4james/orgs",
            "received_events_url": "https://api.github.com/users/j4james/received_events",
            "repos_url": "https://api.github.com/users/j4james/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/j4james"
        }
    },
    {
        "author_association": "COLLABORATOR",
        "body": "Renzhi is a MS employee like me who is moonlighting this project. He is an expert on font, Unicode and layout. He has been working with us internally to improve the overall Unicode support by providing an algorithm for general text width measurement.\n\n\u83b7\u53d6 Outlook for iOS<https://aka.ms/o0ukef>",
        "created_at": "2021-01-29T23:20:55Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-770101120",
        "id": 770101120,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDEwMTEyMA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/770101120/reactions"
        },
        "updated_at": "2021-01-29T23:20:57Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/770101120",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4710575?v=4",
            "events_url": "https://api.github.com/users/skyline75489/events{/privacy}",
            "followers_url": "https://api.github.com/users/skyline75489/followers",
            "following_url": "https://api.github.com/users/skyline75489/following{/other_user}",
            "gists_url": "https://api.github.com/users/skyline75489/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/skyline75489",
            "id": 4710575,
            "login": "skyline75489",
            "node_id": "MDQ6VXNlcjQ3MTA1NzU=",
            "organizations_url": "https://api.github.com/users/skyline75489/orgs",
            "received_events_url": "https://api.github.com/users/skyline75489/received_events",
            "repos_url": "https://api.github.com/users/skyline75489/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/skyline75489/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skyline75489/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/skyline75489"
        }
    },
    {
        "author_association": "COLLABORATOR",
        "body": "OK, thanks for info. As long as you guys are confident that this is going work out OK, feel free to ignore my questions - I don't need to know all the details. The main thing was I wanted to make sure you weren't overlooking something in the design that might later turn out to be a problem.",
        "created_at": "2021-01-29T23:26:09Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-770102687",
        "id": 770102687,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDEwMjY4Nw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/770102687/reactions"
        },
        "updated_at": "2021-01-29T23:26:09Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/770102687",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
            "events_url": "https://api.github.com/users/j4james/events{/privacy}",
            "followers_url": "https://api.github.com/users/j4james/followers",
            "following_url": "https://api.github.com/users/j4james/following{/other_user}",
            "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/j4james",
            "id": 4181424,
            "login": "j4james",
            "node_id": "MDQ6VXNlcjQxODE0MjQ=",
            "organizations_url": "https://api.github.com/users/j4james/orgs",
            "received_events_url": "https://api.github.com/users/j4james/received_events",
            "repos_url": "https://api.github.com/users/j4james/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/j4james"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "since we said his name 3 times: @reli-msft",
        "created_at": "2021-02-01T12:01:30Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-770805601",
        "id": 770805601,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDgwNTYwMQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/770805601/reactions"
        },
        "updated_at": "2021-02-01T16:41:44Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/770805601",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/18356694?v=4",
            "events_url": "https://api.github.com/users/zadjii-msft/events{/privacy}",
            "followers_url": "https://api.github.com/users/zadjii-msft/followers",
            "following_url": "https://api.github.com/users/zadjii-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/zadjii-msft/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/zadjii-msft",
            "id": 18356694,
            "login": "zadjii-msft",
            "node_id": "MDQ6VXNlcjE4MzU2Njk0",
            "organizations_url": "https://api.github.com/users/zadjii-msft/orgs",
            "received_events_url": "https://api.github.com/users/zadjii-msft/received_events",
            "repos_url": "https://api.github.com/users/zadjii-msft/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/zadjii-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zadjii-msft/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/zadjii-msft"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "@j4james I can try to sum up his core suggestion. Sorry -- this will be terse and mostly incorrect.\r\n\r\nUsing only primitive knowledge of codepoints (no font info), we can approximate the column count and combining behavior of any string of text. Renzhi proposes an algorithm (to be submitted for public standard review at a later date, and consideration by other terminal emulators much in the same way as Egmont's BiDi spec) and a reference implementation (which applications could eventually use for measuring) and an _optional font feature_ that a font author can use to enforce specific constraints (e.g. \"the Terminal Width 1 calculator would measure this to be 2 columns; applying font feature `tw01` will ensure that this _does_ measure two columns when rendered\"). The font stuff aside, though, the primitives are such that we'd store this in the buffer and maintain the invariants that preexisting applications (windows and VT) are expecting. :smile:\r\n\r\nIt also comes with some suggestions about an \"editing zone\"/\"active zone\", which dictates where the cursor is/how appending combining glyphs works/how destruction of multi-column glyphs works.\r\n\r\nMy primary intent is twofold:\r\n\r\n1. Refactor the buffer to make column counts more explicit, rather than imputing them based on \"is the character double-width and does it happen to be actually doubled in the backing store _and_ have we set the flags appropriately\"\r\n2. Have somewhere to store additional info (like cluster counts, bidi paragraph info, etc.)\r\n\r\nWe're in the always-weird situation where wcwidth is insufficient for things that are more than one wchar in code unit length, and wcswidth doesn't appear to have been holistically designed for this. Hoping that by offering a library _and_ a public spec that others could buy off on we can build some community energy around text layout.",
        "created_at": "2021-02-01T20:56:39Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-771152165",
        "id": 771152165,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE1MjE2NQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771152165/reactions"
        },
        "updated_at": "2021-02-01T20:56:39Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771152165",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "With the current test implementation, element N in the Row buffer _will not_ map to column N -- simply because we want to to support one code unit taking up two columns (`U+30AB KATAKANA LETTER KA`) and two code units taking up one column (`U+1F574 MAN IN BUSINESS SUIT LEVITATING`). Like the DirectWrite clustering algorithm, we need an aside table that lets us figure out what code unit range _covers_ a specific column (or column range). That's transparent, though. The interface for Row exposes `NewMagicGlyphAt` (name TBD), which will return the entire codepoint (all code units) in a specific column _and_ the original starting column & column extent in case the requested column was partway through a multi-column glyph.",
        "created_at": "2021-02-01T21:07:13Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-771158280",
        "id": 771158280,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE1ODI4MA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771158280/reactions"
        },
        "updated_at": "2021-02-01T21:07:13Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771158280",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "More typing, more e-mails for everyone.\r\n\r\nWe can easily keep the invariant that `Row::bufffer[N]` maps to column `N` in the DBCS case for `U+30AB` (simply double or triple the character), but I cannot see how we will keep the invariant for `U+1F574` (since it will always be two code units) unless we go to UTF-32, which will certainly double our memory usage in the common case.\r\n\r\nWe already don't _totally_ have that mapping today... the UnicodeStorage is _weird_ (it's a map keyed on row # + column #) and stores any codepoint that requires more than one code unit. I expect that it is very expensive in the uncommon case, and I have found to date three places were we don't actually manipulate it properly.\r\n\r\nStoring everything inline with a running advance counter seems much more . . . civil?",
        "created_at": "2021-02-01T21:13:15Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-771161914",
        "id": 771161914,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE2MTkxNA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771161914/reactions"
        },
        "updated_at": "2021-02-01T21:13:15Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771161914",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "NONE",
        "body": "@j4james I am expecting that, the measuring algorithm that I am working on, will return the same results as `wcwidth` if the string doesn't involve proper complex scripts (like Devanagari, or Emoji that used ZWJ).\r\n\r\nHowever when dealing proper complex scripts, that purposed algorithm will take the context into consideration and return more accurate results for them. For example, the purposed measuring algorithm will be able to handle Halants (Viramas), which is frequently used in Indic scripts that (in many cases) turn consonant letters around it into combining forms.",
        "created_at": "2021-02-01T21:28:27Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-771170850",
        "id": 771170850,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTE3MDg1MA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771170850/reactions"
        },
        "updated_at": "2021-02-01T21:28:27Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771170850",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/50213618?v=4",
            "events_url": "https://api.github.com/users/reli-msft/events{/privacy}",
            "followers_url": "https://api.github.com/users/reli-msft/followers",
            "following_url": "https://api.github.com/users/reli-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/reli-msft/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/reli-msft",
            "id": 50213618,
            "login": "reli-msft",
            "node_id": "MDQ6VXNlcjUwMjEzNjE4",
            "organizations_url": "https://api.github.com/users/reli-msft/orgs",
            "received_events_url": "https://api.github.com/users/reli-msft/received_events",
            "repos_url": "https://api.github.com/users/reli-msft/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/reli-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reli-msft/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/reli-msft"
        }
    },
    {
        "author_association": "COLLABORATOR",
        "body": "I understand why you want to do this, but if your proposed algorithm is going to break existing software (which I assume will be the case), then all I ask is that we make it opt-in via a private mode sequence. That way, apps that rely on existing terminal behavior will still work, and those that want to make use of the new improved measuring algorithm can still enable it explicitly.\r\n\r\nAlso, if you haven't already done so, I'd also encourage you to read up on some of the previous proposals for addressing wcwidth limitations, and the problems that arise from trying to make something like this work in a terminal emulator.",
        "created_at": "2021-02-01T23:56:25Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-771243715",
        "id": 771243715,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTI0MzcxNQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771243715/reactions"
        },
        "updated_at": "2021-02-01T23:56:25Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771243715",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
            "events_url": "https://api.github.com/users/j4james/events{/privacy}",
            "followers_url": "https://api.github.com/users/j4james/followers",
            "following_url": "https://api.github.com/users/j4james/following{/other_user}",
            "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/j4james",
            "id": 4181424,
            "login": "j4james",
            "node_id": "MDQ6VXNlcjQxODE0MjQ=",
            "organizations_url": "https://api.github.com/users/j4james/orgs",
            "received_events_url": "https://api.github.com/users/j4james/received_events",
            "repos_url": "https://api.github.com/users/j4james/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/j4james"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "> if your proposed algorithm is going to break existing software (which I assume will be the case) (JH)\r\n\r\n> maintain the invariants that preexisting applications (windows and VT) are expecting (DH)\r\n\r\n> ...will return the same results as `wcwidth` if the string doesn't involve proper complex scripts... (RL)\r\n\r\nI realize that this is caveated (third quote), but existing software that is aware of 1- or 2- column widths shouldn't see a change in behavior.\r\n\r\nLegitimate question though- are there conceivably applications that would be relying on terminal emulators to poorly compose combining characters in such a way that they would be broken if composition were fixed? Is bad composition the right thing to keep? I suspect applications just avoid it...\r\n\r\nI'd previously forwarded @reli-msft the discussions on the VT working group & gnome-terminal trackers about wcwidth and addressing its limitations. We're not working in a vacuum :smile:",
        "created_at": "2021-02-02T00:03:20Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-771246239",
        "id": 771246239,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTI0NjIzOQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771246239/reactions"
        },
        "updated_at": "2021-02-02T00:03:34Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771246239",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/189190?v=4",
            "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
            "followers_url": "https://api.github.com/users/DHowett/followers",
            "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
            "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/DHowett",
            "id": 189190,
            "login": "DHowett",
            "node_id": "MDQ6VXNlcjE4OTE5MA==",
            "organizations_url": "https://api.github.com/users/DHowett/orgs",
            "received_events_url": "https://api.github.com/users/DHowett/received_events",
            "repos_url": "https://api.github.com/users/DHowett/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/DHowett"
        }
    },
    {
        "author_association": "COLLABORATOR",
        "body": "> Legitimate question though- are there conceivably applications that would be relying on terminal emulators to poorly compose combining characters in such a way that they would be broken if composition were fixed?\r\n\r\nAny application that deals with generic text that it needs to wrap or clip to fit an area of the screen. Text editors, email clients, web browsers, irc/chat clients, multiplexers. If the text turns out to be longer than the app expected, that can potentially end up breaking the entire layout of the page.\r\n\r\nThen there are things like cursor positioning, highlighting of search terms, and link text. If the app expects a certain word to appear at a particular offset on the line, but it's actually somewhere else because our measurements aren't in sync, then they're going to be highlighting the wrong text, or placing the cursor in the wrong position.\r\n\r\nSo yeah, it's nice if you can get your combining characters to render perfectly, but not if that breaks everything else.",
        "created_at": "2021-02-02T00:44:22Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-771263836",
        "id": 771263836,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTI2MzgzNg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771263836/reactions"
        },
        "updated_at": "2021-02-02T00:44:22Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771263836",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
            "events_url": "https://api.github.com/users/j4james/events{/privacy}",
            "followers_url": "https://api.github.com/users/j4james/followers",
            "following_url": "https://api.github.com/users/j4james/following{/other_user}",
            "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/j4james",
            "id": 4181424,
            "login": "j4james",
            "node_id": "MDQ6VXNlcjQxODE0MjQ=",
            "organizations_url": "https://api.github.com/users/j4james/orgs",
            "received_events_url": "https://api.github.com/users/j4james/received_events",
            "repos_url": "https://api.github.com/users/j4james/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/j4james"
        }
    },
    {
        "author_association": "NONE",
        "body": "@j4james \r\n\r\nI am expecting that for LGC and CJK writing systems, most symbols and pictograms, alongside \"simple\" Emoji set, the purposed measurer (`TMe1`) will be compatible with `wcwidth`.\r\n\r\nFor the rest, like Devanagari or Telugu, their usage in CLI applications is very limited, and both terminals and CLI applications' current behavior around them is already severely broken. Therefore, it is not a big problem to create a better but non-compatible algorithm for these writing systems. There will also be a `termcap` for complex-script-awareness.\r\n\r\nIf **strict `wcwidth` compatibility** is really a strong need, the purposed complex script support architecture is also capable to introduce multiple measurers, so we could make either the old or new measurer opt-in.",
        "created_at": "2021-02-02T01:00:52Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-771270037",
        "id": 771270037,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTI3MDAzNw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771270037/reactions"
        },
        "updated_at": "2021-02-02T01:00:52Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/771270037",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/50213618?v=4",
            "events_url": "https://api.github.com/users/reli-msft/events{/privacy}",
            "followers_url": "https://api.github.com/users/reli-msft/followers",
            "following_url": "https://api.github.com/users/reli-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/reli-msft/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/reli-msft",
            "id": 50213618,
            "login": "reli-msft",
            "node_id": "MDQ6VXNlcjUwMjEzNjE4",
            "organizations_url": "https://api.github.com/users/reli-msft/orgs",
            "received_events_url": "https://api.github.com/users/reli-msft/received_events",
            "repos_url": "https://api.github.com/users/reli-msft/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/reli-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reli-msft/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/reli-msft"
        }
    },
    {
        "author_association": "COLLABORATOR",
        "body": "I\u2019d like to point out that the current TextBuffer implementation is also a huge blocker that stands in the way of high IO throughout & overall performance. The inability to batch read/write a large range of characters in the TextBuffer is disastrous in terms of IO throughput. \r\n\r\nIf the team decides to improve the ConPTY & WT performance and take it to the next level, this issue is likely the way to go. \r\n\r\nUpdate: An experimental PR #10702 to demonstrate the performance benefit of text-buffer rewrite. ",
        "created_at": "2021-07-16T11:13:18Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-881370482",
        "id": 881370482,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "IC_kwDOBfbO8M40iKVy",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/881370482/reactions"
        },
        "updated_at": "2021-07-23T09:16:58Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/881370482",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4710575?v=4",
            "events_url": "https://api.github.com/users/skyline75489/events{/privacy}",
            "followers_url": "https://api.github.com/users/skyline75489/followers",
            "following_url": "https://api.github.com/users/skyline75489/following{/other_user}",
            "gists_url": "https://api.github.com/users/skyline75489/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/skyline75489",
            "id": 4710575,
            "login": "skyline75489",
            "node_id": "MDQ6VXNlcjQ3MTA1NzU=",
            "organizations_url": "https://api.github.com/users/skyline75489/orgs",
            "received_events_url": "https://api.github.com/users/skyline75489/received_events",
            "repos_url": "https://api.github.com/users/skyline75489/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/skyline75489/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skyline75489/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/skyline75489"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "@DHowett Do you think this PowerShell [issue](https://github.com/PowerShell/PowerShell/issues/15912) is actually a Windows Terminal issue?  Note the console width is odd (125). The unknown char glyphs don't show up when the console width is even.\r\n\r\n![image](https://user-images.githubusercontent.com/5177512/131785495-c6fa2afc-cc7b-4d1a-abe7-a50d0388f9c9.png)\r\n\r\nWe can repro this with WSL/Bash in Windows Terminal (no PowerShell).  But we can't repro in other terms (iTerm) using PowerShell.",
        "created_at": "2021-09-02T05:09:09Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-911186490",
        "id": 911186490,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "IC_kwDOBfbO8M42T5o6",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/911186490/reactions"
        },
        "updated_at": "2021-09-02T15:27:28Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/911186490",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
            "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
            "followers_url": "https://api.github.com/users/rkeithhill/followers",
            "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
            "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rkeithhill",
            "id": 5177512,
            "login": "rkeithhill",
            "node_id": "MDQ6VXNlcjUxNzc1MTI=",
            "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
            "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
            "repos_url": "https://api.github.com/users/rkeithhill/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rkeithhill"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "Thinking about this issue some more, I realized that almost all of our remaining problems can be expressed with just a single goal in mind: The `IsGlyphFullWidth` function needs to be removed.\r\n\r\nOf course it has to remain in some places for the terminal to function (`TextBuffer` primarily), but in most places it needs to go. This is for two reasons:\r\n* The vast majority of code uses `bool IsGlyphFullWidth(wchar_t)` and not its `std::wstring_view` variant. In other words, they don't work with surrogate pairs, so introducing something as advanced as grapheme clusters isn't even remotely possible there.\r\n* The mere existence of a call to `IsGlyphFullWidth` alone is often indication enough that the code is trying to measure the size of strings in columns, even though the `TextBuffer` is supposed to be the sole central authority for this. It'd be untenable to introduce proper, complex column measurement in the 28 places that currently re-measure strings without considering the `TextBuffer`.\r\n\r\nAdditionally `OutputCellIterator` should be merged into `TextBuffer` and `ROW` and it's 3 calls to `IsGlyphFullWidth` be replaced, so that we can add grapheme cluster segmentation there, which can't be trivially represented using an iterator like `OutputCellIterator`.\r\n\r\nThis requires the following changes:\r\n* [ ] `Search::s_CreateNeedleFromString`\r\n  Has seemingly never been refactored to properly use the `TextBuffer` iterators.\r\n  \ud83d\udccb **Solution:** Requires a basic refactor to ask the text buffer for width information.\r\n* [ ] `TextBuffer::GetPatterns`\r\n  It uses `IsGlyphFullWidth` because the regex `prefix()` is a `wstring` and doesn't map back to `TextBuffer` row/column coordinates at all. That information was lost when this function concatenates all rows into a single string.\r\n  \ud83d\udccb **Solution:** Don't concatenate all rows into a single string. C++ regexes accept any iterators as long as they dereference to characters. Just create a simple row-iterator for this function. `prefix()` will then return this custom iterator wrapper which can be used to get back the exact buffer locations that were skipped.\r\n* [ ] `WriteCharsLegacy`\r\n  It filters control characters out of the incoming string and writes them into a local buffer on the stack. While doing so it measures how many columns the string is wide. It flushes the buffer to `TextBuffer` whenever it thinks the line has wrapped. Then `TextBuffer` implicitly remeasures the entire string again because no one recorded how many columns each individual character was wide, just the grand total.\r\n  \ud83d\udccb **Solution**: Just pass the entire text to the `ROW` the cursor is on and let it consume characters in bulk until it's full. Advance the cursor, then write into the next `ROW` and so on until all text has been consumed. That way only `ROW` needs to measure anything.\r\n* [ ] `CommandListPopup::_drawList`\r\n  Measures strings so that it doesn't draw text outside of the popup.\r\n  \ud83d\udccb **Solution:** introduce a column limit to the bulk text write API introduced for `WriteCharsLegacy`.\r\n* [ ] `ConsoleImeInfo::s_ConvertToCells`\r\n  Hundreds of lines to measure the size of the given input string to ensure it doesn't wrap a line/row, just like `WriteCharsLegacy`.\r\n  \ud83d\udccb **Solution:** Grab the `ROW`. Write the text. Done.\r\n* [ ] `_ConvertCellsToMungedW`\r\n  As per `ApiRoutines::WriteConsoleOutputWImpl`: \"For compatibility reasons, we must maintain the behavior that munges the data if we are writing while a raster font is enabled. This can be removed when raster font support is removed.\"\r\n  ~~**Solution:**~~ Don't touch.\r\n* [x] `InputBuffer::_ReadBuffer`\r\n  Requires adult supervision to understand. Probably incorrect code. `IsGlyphFullWidth` is only called if non-Unicode text handling is requested, which only happens through `DirectReadData::Notify`. Supposedly it's there so that if a non-Unicode client requests 4 events, that it emits 2 wide characters as DBCS instead of 4. But just like with `TranslateUnicodeToOem` this seems quite wrong (UAX#11 != OEM DBCS).\r\n  \ud83d\udccb **Solution:** Merge `SplitToOem` into `InputBuffer::_ReadBuffer`. Convert each individual character to OEM right there and see if it results in a DBCS or not. Don't use `IsGlyphFullWidth` for that. Most likely requires extensive refactoring, because this part of conhost is a \"big ball of mud\".\r\n* [x] `TranslateUnicodeToOem`\r\n  Bewildering code. Calls `WideCharToMultiByte` _for every individual character_. Uses `IsGlyphFullWidth` to decide whether to check for DBCS or not. One could argue that this is to ensure that narrow glyphs are translated to non-DBCS and wide glyphs to DBCS, but nope, it translates non-DBCS wide glyphs to non-DBCS.\r\n  Additionally, the width of a character as defined by UAX#11 in 2022 has nothing to do with whether a character was a DBCS sequence in the 90s.\r\n  \ud83d\udccb **Solution:** Call `WideCharToMultiByte` once for the entire UTF16 string. It's way faster, simpler and more correct.\r\n  * [x] `COOKED_READ_DATA::_handlePostCharInputLoop`\r\n    Horrifying. Contains 3 almost identical copies of the same `IsGlyphFullWidth` loop, but with subtle changes to it, just to figure out the right amount of memory to preallocate when calling `TranslateUnicodeToOem`. This leaks an implementation detail of `TranslateUnicodeToOem`, forcing callers to know how `TranslateUnicodeToOem` works internally and forcing `TranslateUnicodeToOem` to not break that API contract ever. `TranslateUnicodeToOem` can be easily refactored to know the exact amount it'll need.\r\n    \ud83d\udccb **Solution:** Just let `TranslateUnicodeToOem` figure out the right amount of memory.\r\n  * [x] `RAW_READ_DATA::Notify`\r\n    `_ReadPendingInput`\r\n    `_ReadCharacterInput`\r\n    Exact same thing as `COOKED_READ_DATA::_handlePostCharInputLoop`: Calls `IsGlyphFullWidth` just to figure out the right amount of memory to preallocate.\r\n    \ud83d\udccb **Solution:** Just let `TranslateUnicodeToOem` figure out the right amount of memory.\r\n* [ ] `InputBuffer::_CoalesceRepeatedKeyPressEvents`\r\n  This function updates the repeat count of the last input event if you keep holding a key. It does so only if the input key is not a wide character, which seems highly... inconsistent? Why are wide characters different from narrow ones in this regard? There's no documentation saying why this is necessary.\r\n  **Solution?** Not sure what to do here...\r\n* [ ] `CheckBisectStringW`\r\n  \"This routine check bisected on Unicode string end.\"\r\n  The meaning of \"bisect\" is not documented but it means \"a character doesn't fit into the last cell of a row\". The `cBytes` argument is a false hering and is actually used as a column count. The method then returns true if any wide wide character in the string (= 2 columns) doesn't fit into the remaining `cBytes` because only 1 column is left. This handling is basically entirely redundant with `WriteCharsLegacy`.\r\n  \ud83d\udccb **Solution:** Every single use of `CheckBisectStringW` in `commandline.cpp` is either redundant with `WriteCharsLegacy` already, or can be replaced easily with just some minimal helper functions added to `TextBuffer` and `ROW` to allow for retrieving the preceding/following valid cursor position.\r\n* [ ] `CheckBisectProcessW`\r\n  Does the same thing as `CheckBisectStringW`, but it \"processes\" control characters too, you see, hence the name.\r\n  \ud83d\udccb **Solution:** Same as `CheckBisectStringW`: Remove all usage with existing alternatives.\r\n* [ ] `RetrieveTotalNumberOfSpaces`\r\n  Does the exact same thing as `CheckBisectStringW` and `CheckBisectProcessW` and `WriteCharsLegacy` and `CommandListPopup::_drawList`, but with a twist! This one _returns_ the number of columns a string is long.\r\n  \ud83d\udccb **Solution:** Same as `CheckBisectStringW`: Remove all usage with existing alternatives.\r\n* [ ] `AdaptDispatch::FillRectangularArea`\r\n  Similar to `CommandListPopup::_drawList`: It only uses `IsGlyphFullWidth` because of `OutputCellIterator` and its `fillWidth` parameter, which is not in columns but rather in characters. This isn't just confusing/weird, but also forces callers to measure the width of the fill character, just so that the `fillWidth` parameter is in columns as expected.\r\n  \ud83d\udccb **Solution:** `rm -rf OutputCellIterator`.",
        "created_at": "2022-11-23T17:15:16Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-1325410702",
        "id": 1325410702,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "IC_kwDOBfbO8M5PACmO",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1325410702/reactions"
        },
        "updated_at": "2023-03-09T16:23:14Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1325410702",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2256941?v=4",
            "events_url": "https://api.github.com/users/lhecker/events{/privacy}",
            "followers_url": "https://api.github.com/users/lhecker/followers",
            "following_url": "https://api.github.com/users/lhecker/following{/other_user}",
            "gists_url": "https://api.github.com/users/lhecker/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/lhecker",
            "id": 2256941,
            "login": "lhecker",
            "node_id": "MDQ6VXNlcjIyNTY5NDE=",
            "organizations_url": "https://api.github.com/users/lhecker/orgs",
            "received_events_url": "https://api.github.com/users/lhecker/received_events",
            "repos_url": "https://api.github.com/users/lhecker/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/lhecker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lhecker/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/lhecker"
        }
    },
    {
        "author_association": "NONE",
        "body": "Since 2022 is close to an end, any timeline on this?\r\n\r\nhttps://github.com/microsoft/terminal/issues/1947 (issue that I am facing)+ https://github.com/microsoft/terminal/issues/1860 is making it almost impossible to use when SSHing into lot of devices/VMs.\r\n\r\nAnd this ticket seems to be a blocker for #1947's potential MR.",
        "created_at": "2022-12-11T23:33:43Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-1345689872",
        "id": 1345689872,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "IC_kwDOBfbO8M5QNZkQ",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 1,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 1,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1345689872/reactions"
        },
        "updated_at": "2022-12-11T23:47:05Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1345689872",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/11459028?v=4",
            "events_url": "https://api.github.com/users/Anutrix/events{/privacy}",
            "followers_url": "https://api.github.com/users/Anutrix/followers",
            "following_url": "https://api.github.com/users/Anutrix/following{/other_user}",
            "gists_url": "https://api.github.com/users/Anutrix/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/Anutrix",
            "id": 11459028,
            "login": "Anutrix",
            "node_id": "MDQ6VXNlcjExNDU5MDI4",
            "organizations_url": "https://api.github.com/users/Anutrix/orgs",
            "received_events_url": "https://api.github.com/users/Anutrix/received_events",
            "repos_url": "https://api.github.com/users/Anutrix/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/Anutrix/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Anutrix/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/Anutrix"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "Hmm. We got rid of `UnicodeStorage` in #13626. IRM might be easier now, now that we don't need to re-key all that. We may want to revisit.  ",
        "created_at": "2022-12-12T01:11:59Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-1345730765",
        "id": 1345730765,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "IC_kwDOBfbO8M5QNjjN",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 1,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 1,
            "laugh": 0,
            "rocket": 0,
            "total_count": 2,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1345730765/reactions"
        },
        "updated_at": "2022-12-12T01:11:59Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1345730765",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/18356694?v=4",
            "events_url": "https://api.github.com/users/zadjii-msft/events{/privacy}",
            "followers_url": "https://api.github.com/users/zadjii-msft/followers",
            "following_url": "https://api.github.com/users/zadjii-msft/following{/other_user}",
            "gists_url": "https://api.github.com/users/zadjii-msft/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/zadjii-msft",
            "id": 18356694,
            "login": "zadjii-msft",
            "node_id": "MDQ6VXNlcjE4MzU2Njk0",
            "organizations_url": "https://api.github.com/users/zadjii-msft/orgs",
            "received_events_url": "https://api.github.com/users/zadjii-msft/received_events",
            "repos_url": "https://api.github.com/users/zadjii-msft/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/zadjii-msft/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zadjii-msft/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/zadjii-msft"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "> IRM might be easier now, now that we don't need to re-key all that. We may want to revisit.\r\n\r\nDid we end up revisiting this?",
        "created_at": "2023-03-04T22:38:25Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-1454909450",
        "id": 1454909450,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "IC_kwDOBfbO8M5WuCgK",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1454909450/reactions"
        },
        "updated_at": "2023-03-04T22:38:25Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1454909450",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/9677399?v=4",
            "events_url": "https://api.github.com/users/ofek/events{/privacy}",
            "followers_url": "https://api.github.com/users/ofek/followers",
            "following_url": "https://api.github.com/users/ofek/following{/other_user}",
            "gists_url": "https://api.github.com/users/ofek/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ofek",
            "id": 9677399,
            "login": "ofek",
            "node_id": "MDQ6VXNlcjk2NzczOTk=",
            "organizations_url": "https://api.github.com/users/ofek/orgs",
            "received_events_url": "https://api.github.com/users/ofek/received_events",
            "repos_url": "https://api.github.com/users/ofek/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ofek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ofek/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ofek"
        }
    },
    {
        "author_association": "COLLABORATOR",
        "body": "@ofek Support for `IRM` was added in [Windows Terminal Preview v1.17.1023](https://github.com/microsoft/terminal/releases/tag/v1.17.1023).",
        "created_at": "2023-03-04T22:58:04Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-1454913923",
        "id": 1454913923,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "IC_kwDOBfbO8M5WuDmD",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1454913923/reactions"
        },
        "updated_at": "2023-03-04T22:58:04Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1454913923",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4181424?v=4",
            "events_url": "https://api.github.com/users/j4james/events{/privacy}",
            "followers_url": "https://api.github.com/users/j4james/followers",
            "following_url": "https://api.github.com/users/j4james/following{/other_user}",
            "gists_url": "https://api.github.com/users/j4james/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/j4james",
            "id": 4181424,
            "login": "j4james",
            "node_id": "MDQ6VXNlcjQxODE0MjQ=",
            "organizations_url": "https://api.github.com/users/j4james/orgs",
            "received_events_url": "https://api.github.com/users/j4james/received_events",
            "repos_url": "https://api.github.com/users/j4james/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/j4james/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/j4james/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/j4james"
        }
    },
    {
        "author_association": "NONE",
        "body": "\r\n\r\n![Screenshot 2023-05-02 161212](https://user-images.githubusercontent.com/113818323/235640209-6bdd0a07-485a-4f7f-9320-205b1e3f3f0b.png)\r\nwhy this task is marked as completed when the linked issue is open?",
        "created_at": "2023-05-02T10:14:34Z",
        "html_url": "https://github.com/microsoft/terminal/issues/8000#issuecomment-1531221280",
        "id": 1531221280,
        "issue_url": "https://api.github.com/repos/microsoft/terminal/issues/8000",
        "node_id": "IC_kwDOBfbO8M5bRJUg",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1531221280/reactions"
        },
        "updated_at": "2023-05-02T10:14:34Z",
        "url": "https://api.github.com/repos/microsoft/terminal/issues/comments/1531221280",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/113818323?v=4",
            "events_url": "https://api.github.com/users/mominshaikhdevs/events{/privacy}",
            "followers_url": "https://api.github.com/users/mominshaikhdevs/followers",
            "following_url": "https://api.github.com/users/mominshaikhdevs/following{/other_user}",
            "gists_url": "https://api.github.com/users/mominshaikhdevs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mominshaikhdevs",
            "id": 113818323,
            "login": "mominshaikhdevs",
            "node_id": "U_kgDOBsi60w",
            "organizations_url": "https://api.github.com/users/mominshaikhdevs/orgs",
            "received_events_url": "https://api.github.com/users/mominshaikhdevs/received_events",
            "repos_url": "https://api.github.com/users/mominshaikhdevs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mominshaikhdevs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mominshaikhdevs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mominshaikhdevs"
        }
    }
]