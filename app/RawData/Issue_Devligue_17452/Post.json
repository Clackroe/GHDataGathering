{
    "active_lock_reason": "too heated",
    "assignee": {
        "avatar_url": "https://avatars.githubusercontent.com/u/408035?v=4",
        "events_url": "https://api.github.com/users/rafeca/events{/privacy}",
        "followers_url": "https://api.github.com/users/rafeca/followers",
        "following_url": "https://api.github.com/users/rafeca/following{/other_user}",
        "gists_url": "https://api.github.com/users/rafeca/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rafeca",
        "id": 408035,
        "login": "rafeca",
        "node_id": "MDQ6VXNlcjQwODAzNQ==",
        "organizations_url": "https://api.github.com/users/rafeca/orgs",
        "received_events_url": "https://api.github.com/users/rafeca/received_events",
        "repos_url": "https://api.github.com/users/rafeca/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rafeca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rafeca/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rafeca"
    },
    "assignees": [
        {
            "avatar_url": "https://avatars.githubusercontent.com/u/408035?v=4",
            "events_url": "https://api.github.com/users/rafeca/events{/privacy}",
            "followers_url": "https://api.github.com/users/rafeca/followers",
            "following_url": "https://api.github.com/users/rafeca/following{/other_user}",
            "gists_url": "https://api.github.com/users/rafeca/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rafeca",
            "id": 408035,
            "login": "rafeca",
            "node_id": "MDQ6VXNlcjQwODAzNQ==",
            "organizations_url": "https://api.github.com/users/rafeca/orgs",
            "received_events_url": "https://api.github.com/users/rafeca/received_events",
            "repos_url": "https://api.github.com/users/rafeca/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rafeca/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rafeca/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rafeca"
        }
    ],
    "author_association": "NONE",
    "body": "<!--\r\n\r\nHave you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/atom/blob/master/CODE_OF_CONDUCT.md\r\n\r\nDo you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io\r\n\r\n-->\r\n\r\n### Prerequisites\r\n\r\n* [x] Put an X between the brackets on this line if you have done all of the following:\r\n    * Reproduced the problem in Safe Mode: https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode\r\n    * Followed all applicable steps in the debugging guide: https://flight-manual.atom.io/hacking-atom/sections/debugging/\r\n    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq\r\n    * Checked that your issue isn't already filed: https://github.com/issues?utf8=\u2713&q=is%3Aissue+user%3Aatom\r\n    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages\r\n\r\n### Description\r\n\r\nMy issue is the same as in #15949 except it is not fixed. \r\n\r\nI am unable to delete file (or directory). When trying, the following message appears: `Is gvfs-trash installed?`\r\n\r\n### Steps to Reproduce\r\n\r\n1. Try to delete any file or directory\r\n2. ???\r\n3. Profit\r\n\r\n**Expected behavior:** Deleting file should delete file\r\n\r\n**Actual behavior:** The file is not deleted\r\n\r\n**Reproduces how often:** Every time\r\n\r\n### Versions\r\n\r\n```\r\nAtom    : 1.27.1\r\nElectron: 1.7.15\r\nChrome  : 58.0.3029.110\r\nNode    : 7.9.0\r\n```\r\n```\r\napm  1.19.0\r\nnpm  3.10.10\r\nnode 6.9.5 x64\r\natom 1.27.1\r\npython 2.7.15\r\ngit 2.17.1\r\n```\r\n```\r\nOS: Fedora 28\r\n```\r\n\r\n### Additional Information\r\n```\r\n$ gvfs-trash\r\nThis tool has been deprecated, use 'gio trash' instead.\r\nSee 'gio help trash' for more info.\r\n```\r\nThe `gio trash` is supposedly implemented since electron 1.7.2 and for some folks out there this problem was fixed with `Atom 1.25` (which included upgrade to `Electron 1.7.11`) but apparently I am on even newer Atom version, with even newer Electron and it still happens.\r\n\r\n### EDIT1\r\n#### More insight on the problem provided by @cutephoton:\r\n> @Devligue This is a legit bug. The _tldr answer_ is that `_g_file_trash` may not be supported. In order for `_g_file_trash` to succeed, the following conditions must be met:\r\n> \r\n> * The file being moved to trash is on the same partition as your home folder\r\n>   **OR**\r\n> * A trash folder already exists or can be created at the mount point and,\r\n> * The trash folder is considered 'safe/secure' by verifying UID and restrictive permissions\r\n> \r\n> **How this should probably be fixed...**\r\n> \r\n> Atom does not have a fallback mechanism like offering the ability to permanently remove a file instead. This would address bring atom in line with gnome's graceful behaviour. The attached image show how Gnome Files (aka Nautilus) prompt the user to permanently delete the file (when trash not supported)\r\n> \r\n> ![gnome's solution](https://user-images.githubusercontent.com/19512121/43511743-0dac32c0-952e-11e8-8af8-e0ef6cb916d0.png)\r\n> \r\n> **Impact: Users with multiple disks and partitions**\r\n> \r\n> Fedora/Redhat/etc: _Impacted_ due to default partition scheme that separates `/` and `/home` in to partitions. Files outside of the `/home` partition cannot be moved to trash.\r\n> \r\n> Ubuntu: Less likely due to partition layout (`/home` is part of the `/` partition)\r\n> \r\n> Conditions where users will be impacted:\r\n> \r\n> * File systems with unix permissions:\r\n>   \r\n>   * _Impacted with workaround_ due to typical restrictive top-level directory permissions (root)\r\n> * FAT/non-unix file systems:\r\n>   \r\n>   * User Session Mount (i.e. `/run/media/$USER/disk-label`): _No Impact_\r\n>   * Fstab: _Impacted_ even with permissive umask. The default uid/gid is root. It will be unable to satisfy the requirements of a trash folder without additional options (uid/gid/umask).\r\n> * Network shared folders: _Unknown/Did not test._\r\n> \r\n> **Notes/Testing the Root Cause**\r\n> \r\n> Note: Though I am confident that my analysis is decent enough, much of the code I was referencing was unfamiliar/new to me.\r\n> \r\n> Initially I encountered this issue when I put files in a certain location like the reporter above. I created a delete-me file test as suggested above in the relevant directory, `/opt/cupenv`. I ran the command `strace gio trash delete-me.txt`. A abridged version of the output is here:\r\n> \r\n> ```\r\n> lstat(\"/opt/cupenv/delete-me.txt\", {st_mode=S_IFREG|0664, st_size=6, ...}) = 0\r\n> ...\r\n> lstat(\"/.Trash-1000\", 0x7ffde5ffb5b0)   = -1 ENOENT (No such file or directory)\r\n> mkdir(\"/.Trash-1000\", 0700)             = -1 EACCES (Permission denied)\r\n> ```\r\n> That's unexpected. The API documentation for [g_file_trash](https://developer.gnome.org/gio/stable/GFile.html#g-file-trash) lacks some level of specificity.\r\n> \r\n> > Sends file to the \"Trashcan\", if possible. This is similar to deleting it, but the user can recover it before emptying the trashcan. Not all file systems support trashing, so this call can return the G_IO_ERROR_NOT_SUPPORTED error.\r\n> \r\n> One might assume (as I did): Given a path, if the user has permission to modify/delete the file, then GIO's g_file_trash API should succeed at removing the file in some manner. Perhaps, if trash functionality is not available, then there might be a fallback mechanism. In the case of `gio trash` I expected there to be a -f force option that would prioritize trash over permanently deleting the file. (`gio trash -f` only ignores files that don't exist)\r\n> \r\n> Glib appears to implement GIO local file access using [glocalfile.c](https://github.com/GNOME/glib/blob/83a4cab12c2d00dbfe6013d071cff2da310109a4/gio/glocalfile.c#L1899). The trash algorithm looks like this:\r\n> \r\n> * Is the path on the same partition as the user's home directory? If so, move the file to the home trash folder if possible and exit.\r\n> * Given the path, locate the mount point top level directory (denoted as `$topdir` in source)\r\n>   \r\n>   * In my case, `/opt/cupenv/delete_me.txt` -> `/` (the primary partition)\r\n>   * A more typical case: `/run/media/$USER/disk-label/a/b/c/d` would be `/run/media/$USER/disk-label`\r\n> * If `$topdir` is found, pick one of `$topdir/.Trash/$UID` or `$topdir/.Trash-UID` folder.\r\n>   \r\n>   * If `$topdir/.Trash-UID` and `$topdir/.Trash/$UID` exists: Validate proper UID and file permission (or fail)\r\n>   * Try to create folder `$topdir/.Trash-$UID`. Validate proper UID and file permission (or fail)\r\n> \r\n> At the end of the function we find [`G_IO_ERROR_NOT_SUPPORTED` is returned](https://github.com/GNOME/glib/blob/83a4cab12c2d00dbfe6013d071cff2da310109a4/gio/glocalfile.c#L2059) when such a folder is not found and cannot be created.\r\n> \r\n> ```\r\n> if (trashdir == NULL)\r\n> \t{\r\n> \t  g_free (topdir);\r\n>           g_set_io_error (error,\r\n>                           _(\"Unable to find or create trash directory for %s\"),\r\n>                           file, G_IO_ERROR_NOT_SUPPORTED);\r\n> \t  return FALSE;\r\n> }\r\n> ```\r\n> I confirmed my understanding by creating a top level trash folder and using gio trash command.\r\n> \r\n> ```\r\n> sudo mkdir /.Trash-1000\r\n> sudo chmod 0700 /.Trash-1000\r\n> sudo chown fosterb:fosterb /.Trash-1000\r\n> cd /opt/cupenv && echo hello > delete-me.txt; gio trash delete-me.txt\r\n> ```\r\n> Files located on the same partition as your home directory can always be moved to your user trash folder. On my operating system, the paths `/` and `/home` are separate partitions. I created a file `/home/tmp/x` where `tmp` and `x` are owned by my user. In this case, the files get moved to your `$HOME/.local/share/Trash` folder.\r\n> \r\n> ```\r\n> lstat(\"/home/tmp/x\", {st_mode=S_IFREG|0644, st_size=0, ...}) = 0\r\n> stat(\"/home/fosterb\", {st_mode=S_IFDIR|0700, st_size=4096, ...}) = 0\r\n> access(\"/home\", F_OK)                   = 0\r\n> ....\r\n> stat(\"/home/fosterb/.local/share\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\n> access(\"/home/fosterb/.local/share/Trash\", F_OK) = 0\r\n> stat(\"/home/fosterb/.local/share/Trash\", {st_mode=S_IFDIR|0700, st_size=4096, ...}) = 0\r\n> mkdir(\"/home/fosterb/.local/share/Trash/info\", 0700) = -1 EEXIST (File exists)\r\n> mkdir(\"/home/fosterb/.local/share/Trash/files\", 0700) = -1 EEXIST (File exists)\r\n> openat(AT_FDCWD, \"/home/fosterb/.local/share/Trash/info/x.trashinfo\", O_RDONLY|O_CREAT|O_EXCL, 0666) = 7\r\n> ```\r\n> But when mounting disks (external or internal) using fstab or mount commands (as opposed to session-based mounting) issues can arise. I tested a FAT file system with umask=0000 and uid/gid set to root.\r\n> \r\n> ```\r\n> lstat(\"/mnt/giotest\", {st_mode=S_IFDIR|0777, st_size=8192, ...}) = 0\r\n> lstat(\"/mnt\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\r\n> lstat(\"/mnt/giotest/.Trash\", 0x7fffec5502c0) = -1 ENOENT (No such file or directory)\r\n> lstat(\"/mnt/giotest/.Trash-1000\", 0x7fffec550230) = -1 ENOENT (No such file or directory)\r\n> mkdir(\"/mnt/giotest/.Trash-1000\", 0700) = 0\r\n> lstat(\"/mnt/giotest/.Trash-1000\", {st_mode=S_IFDIR|0777, st_size=8192, ...}) = 0\r\n> unlink(\"/mnt/giotest/.Trash-1000\")      = -1 EISDIR (Is a directory)\r\n> rmdir(\"/mnt/giotest/.Trash-1000\")       = 0\r\n> file:///mnt/giotest/x: Unable to find or create trash directory for /mnt/giotest/x\r\n> ```\r\n> You can see gio trash going through the motions. The operations succeeds but the command still reports an error.\r\n> \r\n> ```\r\n> [fosterb@rose giotest]$ ls -lah\r\n> total 12K\r\n> drwxrwxrwx. 2 root root 8.0K Aug  1 00:36 .\r\n> drwxr-xr-x. 4 root root 4.0K Aug  1 00:30 ..\r\n> -rwxrwxrwx. 1 root root    0 Aug  1 01:23 x\r\n> ```\r\n> GLib/Gio will not write to a trash directory with incorrect permissions/ownership. (Security?) Without unix permissions, trash will always fail on these mount points. Modifying fstab to appear similar to options used during session mounts (UID/GID set to user vs root, umask is set appropriately). Conveniently the [source code](https://github.com/GNOME/glib/blob/83a4cab12c2d00dbfe6013d071cff2da310109a4/gio/glocalfile.c#L2046) has a comment that seems to strongly imply this is a known/expected.\r\n> \r\n> ```\r\n> \t\t  /* Ensure that the created dir has the right uid etc.\r\n> \t\t     This might fail on e.g. a FAT dir */\r\n> ```\r\n> Most of this was unnecessary, but I figured I'd show my work.\r\n\r\n### EDIT2\r\n#### More insight, to not get confused as of the nature of the bug, and how to reproduce it (by @cutephoton as well):\r\n> Yes, as reported, the ELECTRON_TRASH environment variable is needed. This is the issue referenced #15949 bug. The issue reported here is not related to #15949. The error message related to gvfs-trash is a blunt tool (even access denied errors produce the same error message) so I understand why people are responding here.\r\n> \r\n> The reporter clarifies one of the key symptoms here:\r\n> [#17452 (comment)](https://github.com/atom/atom/issues/17452#issuecomment-396407349)\r\n> \r\n> And that led to my deep dive. My deep dive details the specific cases where trash becomes unavailable (i.e. when a trash folder cannot be safely created).\r\n> [#17452 (comment)](https://github.com/atom/atom/issues/17452#issuecomment-409518547)\r\n> \r\n> **I just revalidated my findings and unsurprisingly gio trash still fails.**\r\n> \r\n> Anyhow, I wanted to clarify this so it doesn't get lost when/if atom devs look in to this issue.\r\n\r\n\r\n",
    "closed_at": null,
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/26350515?v=4",
        "events_url": "https://api.github.com/users/no-response%5Bbot%5D/events{/privacy}",
        "followers_url": "https://api.github.com/users/no-response%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/no-response%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/no-response%5Bbot%5D/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apps/no-response",
        "id": 32965360,
        "login": "no-response[bot]",
        "node_id": "MDM6Qm90MzI5NjUzNjA=",
        "organizations_url": "https://api.github.com/users/no-response%5Bbot%5D/orgs",
        "received_events_url": "https://api.github.com/users/no-response%5Bbot%5D/received_events",
        "repos_url": "https://api.github.com/users/no-response%5Bbot%5D/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/no-response%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/no-response%5Bbot%5D/subscriptions",
        "type": "Bot",
        "url": "https://api.github.com/users/no-response%5Bbot%5D"
    },
    "comments": 59,
    "comments_url": "https://api.github.com/repos/atom/atom/issues/17452/comments",
    "created_at": "2018-06-03T18:25:47Z",
    "events_url": "https://api.github.com/repos/atom/atom/issues/17452/events",
    "html_url": "https://github.com/atom/atom/issues/17452",
    "id": 328850532,
    "labels": [
        {
            "color": "c7def8",
            "default": false,
            "description": "Issues that occur on Linux but not on other platforms.",
            "id": 97577987,
            "name": "linux",
            "node_id": "MDU6TGFiZWw5NzU3Nzk4Nw==",
            "url": "https://api.github.com/repos/atom/atom/labels/linux"
        },
        {
            "color": "ededed",
            "default": false,
            "description": "",
            "id": 1109083354,
            "name": "v \u2b07\ufe0f",
            "node_id": "MDU6TGFiZWwxMTA5MDgzMzU0",
            "url": "https://api.github.com/repos/atom/atom/labels/v%20%E2%AC%87%EF%B8%8F"
        },
        {
            "color": "d1d1d1",
            "default": false,
            "description": "",
            "id": 1109083834,
            "name": "i \u2b06\ufe0f",
            "node_id": "MDU6TGFiZWwxMTA5MDgzODM0",
            "url": "https://api.github.com/repos/atom/atom/labels/i%20%E2%AC%86%EF%B8%8F"
        },
        {
            "color": "d1d1d1",
            "default": false,
            "description": "",
            "id": 1109084087,
            "name": "d \u2b06\ufe0f",
            "node_id": "MDU6TGFiZWwxMTA5MDg0MDg3",
            "url": "https://api.github.com/repos/atom/atom/labels/d%20%E2%AC%86%EF%B8%8F"
        }
    ],
    "labels_url": "https://api.github.com/repos/atom/atom/issues/17452/labels{/name}",
    "locked": true,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMjg4NTA1MzI=",
    "number": 17452,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 5,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 5,
        "url": "https://api.github.com/repos/atom/atom/issues/17452/reactions"
    },
    "repository_url": "https://api.github.com/repos/atom/atom",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/atom/atom/issues/17452/timeline",
    "title": "Unable to delete files on Fedora 28 (gvfs-trash is deprecated)",
    "updated_at": "2019-05-07T11:19:13Z",
    "url": "https://api.github.com/repos/atom/atom/issues/17452",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/12434847?v=4",
        "events_url": "https://api.github.com/users/Devligue/events{/privacy}",
        "followers_url": "https://api.github.com/users/Devligue/followers",
        "following_url": "https://api.github.com/users/Devligue/following{/other_user}",
        "gists_url": "https://api.github.com/users/Devligue/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Devligue",
        "id": 12434847,
        "login": "Devligue",
        "node_id": "MDQ6VXNlcjEyNDM0ODQ3",
        "organizations_url": "https://api.github.com/users/Devligue/orgs",
        "received_events_url": "https://api.github.com/users/Devligue/received_events",
        "repos_url": "https://api.github.com/users/Devligue/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Devligue/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Devligue/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Devligue"
    }
}