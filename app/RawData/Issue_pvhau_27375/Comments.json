[
    {
        "author_association": "CONTRIBUTOR",
        "body": "/cc @bradfitz \r\n",
        "created_at": "2018-08-31T17:47:11Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-417740879",
        "id": 417740879,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzc0MDg3OQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/417740879/reactions"
        },
        "updated_at": "2018-08-31T17:47:11Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/417740879",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1225294?v=4",
            "events_url": "https://api.github.com/users/FiloSottile/events{/privacy}",
            "followers_url": "https://api.github.com/users/FiloSottile/followers",
            "following_url": "https://api.github.com/users/FiloSottile/following{/other_user}",
            "gists_url": "https://api.github.com/users/FiloSottile/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/FiloSottile",
            "id": 1225294,
            "login": "FiloSottile",
            "node_id": "MDQ6VXNlcjEyMjUyOTQ=",
            "organizations_url": "https://api.github.com/users/FiloSottile/orgs",
            "received_events_url": "https://api.github.com/users/FiloSottile/received_events",
            "repos_url": "https://api.github.com/users/FiloSottile/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/FiloSottile/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/FiloSottile/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/FiloSottile"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "Hello,\r\n\r\nI would like to contribute fix for this issue.\r\n\r\nI intend to change role of the two goroutines in `net/http.(*timeoutHandler).ServeHTTP`. That way, user handler panicking is still happening on the main goroutine calling the handler and stack trace is preserved for all `defer`-ed functions higher in the stack.\r\n\r\n@bradfitz is this fix OK?",
        "created_at": "2019-10-11T23:21:20Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-541254329",
        "id": 541254329,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTI1NDMyOQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/541254329/reactions"
        },
        "updated_at": "2019-10-11T23:21:52Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/541254329",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/120082?v=4",
            "events_url": "https://api.github.com/users/slon/events{/privacy}",
            "followers_url": "https://api.github.com/users/slon/followers",
            "following_url": "https://api.github.com/users/slon/following{/other_user}",
            "gists_url": "https://api.github.com/users/slon/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/slon",
            "id": 120082,
            "login": "slon",
            "node_id": "MDQ6VXNlcjEyMDA4Mg==",
            "organizations_url": "https://api.github.com/users/slon/orgs",
            "received_events_url": "https://api.github.com/users/slon/received_events",
            "repos_url": "https://api.github.com/users/slon/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/slon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/slon/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/slon"
        }
    },
    {
        "author_association": "NONE",
        "body": "Running the inner handler in the main goroutine would also solve more serious problems like #34608.\r\nBut currently `TimeoutHandler.ServeHTTP` doesn't wait for the inner handler to complete in case of timeout, which means that a \"timed out\" response is never late, even if the inner handler is taking a long time.\r\nBy switching goroutines we cannot prevent the \"timed out\" response to be delayed by the inner handler (even if we write it as soon as possible, `Flush` is not guaranteed, and the response is not complete until `TimeoutHandler.ServeHTTP` returns).\r\nSo if someone's inner handler runs too long after timeout, this change would break them.\r\n\r\nOn the other hand, the current situation is quite messy: wrong panic location, panic disappearing after timeout, and broken (racy) `Push`.\r\nI suspect `TimeoutHandler` has a very limited user base, and the core team doesn't seem much interested either.\r\nI would like to hear from someone who is *actually* using `TimeoutHandler` whether the proposed change is acceptable to them.\r\n\r\nTo be clear, I'm thinking about a change of this kind in `TimeoutHandler.ServeHTTP` (untested!):\r\n```go\r\ngo func() {\r\n    <-ctx.Done()\r\n    tw.mu.Lock()\r\n    defer tw.mu.Unlock()\r\n    tw.timedOut = true\r\n}\r\nh.handler.ServeHTTP(tw, r)\r\ntw.mu.Lock()\r\ndefer tw.mu.Unlock()\r\nif tw.timedOut {\r\n    w.WriteHeader(StatusServiceUnavailable)\r\n    io.WriteString(w, h.errorBody())\r\n    return\r\n}\r\ndst := w.Header()\r\nfor k, vv := range tw.h {\r\n    dst[k] = vv\r\n}\r\nif !tw.wroteHeader {\r\n    tw.code = StatusOK\r\n}\r\nw.WriteHeader(tw.code)\r\nw.Write(tw.wbuf.Bytes())\r\n```\r\nWriting the \"timed out\" response earlier (in the spawned goroutine) won't make any difference, because of buffering, and because there's no way (that I know of) to tell the server *\"I'm done\"* without returning from `TimeoutHandler.ServeHTTP`.\r\nAlso, it's good to keep the spawned goroutine as simple as possible, unless we recover panic in there too.",
        "created_at": "2019-10-12T14:04:18Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-541327963",
        "id": 541327963,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTMyNzk2Mw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/541327963/reactions"
        },
        "updated_at": "2019-10-12T14:04:18Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/541327963",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38279039?v=4",
            "events_url": "https://api.github.com/users/pam4/events{/privacy}",
            "followers_url": "https://api.github.com/users/pam4/followers",
            "following_url": "https://api.github.com/users/pam4/following{/other_user}",
            "gists_url": "https://api.github.com/users/pam4/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/pam4",
            "id": 38279039,
            "login": "pam4",
            "node_id": "MDQ6VXNlcjM4Mjc5MDM5",
            "organizations_url": "https://api.github.com/users/pam4/orgs",
            "received_events_url": "https://api.github.com/users/pam4/received_events",
            "repos_url": "https://api.github.com/users/pam4/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/pam4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pam4/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/pam4"
        }
    },
    {
        "author_association": "NONE",
        "body": "@pam4  \r\nHi, we are using the timeout handler and this issue is a pain in the code for us as well.\r\n\r\nBut delaying the response is not an acceptable solution for most cases, it would be fatal if the inner handler doesn't return, and will cause big delay on response those missed the intent of a timeout handler.\r\n\r\nAlso your solution could be implemented simply by checking the amount of time that took for the inner handler to process the request.\r\n\r\nI think that the approach should be printing\\saving the stack trace from the go routine.\r\n",
        "created_at": "2020-01-30T10:53:03Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-580197586",
        "id": 580197586,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDE5NzU4Ng==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/580197586/reactions"
        },
        "updated_at": "2020-01-30T10:53:03Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/580197586",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2716357?v=4",
            "events_url": "https://api.github.com/users/CfirTsabari/events{/privacy}",
            "followers_url": "https://api.github.com/users/CfirTsabari/followers",
            "following_url": "https://api.github.com/users/CfirTsabari/following{/other_user}",
            "gists_url": "https://api.github.com/users/CfirTsabari/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/CfirTsabari",
            "id": 2716357,
            "login": "CfirTsabari",
            "node_id": "MDQ6VXNlcjI3MTYzNTc=",
            "organizations_url": "https://api.github.com/users/CfirTsabari/orgs",
            "received_events_url": "https://api.github.com/users/CfirTsabari/received_events",
            "repos_url": "https://api.github.com/users/CfirTsabari/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/CfirTsabari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CfirTsabari/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/CfirTsabari"
        }
    },
    {
        "author_association": "NONE",
        "body": "@CfirTsabari\r\n> Also your solution could be implemented simply by checking the amount of time that took for the inner handler to process the request.\r\n\r\nIt could be implemented without a separate goroutine, but we still want writes from the inner handler to fail on time (returning error), so that the inner handler can detect the timeout on its own, otherwise it would be completely useless.\r\nOf course it \\*is\\* less useful, but I don't know of many real life use cases for `TimeoutHandler`, that's why I was asking in response to @slon proposal.\r\n\r\n> I think that the approach should be printing\\saving the stack trace from the go routine.\r\n\r\nYes, the separate goroutine [here](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L3234) could be changed to log the stack trace directly to the server logger in case of panic (same as [here](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L1769)). And the main goroutine would have to run `panic(ErrAbortHandler)` on [receive](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L3242) from `panicChan` since the panic has already been logged.\r\nIf I'm not missing something, this could solve both the wrong panic location problem (before timeout) and the panic disappearing problem (after timeout).",
        "created_at": "2020-01-30T16:34:45Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-580339800",
        "id": 580339800,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDMzOTgwMA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/580339800/reactions"
        },
        "updated_at": "2020-01-30T17:14:08Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/580339800",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38279039?v=4",
            "events_url": "https://api.github.com/users/pam4/events{/privacy}",
            "followers_url": "https://api.github.com/users/pam4/followers",
            "following_url": "https://api.github.com/users/pam4/following{/other_user}",
            "gists_url": "https://api.github.com/users/pam4/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/pam4",
            "id": 38279039,
            "login": "pam4",
            "node_id": "MDQ6VXNlcjM4Mjc5MDM5",
            "organizations_url": "https://api.github.com/users/pam4/orgs",
            "received_events_url": "https://api.github.com/users/pam4/received_events",
            "repos_url": "https://api.github.com/users/pam4/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/pam4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pam4/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/pam4"
        }
    },
    {
        "author_association": "NONE",
        "body": "@pam4 \r\n> Yes, the separate goroutine [here](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L3234) could be changed to log the stack trace directly to the server logger in case of panic (same as [here](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L1769)). And the main goroutine would have to run `panic(ErrAbortHandler)` on [receive](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L3242) from `panicChan` since the panic has already been logged.\r\n> If I'm not missing something, this could solve both the wrong panic location problem (before timeout) and the panic disappearing problem (after timeout).\r\n\r\nYes that exactly what I meant, but this requires changes in the golang net/http package so I have created an handler that intermediate between the TimeoutHandler and the inner handler that log the panic in edition to the default logging of the panic that is called by the TimeoutHandler.\r\nThis is not ideal since:\r\n1. Some information is unknown at the handler level (server logger, remote address and so on)\r\n2. I Don't completely like the idea of calling panic after recover.\r\n3. 2 different stacks will be printed.\r\n\r\nUPDATE:\r\na better version of the workaround is here:\r\nhttps://gist.github.com/CfirTsabari/786c24685189b7569500b36fe8c5da7b\r\n\r\n\r\nBut in the end it's kind of does the job:\r\nif anyone need it here it is:\r\nJust use `PanicReportTimeoutHandler` instead of `http.TimeoutHandler`\r\n```\r\nfunc PanicReportTimeoutHandler(h http.Handler, dt time.Duration, msg string) http.Handler{\r\n\treturn http.TimeoutHandler(&panicReporterHandler{handler:h,logFunc:log.Printf},dt,msg)\r\n}\r\n\r\ntype panicReporterHandler struct{\r\n\thandler http.Handler\r\n\tlogFunc func( string, ...interface{})\r\n}\r\n\r\nfunc (h *panicReporterHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\r\n\tdefer func() {\r\n\t\tif err := recover(); err != nil && err != http.ErrAbortHandler {\r\n\t\t\tconst size = 64 << 10\r\n\t\t\tbuf := make([]byte, size)\r\n\t\t\tbuf = buf[:runtime.Stack(buf, false)]\r\n\t\t\th.logFunc(\"http: panic serving: (%v)\\n%s\", err, buf)\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t}()\r\n\th.handler.ServeHTTP(w,r)\r\n}\r\n\r\n```\r\n\r\n",
        "created_at": "2020-02-03T13:06:12Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-581404609",
        "id": 581404609,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTQwNDYwOQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/581404609/reactions"
        },
        "updated_at": "2020-02-03T18:11:56Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/581404609",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2716357?v=4",
            "events_url": "https://api.github.com/users/CfirTsabari/events{/privacy}",
            "followers_url": "https://api.github.com/users/CfirTsabari/followers",
            "following_url": "https://api.github.com/users/CfirTsabari/following{/other_user}",
            "gists_url": "https://api.github.com/users/CfirTsabari/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/CfirTsabari",
            "id": 2716357,
            "login": "CfirTsabari",
            "node_id": "MDQ6VXNlcjI3MTYzNTc=",
            "organizations_url": "https://api.github.com/users/CfirTsabari/orgs",
            "received_events_url": "https://api.github.com/users/CfirTsabari/received_events",
            "repos_url": "https://api.github.com/users/CfirTsabari/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/CfirTsabari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CfirTsabari/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/CfirTsabari"
        }
    },
    {
        "author_association": "NONE",
        "body": "@CfirTsabari Thanks for the workaround. It does the job but as you noticed there are many drawbacks of this solution.\r\n\r\nThe bottom line is - `http.Server` has its logger and a mechanism of logging recovered errors/values together with the stacktrace but this does not work if panic happened in a different goroutine:\r\nhttps://github.com/golang/go/blob/753d56d3642eb83848aa39e65982a9fc77e722d7/src/net/http/server.go#L1769-L1774\r\n\r\nI believe that the only way to solve it nicely (and in backward compatible way) would be to wrap errors recovered in `http.TimeoutHandler` into \"errors with stack\" (like in https://godoc.org/github.com/pkg/errors#WithStack) before re-panicking them and using these frames for logging if present.\r\n\r\nI know there was [a proposal](https://go.googlesource.com/proposal/+/master/design/29934-error-values.md) for extending errors with stack frames and wrapping. I also know that the wrapping/unwrapping part got accepted and we have them since Go 1.13, but I don't know what happened to `errors.Frame` and `errors.Caller` part of that proposal. Was it rejected? Are there any active discussions around tying stack traces/frames into error values?",
        "created_at": "2020-02-03T14:39:44Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-581445456",
        "id": 581445456,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTQ0NTQ1Ng==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/581445456/reactions"
        },
        "updated_at": "2020-02-03T15:48:18Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/581445456",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/85191?v=4",
            "events_url": "https://api.github.com/users/telendt/events{/privacy}",
            "followers_url": "https://api.github.com/users/telendt/followers",
            "following_url": "https://api.github.com/users/telendt/following{/other_user}",
            "gists_url": "https://api.github.com/users/telendt/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/telendt",
            "id": 85191,
            "login": "telendt",
            "node_id": "MDQ6VXNlcjg1MTkx",
            "organizations_url": "https://api.github.com/users/telendt/orgs",
            "received_events_url": "https://api.github.com/users/telendt/received_events",
            "repos_url": "https://api.github.com/users/telendt/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/telendt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/telendt/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/telendt"
        }
    },
    {
        "author_association": "NONE",
        "body": "@telendt\r\n\r\n> I believe that the only way to solve it nicely (and in backward compatible way) would be to wrap errors recovered in `http.TimeoutHandler` into \"errors with stack\", like in https://godoc.org/github.com/pkg/errors#WithStack and using these frames for logging if present.\r\n\r\nThe error handling in go is a big issue #29934, yes adding a mechanism of error handling will most likely solve the hidden panic issue, but this is behind the scope of this issue IMHO.",
        "created_at": "2020-02-03T15:22:18Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-581465705",
        "id": 581465705,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTQ2NTcwNQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/581465705/reactions"
        },
        "updated_at": "2020-02-03T15:22:18Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/581465705",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2716357?v=4",
            "events_url": "https://api.github.com/users/CfirTsabari/events{/privacy}",
            "followers_url": "https://api.github.com/users/CfirTsabari/followers",
            "following_url": "https://api.github.com/users/CfirTsabari/following{/other_user}",
            "gists_url": "https://api.github.com/users/CfirTsabari/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/CfirTsabari",
            "id": 2716357,
            "login": "CfirTsabari",
            "node_id": "MDQ6VXNlcjI3MTYzNTc=",
            "organizations_url": "https://api.github.com/users/CfirTsabari/orgs",
            "received_events_url": "https://api.github.com/users/CfirTsabari/received_events",
            "repos_url": "https://api.github.com/users/CfirTsabari/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/CfirTsabari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CfirTsabari/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/CfirTsabari"
        }
    },
    {
        "author_association": "NONE",
        "body": "@CfirTsabari\r\n> Yes that exactly what I meant, but this requires changes in the golang net/http package\r\n\r\nAs far as I know, `http.TimeoutHandler` does not use any internals, therefore it should be possible to just copy it in your own package and make the changes.\r\nBut your workaround should have the same effect, if you fix the following points.\r\n\r\n> 1. Some information is unknown at the handler level (server logger, remote address and so on)\r\n\r\nYou can get some via Context, see `logf` [function](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L3068) and exported [keys](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L233).\r\n\r\n> 2. I Don't completely like the idea of calling panic after recover.\r\n\r\nIs there a specific problem you have in mind?\r\n\r\n> 3. 2 different stacks will be printed.\r\n\r\nYou should probably just call `panic(http.ErrAbortHandler)` instead of `panic(err)` in your `panicReporterHandler.ServeHTTP`, to avoid printing the incorrect one.",
        "created_at": "2020-02-03T16:39:12Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-581503603",
        "id": 581503603,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTUwMzYwMw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/581503603/reactions"
        },
        "updated_at": "2020-02-03T16:52:32Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/581503603",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38279039?v=4",
            "events_url": "https://api.github.com/users/pam4/events{/privacy}",
            "followers_url": "https://api.github.com/users/pam4/followers",
            "following_url": "https://api.github.com/users/pam4/following{/other_user}",
            "gists_url": "https://api.github.com/users/pam4/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/pam4",
            "id": 38279039,
            "login": "pam4",
            "node_id": "MDQ6VXNlcjM4Mjc5MDM5",
            "organizations_url": "https://api.github.com/users/pam4/orgs",
            "received_events_url": "https://api.github.com/users/pam4/received_events",
            "repos_url": "https://api.github.com/users/pam4/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/pam4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pam4/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/pam4"
        }
    },
    {
        "author_association": "NONE",
        "body": "@pam4 \r\n\r\n> As far as I know, `http.TimeoutHandler` does not use any internals, therefore it should be possible to just copy it in your own package and make the changes.\r\n\r\nYea but copying the timeout handler is also a bad practice, for example lets say someone found a bug in the net/http timeout handler and fixed, you won't be getting this bug fix.\r\n \r\n> You can get some via Context, see `logf` [function](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L3068) and exported [keys](https://github.com/golang/go/blob/bbbc6589dfbc05be2bfa59f51c20f9eaa8d0c531/src/net/http/server.go#L233).\r\n> \r\ngreat idea :+1: \r\n\r\n \r\n> Is there a specific problem you have in mind?\r\n\r\nthis hide the panic location, so as long as we use it only as addition to the timeout handler that kind of fine, but without this timeout handler the new handler will cause the same problem it was supposed to solve.\r\n\r\n> You should probably just call `panic(http.ErrAbortHandler)` instead of `panic(err)` in your `panicReporterHandler.ServeHTTP`, to avoid printing the incorrect one.\r\n\r\ngreat idea :+1: \r\n\r\nso i have created a [gist](https://gist.github.com/CfirTsabari/786c24685189b7569500b36fe8c5da7b) updated with your suggestions  ",
        "created_at": "2020-02-03T18:10:47Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-581543639",
        "id": 581543639,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTU0MzYzOQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/581543639/reactions"
        },
        "updated_at": "2020-02-03T18:10:47Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/581543639",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2716357?v=4",
            "events_url": "https://api.github.com/users/CfirTsabari/events{/privacy}",
            "followers_url": "https://api.github.com/users/CfirTsabari/followers",
            "following_url": "https://api.github.com/users/CfirTsabari/following{/other_user}",
            "gists_url": "https://api.github.com/users/CfirTsabari/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/CfirTsabari",
            "id": 2716357,
            "login": "CfirTsabari",
            "node_id": "MDQ6VXNlcjI3MTYzNTc=",
            "organizations_url": "https://api.github.com/users/CfirTsabari/orgs",
            "received_events_url": "https://api.github.com/users/CfirTsabari/received_events",
            "repos_url": "https://api.github.com/users/CfirTsabari/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/CfirTsabari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/CfirTsabari/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/CfirTsabari"
        }
    },
    {
        "author_association": "NONE",
        "body": "@CfirTsabari\r\n> Yea but copying the timeout handler is also a bad practice, for example lets say someone found a bug in the net/http timeout handler and fixed, you won't be getting this bug fix.\r\n\r\nOf course. I just wanted to point out that it does not use any internals so you can do about the same things from outside. I certainly hope it \\*will\\* get fixed.\r\n\r\n> this hide the panic location, so as long as we use it only as addition to the timeout handler that kind of fine, but without this timeout handler the new handler will cause the same problem it was supposed to solve.\r\n\r\nIf you re-throw a panic from the recovering function itself, you get one more stack frame for the rethrow, but the stack trace up to the original panic location should remain unchanged. Not exactly the same thing, but it doesn't really \"hide\" the panic location as `TimeoutHandler` does.\r\n\r\n> so i have created a gist updated with your suggestions\r\n\r\nLooks good :thumbsup:",
        "created_at": "2020-02-04T06:26:03Z",
        "html_url": "https://github.com/golang/go/issues/27375#issuecomment-581762049",
        "id": 581762049,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27375",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTc2MjA0OQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 1,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 1,
            "url": "https://api.github.com/repos/golang/go/issues/comments/581762049/reactions"
        },
        "updated_at": "2020-02-04T06:26:03Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/581762049",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/38279039?v=4",
            "events_url": "https://api.github.com/users/pam4/events{/privacy}",
            "followers_url": "https://api.github.com/users/pam4/followers",
            "following_url": "https://api.github.com/users/pam4/following{/other_user}",
            "gists_url": "https://api.github.com/users/pam4/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/pam4",
            "id": 38279039,
            "login": "pam4",
            "node_id": "MDQ6VXNlcjM4Mjc5MDM5",
            "organizations_url": "https://api.github.com/users/pam4/orgs",
            "received_events_url": "https://api.github.com/users/pam4/received_events",
            "repos_url": "https://api.github.com/users/pam4/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/pam4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pam4/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/pam4"
        }
    }
]