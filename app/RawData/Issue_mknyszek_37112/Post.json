{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "# Proposal: API for unstable runtime metrics\r\n\r\n## Background & Motivation\r\n\r\nToday runtime metrics are exposed in two ways.\r\n\r\nThe first way is via the struct-based sampling APIs `runtime.ReadMemStats` and `runtime/debug.GCStats`. These functions accept a pointer to a struct and then populate the struct with data from the runtime.\r\n\r\nThe problems with this type of API are:\r\n* Removing/renaming old metrics from the structs is impossible.\r\n  * For example, `MemStats.BySize` is hard-coded to 61 size classes when there are currently 83. We cannot ever change `BySize`.\r\n* Adding implementation-specific metrics to the structs is discouraged, because it pollutes the API when inevitably they'll be deprecated.\r\n* `runtime.ReadMemStats` has a global effect on the application because it forces a STW. This has a direct effect on latency. Being able to tease apart which metrics actually need gives users more control over performance.\r\n\r\nThe good things about this type of API are:\r\n* Protected by the Go 1 compatibility promise.\r\n* Easy for applications to ingest, use for their own purposes, or push to a metrics collection service or log.\r\n\r\nThe second is via `GODEBUG` flags which emit strings containing metrics to standard error (e.g. `gctrace`, `gcpacertrace`, `scavtrace`).\r\n\r\nThe problems with this type of API are:\r\n* Difficult for an application to ingest because it must be parsed.\r\n* Format of the output is not protected by the Go 1 backwards compatibility promise.\r\n\r\nThe good things about this type of API are:\r\n* We can freely change it and add implementation-specific metrics.\r\n* We never have to live with bad decisions.\r\n\r\nI would like to propose a new API which takes the best of both approaches.\r\n\r\n## Requirements\r\n\r\n* The API should be easily extendable with new metrics.\r\n* The API should be easily retractable, to deprecate old metrics.\r\n    * Removing a metric should not break any Go applications as per the Go 1 compatibility promise.\r\n* The API should be discoverable, to obtain a list of currently relevant metrics.\r\n* The API should be rich, allowing a variety of metrics (e.g. distributions).\r\n* The API implementation should minimize CPU/memory usage, such that it does not appreciably\r\n  affect any of the metrics being measured.\r\n* The API should include useful existing metrics already exposed by the runtime.\r\n\r\n## Goals\r\n\r\nGiven the requirements, I suggest we prioritize the following concerns when designing the API in the following order.\r\n\r\n1. Extensibility.\r\n    * Metrics are \u201cunstable\u201d and therefore it should always be compatible to add or remove metrics.\r\n    * Since metrics will tend to be implementation-specific, this feature is critical.\r\n1. Discoverability.\r\n    * Because these metrics are \u201cunstable,\u201d there must be a way for the application, and for the human writing the application, to discover the set of usable metrics and be able to do something useful with that information (e.g. log the metric).\r\n    * The API should enable collecting a subset of metrics programmatically. For example, one might want to \u201ccollect all memory-related metrics\u201d or \u201ccollect all metrics which are efficient to collect\u201d.\r\n1. Performance.\r\n    * Must have a minimized effect on the metrics it returns in the steady-state.\r\n    * Should scale up to 100s of metrics, an amount that a human might consider \u201ca lot.\u201d\r\n        * Note that picking the right types to expose can limit the amount of metrics we need to expose. For example, a distribution type would significantly reduce the number of metrics.\r\n1. Ergonomics.\r\n    * The API should be as easy to use as it can be, given the above.\r\n\r\n## Design\r\n\r\nSee full design document at https://golang.org/design/37112-unstable-runtime-metrics.\r\n\r\nHighlights:\r\n* Expose a new sampling-based API in a new package, the `runtime/metrics` package.\r\n* Use string keys for each metric which include the unit of the metric in an easily-parseable format.\r\n* Expose a discovery API which provides metadata about each metric at runtime, such as whether it requires a STW and whether it's cumulative (counter as opposed to a gauge).\r\n* Add a Histogram interface to the package which represents a distribution.\r\n* Support for event-based metrics is discussed and left open, but considered outside the scope of this proposal.\r\n\r\n## Backwards Compatibility\r\n\r\nNote that although the set of metrics the runtime exposes will not be stable across Go versions, the API to discover and access those metrics will be.\r\n\r\nTherefore, this proposal strictly increases the API surface of the Go standard library without changing any existing functionality and is therefore Go 1 compatible.\r\n",
    "closed_at": "2022-04-05T17:55:22Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1248668?v=4",
        "events_url": "https://api.github.com/users/mknyszek/events{/privacy}",
        "followers_url": "https://api.github.com/users/mknyszek/followers",
        "following_url": "https://api.github.com/users/mknyszek/following{/other_user}",
        "gists_url": "https://api.github.com/users/mknyszek/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mknyszek",
        "id": 1248668,
        "login": "mknyszek",
        "node_id": "MDQ6VXNlcjEyNDg2Njg=",
        "organizations_url": "https://api.github.com/users/mknyszek/orgs",
        "received_events_url": "https://api.github.com/users/mknyszek/received_events",
        "repos_url": "https://api.github.com/users/mknyszek/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mknyszek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mknyszek/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mknyszek"
    },
    "comments": 22,
    "comments_url": "https://api.github.com/repos/golang/go/issues/37112/comments",
    "created_at": "2020-02-07T16:14:27Z",
    "events_url": "https://api.github.com/repos/golang/go/issues/37112/events",
    "html_url": "https://github.com/golang/go/issues/37112",
    "id": 561734067,
    "labels": [
        {
            "color": "ededed",
            "default": false,
            "description": null,
            "id": 236419512,
            "name": "Proposal",
            "node_id": "MDU6TGFiZWwyMzY0MTk1MTI=",
            "url": "https://api.github.com/repos/golang/go/labels/Proposal"
        },
        {
            "color": "009800",
            "default": false,
            "description": null,
            "id": 246350233,
            "name": "Proposal-Accepted",
            "node_id": "MDU6TGFiZWwyNDYzNTAyMzM=",
            "url": "https://api.github.com/repos/golang/go/labels/Proposal-Accepted"
        }
    ],
    "labels_url": "https://api.github.com/repos/golang/go/issues/37112/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 1686,
        "created_at": "2019-10-09T17:14:22Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
            "events_url": "https://api.github.com/users/rsc/events{/privacy}",
            "followers_url": "https://api.github.com/users/rsc/followers",
            "following_url": "https://api.github.com/users/rsc/following{/other_user}",
            "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rsc",
            "id": 104030,
            "login": "rsc",
            "node_id": "MDQ6VXNlcjEwNDAzMA==",
            "organizations_url": "https://api.github.com/users/rsc/orgs",
            "received_events_url": "https://api.github.com/users/rsc/received_events",
            "repos_url": "https://api.github.com/users/rsc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rsc"
        },
        "description": null,
        "due_on": null,
        "html_url": "https://github.com/golang/go/milestone/117",
        "id": 4737058,
        "labels_url": "https://api.github.com/repos/golang/go/milestones/117/labels",
        "node_id": "MDk6TWlsZXN0b25lNDczNzA1OA==",
        "number": 117,
        "open_issues": 2352,
        "state": "open",
        "title": "Backlog",
        "updated_at": "2023-06-08T03:33:27Z",
        "url": "https://api.github.com/repos/golang/go/milestones/117"
    },
    "node_id": "MDU6SXNzdWU1NjE3MzQwNjc=",
    "number": 37112,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 10,
        "-1": 0,
        "confused": 0,
        "eyes": 3,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 13,
        "url": "https://api.github.com/repos/golang/go/issues/37112/reactions"
    },
    "repository_url": "https://api.github.com/repos/golang/go",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/golang/go/issues/37112/timeline",
    "title": "runtime: API for unstable metrics",
    "updated_at": "2022-06-23T08:30:28Z",
    "url": "https://api.github.com/repos/golang/go/issues/37112",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1248668?v=4",
        "events_url": "https://api.github.com/users/mknyszek/events{/privacy}",
        "followers_url": "https://api.github.com/users/mknyszek/followers",
        "following_url": "https://api.github.com/users/mknyszek/following{/other_user}",
        "gists_url": "https://api.github.com/users/mknyszek/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mknyszek",
        "id": 1248668,
        "login": "mknyszek",
        "node_id": "MDQ6VXNlcjEyNDg2Njg=",
        "organizations_url": "https://api.github.com/users/mknyszek/orgs",
        "received_events_url": "https://api.github.com/users/mknyszek/received_events",
        "repos_url": "https://api.github.com/users/mknyszek/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mknyszek/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mknyszek/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mknyszek"
    }
}