{
    "active_lock_reason": "too heated",
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "## I'm submitting a...\r\n<!-- Check one of the following options with \"x\" -->\r\n<pre><code>[ ] Regression (a behavior that used to work and stopped working in a new release)\r\n[ ] Bug report  <!-- Please search GitHub for a similar issue or PR before submitting -->\r\n[ ] Performance issue\r\n[ ] Feature request\r\n[ ] Documentation issue or request\r\n[ ] Support request\r\n[x] Other... Please describe:  message to the developers of Angular for feedback\r\n</code></pre>\r\n\r\n## Current behavior\r\n\r\nI have been working with Angular since 2013 (I started with AngularJS). I also write articles on habrahabr.ru and medium.com about Angular. So I have been collecting a lot of statistics and feedback from most people over those years.\r\n\r\nAnd what did I find out in 5 years of working with Angular?\r\n\r\nAngularJS was considered to be too high-level language and therefore everyone who already had experience with jQuery or other things that work as a simple JavaScript could quickly understand it. Angular 2+ has become too low-level and no longer resembles Java, and it feels like working with C++, when you have to do everything with your hands, keep track of everything and grasp on time things that seem to occasionally drift away. Angular 2+ can also be understood, but not immediately.\r\n\r\n1. You forgot to make an unsubscribe in the components when they are destroyed - you get a memory leak. \r\n\r\n2. You work with large data streams in the application and did not find out how to optimize your application, and/or did not change components on OnPush \u2013 you get severe performance drop. \r\n\r\n3. The customer changed the business requirement, he wants dynamic components, and a small bandle \u2013 say goodbye to the technological stack of Angular. Because it is unreal to do it by hand, when you do not even have the experience, especially while time is running out. Even the original ng-component-outlet did not work as it should, and to write your own solution you must have skills on a Senior level at least. I hope Angular Elements will save the day for us. \r\n\r\n4. Junior developer included setInterval in the component and did not wrap the start outside the zone \u2013 again, performance decline for you. \r\n\r\n5. In AngularJS there was such property at the directive, as setValidate (or something of that kind), I actively used it, everything was cool. When creating a custom validator, you need to ensure that you do not overwrite existing ones, for what? In doing so, you create more than one validator, and all at once. That is, you cannot simply add a validator if you already have required, for example: firstly, you specify the required validator, and then - your own. And still you have to keep in mind whether he is active, or maybe there is already a field filled. Currently there is no such thing and you have to create custom validator as a whole in a separate class with accessories, and even then you can\u2019t be sure if you\u2019re doing fine. \r\n\r\n6. To create your custom ngModel, you have to rewrite a ton of code, a whole class with ControlValueAccesor and a stock full of methods. But even if you use your own banana-box attribute on the component, if you forgot to make emit from the component of the event, you will not even be warned about it.\r\n\r\n7. In Angular CLI, since 1.6.5 strange bugs began to appear and something fails all the time, making it necessary to restart the dev-server. When my project was written on pure Webpack and Angular, I had not experienced such problems before.\r\n\r\n8. If I want to use the web-worker platform, I have to do an eject, and on the whole Internet there is only a couple of articles on how to further run web-riches. \r\n\r\n9. There are declarative and reactive forms. But when I'm working with one enormous entity, I have to do a lot of work to map fields in both the class and the template. Moreover, if I use declarative forms, I lose the advantage in future, where jet forms could do better. \r\n\r\n10. Tests are painful. Angular is the only framework with Dependency Injection built-in, but it brings a lot of pain as well. All these mandatory dependencies for the DI component do not let you live happily while writing tests. Writing tests in Angular is as tedious as nowhere else. The component designer requires you to include everything at all. Even if you're not going to test it. \r\n\r\n11. Routing is completely untyped; should I switch the module directories, not even the Webstorm IDEA or VSC will not help me in putting those paths correctly.\r\n\r\nAngular is overcomplicated. And at first sight in many cases this is not justified. There are not enough \"convenient\" things. Well, take the router, he has a directive for adding an active class. But why is there no such directive for checking the current route? Not the URL, but the very route. As it is made in UI-router, where you can check individually all the segments at the template level. This is a simple thing, I needed it in all projects, on the first and second Angular both. Without exception. When on one page you show one top hat, and other top hat on the other one. Same thing with background pictures. In general, the range of tasks for this thing is diverse and huge. The day before yesterday, I once again had to make up something with this. But I did it.\r\n\r\nNow let\u2019s take a person who just wants to study Angular and tries to find out what is frequently asked on an interview, what should he study and in which way? And so, most of the beginning developers, they do not find a one-step solution, they start making their own solution, they see it over-complicated and they switch to Vue. Not because it's simpler, but because of the total number of complications and the lack of detail in Angular. Which, seems, is a framework for robots.\r\n\r\nAt first it seemed that Angular was poorly designed. But in fact, no, it\u2019s not.You get tired very quickly while using it, however, and there are no alternatives yet. Neither Vue nor React seem to suit me, and I do not want to write jQuery any more. Angular does not make it simpler for the developer, not for a single moment. From the very first line, you are doomed to seek solutions, something to redefine and make yourself comfortable with your \u201cbare hands\u201d.\r\n\r\nIt's cool when you can do it, when there is such an opportunity, but not when you are forced to do this through all the work process. Modern front-end developers have to solve problems, not to engage in academic research, which framework is better or faster scaled in the first place. It is necessary for it to be easy and reliable. React is easy, but it is not reliable, Angular is reliable, but is not easy. Many people now see the balance in Vue, but it's not balanced as they see it. This is a hellish mixture of 80% React and 20% AngularJS. By reliability, I mean, first of all, the probability of code getting \u201csmelly\u201d, if you know what I mean. JSX itself is a shitty code, to be fair. Regarding React - statistics confirm that the amount of such poor-quality code is just off-scale.\r\n\r\nContinuous complaints. And all companies only seek Seniors, who can fix poor-written code.\r\n\r\nAbout the state of the application. Redux - this is also not a good implementation, I'm getting more and more convinced in this opinion. It actually tends more to the ideology of Angular, where you have to describe the elementary things like it\u2019s some kind of multi-volume advanced research study. And it does not protect you against unforeseen changes, plus it forces its architecture upon you. It just appeared before Mobx and Dan Abramov speaks for it, and Dan\u2019s opinion influences not very experienced programmers, which are a big group among the React developers\r\n\r\n## Expected behavior\r\n\r\nI want to know if there are any plans to reduce complexity and simplify the framework. To make it easier to start developing any projects on Angular at any level of preparation, so that the project can easily be increased, while being based on the technological stack of Angular.\r\n\r\nIf we had something simple as StencilJS out of the box and could easily scale to full components and modules, I think many would be happy. I would like Angular to be more popular and inquired on all markets, not only more popular or better than AngularJS only.\r\n\r\nI like Angular and I want everything to be\u00a0fine (pin medium [publish](https://medium.com/@splincode/why-is-angular-can-be-over-complicated-eda09933cb2a)).",
    "closed_at": "2018-04-23T04:57:44Z",
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/u/534930?v=4",
        "events_url": "https://api.github.com/users/robwormald/events{/privacy}",
        "followers_url": "https://api.github.com/users/robwormald/followers",
        "following_url": "https://api.github.com/users/robwormald/following{/other_user}",
        "gists_url": "https://api.github.com/users/robwormald/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/robwormald",
        "id": 534930,
        "login": "robwormald",
        "node_id": "MDQ6VXNlcjUzNDkzMA==",
        "organizations_url": "https://api.github.com/users/robwormald/orgs",
        "received_events_url": "https://api.github.com/users/robwormald/received_events",
        "repos_url": "https://api.github.com/users/robwormald/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/robwormald/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/robwormald/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/robwormald"
    },
    "comments": 36,
    "comments_url": "https://api.github.com/repos/angular/angular/issues/23337/comments",
    "created_at": "2018-04-12T13:01:13Z",
    "events_url": "https://api.github.com/repos/angular/angular/issues/23337/events",
    "html_url": "https://github.com/angular/angular/issues/23337",
    "id": 313716899,
    "labels": [],
    "labels_url": "https://api.github.com/repos/angular/angular/issues/23337/labels{/name}",
    "locked": true,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMTM3MTY4OTk=",
    "number": 23337,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 25,
        "-1": 12,
        "confused": 0,
        "eyes": 0,
        "heart": 11,
        "hooray": 3,
        "laugh": 4,
        "rocket": 0,
        "total_count": 55,
        "url": "https://api.github.com/repos/angular/angular/issues/23337/reactions"
    },
    "repository_url": "https://api.github.com/repos/angular/angular",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/angular/angular/issues/23337/timeline",
    "title": "Why Angular can be overcomplicated?",
    "updated_at": "2018-04-23T04:57:44Z",
    "url": "https://api.github.com/repos/angular/angular/issues/23337",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/12021443?v=4",
        "events_url": "https://api.github.com/users/splincode/events{/privacy}",
        "followers_url": "https://api.github.com/users/splincode/followers",
        "following_url": "https://api.github.com/users/splincode/following{/other_user}",
        "gists_url": "https://api.github.com/users/splincode/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/splincode",
        "id": 12021443,
        "login": "splincode",
        "node_id": "MDQ6VXNlcjEyMDIxNDQz",
        "organizations_url": "https://api.github.com/users/splincode/orgs",
        "received_events_url": "https://api.github.com/users/splincode/received_events",
        "repos_url": "https://api.github.com/users/splincode/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/splincode/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/splincode/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/splincode"
    }
}