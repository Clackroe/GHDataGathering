[
    {
        "author_association": "NONE",
        "body": "Operator ? looks less noticeable than \"check\".",
        "created_at": "2018-09-08T16:11:25Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419654403",
        "id": 419654403,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY1NDQwMw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419654403/reactions"
        },
        "updated_at": "2018-09-08T16:11:25Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419654403",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4464013?v=4",
            "events_url": "https://api.github.com/users/PeterRK/events{/privacy}",
            "followers_url": "https://api.github.com/users/PeterRK/followers",
            "following_url": "https://api.github.com/users/PeterRK/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterRK/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/PeterRK",
            "id": 4464013,
            "login": "PeterRK",
            "node_id": "MDQ6VXNlcjQ0NjQwMTM=",
            "organizations_url": "https://api.github.com/users/PeterRK/orgs",
            "received_events_url": "https://api.github.com/users/PeterRK/received_events",
            "repos_url": "https://api.github.com/users/PeterRK/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/PeterRK/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterRK/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/PeterRK"
        }
    },
    {
        "author_association": "NONE",
        "body": "@PeterRK you might want to state whether that is a good or a bad thing! I am assuming it is a critique.\r\n\r\nOne advantage of this proposal is that it is not breaking any new ground, but instead following the lead of Rust (but adding a handler component). So we could survey Rust users to see if noticeably of `?` is a problem.\r\n\r\nAlthough I have a preference for `?`, I want to note that I would be perfectly happy with this proposal being accepted but modified to use `check` instead.\r\n",
        "created_at": "2018-09-09T00:02:05Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419680964",
        "id": 419680964,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY4MDk2NA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419680964/reactions"
        },
        "updated_at": "2018-09-09T00:02:05Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419680964",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1183?v=4",
            "events_url": "https://api.github.com/users/gregwebs/events{/privacy}",
            "followers_url": "https://api.github.com/users/gregwebs/followers",
            "following_url": "https://api.github.com/users/gregwebs/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregwebs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gregwebs",
            "id": 1183,
            "login": "gregwebs",
            "node_id": "MDQ6VXNlcjExODM=",
            "organizations_url": "https://api.github.com/users/gregwebs/orgs",
            "received_events_url": "https://api.github.com/users/gregwebs/received_events",
            "repos_url": "https://api.github.com/users/gregwebs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gregwebs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregwebs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gregwebs"
        }
    },
    {
        "author_association": "NONE",
        "body": "https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling.md#considered-ideas",
        "created_at": "2018-09-09T00:09:27Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419681276",
        "id": 419681276,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY4MTI3Ng==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419681276/reactions"
        },
        "updated_at": "2018-09-09T00:09:27Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419681276",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "@gregwebs You are right. Less noticeable may be an advantage.",
        "created_at": "2018-09-09T01:06:39Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419683277",
        "id": 419683277,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY4MzI3Nw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419683277/reactions"
        },
        "updated_at": "2018-09-09T01:06:39Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419683277",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4464013?v=4",
            "events_url": "https://api.github.com/users/PeterRK/events{/privacy}",
            "followers_url": "https://api.github.com/users/PeterRK/followers",
            "following_url": "https://api.github.com/users/PeterRK/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterRK/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/PeterRK",
            "id": 4464013,
            "login": "PeterRK",
            "node_id": "MDQ6VXNlcjQ0NjQwMTM=",
            "organizations_url": "https://api.github.com/users/PeterRK/orgs",
            "received_events_url": "https://api.github.com/users/PeterRK/received_events",
            "repos_url": "https://api.github.com/users/PeterRK/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/PeterRK/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterRK/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/PeterRK"
        }
    },
    {
        "author_association": "NONE",
        "body": "@networkimprov you are right I should explicitly talk about how the question mark was mentioned in \"considered ideas\". In that, the case is made for `check` rather than `?`. \r\nSome of those points are still valid with this proposal, and others are not. This is reviewed in the section \"Appendix: Operator versus check function\".\r\n\r\nI hope we can move the conversation from comparing `?` to `check` (either of which are acceptable to me) to the bigger picture of using regular functions instead of special stacking.",
        "created_at": "2018-09-09T04:45:24Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419690601",
        "id": 419690601,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY5MDYwMQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419690601/reactions"
        },
        "updated_at": "2018-09-09T04:45:24Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419690601",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1183?v=4",
            "events_url": "https://api.github.com/users/gregwebs/events{/privacy}",
            "followers_url": "https://api.github.com/users/gregwebs/followers",
            "following_url": "https://api.github.com/users/gregwebs/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregwebs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gregwebs",
            "id": 1183,
            "login": "gregwebs",
            "node_id": "MDQ6VXNlcjExODM=",
            "organizations_url": "https://api.github.com/users/gregwebs/orgs",
            "received_events_url": "https://api.github.com/users/gregwebs/received_events",
            "repos_url": "https://api.github.com/users/gregwebs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gregwebs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregwebs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gregwebs"
        }
    },
    {
        "author_association": "NONE",
        "body": "There is no doubt in my mind that the next proposal draft from the Go team will add named handlers (or a func type) and drop implicit handler chains, given the feedback to date. It might drop `check` altogether.\r\n\r\nHowever, that isn't enough IMO. My detailed critique: [Golang, how dare you handle my checks!](https://medium.com/@mnmnotmail/golang-how-dare-you-handle-my-checks-d5485f991289)",
        "created_at": "2018-09-09T06:09:47Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419693427",
        "id": 419693427,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY5MzQyNw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419693427/reactions"
        },
        "updated_at": "2018-09-09T06:09:47Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419693427",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "I'll say this a million times - I hate exiting from a function without a return. This should _never_ happen unless there is a catastrophic error (panic). Also, returning an error without adding on to the context should be discouraged. The unary `?` is just a bad idea for Go in general. (Both returning implicitly AND not adding context to the error)\r\n\r\nThe rest of the proposal is interesting, but I'm not sure how much I like the idea of the `?`. I think it means too many things in too many different languages, and it would add to the confusion. (Conditional operator (C), null-safe operation (Kotlin), Coallessing (C#), etc).\r\n\r\nI also feel like the built-in `check` function approach _feels_ more like Go. I like that better than the `?`. You guys discussed it being \"less noticable\" which is \"good\", but I'd say the opposite. It's the potential exit to a function, it _needs_ to be noticable to be maintainable.\r\n\r\nUsing `check(...)` instead of `?` also resolves your \"should we allow `break` and `continue` as the RHS? The answer: no.\r\n\r\nEither way, this shouldn't be about syntax, syntax can be rethought. Let's discuss the idea behind it.\r\n\r\nI think having different function signatures doing different things is an interesting idea, but I don't like it. I think it makes reading code confusing, especially at the call site (\"check site\"?) of the handler function. If I'm reading someone else's code, I don't want to have to scroll back up to the top of the function to see if my code continues or not. The nice thing about the `handle/check` construct is that you _know_ that _if the error is not nil, the function exits_.\r\n\r\nI do like this idea though. Those are my critiques, I like the rest of the proposal. The use of anonymous functions rather than handler blocks is a good idea in my book.",
        "created_at": "2018-09-09T06:35:22Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419694410",
        "id": 419694410,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY5NDQxMA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419694410/reactions"
        },
        "updated_at": "2018-09-09T06:35:22Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419694410",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/3196327?v=4",
            "events_url": "https://api.github.com/users/deanveloper/events{/privacy}",
            "followers_url": "https://api.github.com/users/deanveloper/followers",
            "following_url": "https://api.github.com/users/deanveloper/following{/other_user}",
            "gists_url": "https://api.github.com/users/deanveloper/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/deanveloper",
            "id": 3196327,
            "login": "deanveloper",
            "node_id": "MDQ6VXNlcjMxOTYzMjc=",
            "organizations_url": "https://api.github.com/users/deanveloper/orgs",
            "received_events_url": "https://api.github.com/users/deanveloper/received_events",
            "repos_url": "https://api.github.com/users/deanveloper/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/deanveloper/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deanveloper/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/deanveloper"
        }
    },
    {
        "author_association": "NONE",
        "body": "To expand on the whole function signature thing, here's what I mean:\r\n\r\n```go\r\nfunc errorProne() error {\r\n    handler := func(err error) {\r\n        fmt.Println(\"unimportant error occurred:\", err)\r\n    }\r\n\r\n    // 50 lines later\r\n\r\n    // My internal monologue:\r\n    // \"Does this function exit if there's an error,\r\n    // or does it continue execution?\"\r\n    f := check(os.Create(\"Foo\"), handler)\r\n}\r\n```\r\n\r\nAgain, in the `check/handle` made it clear: `if err != nil, the function will exit`",
        "created_at": "2018-09-09T06:44:19Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419694767",
        "id": 419694767,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY5NDc2Nw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419694767/reactions"
        },
        "updated_at": "2018-09-09T06:44:19Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419694767",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/3196327?v=4",
            "events_url": "https://api.github.com/users/deanveloper/events{/privacy}",
            "followers_url": "https://api.github.com/users/deanveloper/followers",
            "following_url": "https://api.github.com/users/deanveloper/following{/other_user}",
            "gists_url": "https://api.github.com/users/deanveloper/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/deanveloper",
            "id": 3196327,
            "login": "deanveloper",
            "node_id": "MDQ6VXNlcjMxOTYzMjc=",
            "organizations_url": "https://api.github.com/users/deanveloper/orgs",
            "received_events_url": "https://api.github.com/users/deanveloper/received_events",
            "repos_url": "https://api.github.com/users/deanveloper/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/deanveloper/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deanveloper/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/deanveloper"
        }
    },
    {
        "author_association": "NONE",
        "body": "Error handling is a potential control flow changing point, so we care about it.\r\n\r\nThe design in original draft introduces a new control flow changing rule, what we call \"special stacking\" or \"chained handler\". That brings confusion more than convenience.\r\n\r\nSome guys, include me, suggest to use a new control flow changing mark with normal function as error handler. However, how to implement this mark is controversial.",
        "created_at": "2018-09-09T07:38:07Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419697016",
        "id": 419697016,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY5NzAxNg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419697016/reactions"
        },
        "updated_at": "2018-09-09T07:38:07Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419697016",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4464013?v=4",
            "events_url": "https://api.github.com/users/PeterRK/events{/privacy}",
            "followers_url": "https://api.github.com/users/PeterRK/followers",
            "following_url": "https://api.github.com/users/PeterRK/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterRK/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/PeterRK",
            "id": 4464013,
            "login": "PeterRK",
            "node_id": "MDQ6VXNlcjQ0NjQwMTM=",
            "organizations_url": "https://api.github.com/users/PeterRK/orgs",
            "received_events_url": "https://api.github.com/users/PeterRK/received_events",
            "repos_url": "https://api.github.com/users/PeterRK/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/PeterRK/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterRK/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/PeterRK"
        }
    },
    {
        "author_association": "NONE",
        "body": "A named catch block after check/?/etc does the trick nicely :-)\r\n```\r\n?outer f1() // or more Go-like: #outer = f()\r\nfor ... {\r\n   ?inner f2()\r\n   catch inner { ?outer fmt.Errorf(\"loop %v\", inner) } // no return\r\n}\r\ncatch outer { return fmt.Errorf(\"context %v\", outer) }\r\n```",
        "created_at": "2018-09-09T08:14:32Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419698776",
        "id": 419698776,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTY5ODc3Ng==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419698776/reactions"
        },
        "updated_at": "2018-09-09T08:14:32Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419698776",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "@deanveloper I agree with that `if err != nil, the function will exit`. I believe exit on error is the common case. We should focus on the common case. If needing continue, just handle it with old style.\r\n\r\n@networkimprov @gregwebs  I know you guys want to figure out a solution covering all cases. I hope it will be a lightweight one. I think heavy solution is against the philosophy of GO. And the design in original draft is already too heavy to me. ",
        "created_at": "2018-09-09T08:51:50Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419700625",
        "id": 419700625,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcwMDYyNQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419700625/reactions"
        },
        "updated_at": "2018-09-09T08:51:50Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419700625",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4464013?v=4",
            "events_url": "https://api.github.com/users/PeterRK/events{/privacy}",
            "followers_url": "https://api.github.com/users/PeterRK/followers",
            "following_url": "https://api.github.com/users/PeterRK/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterRK/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/PeterRK",
            "id": 4464013,
            "login": "PeterRK",
            "node_id": "MDQ6VXNlcjQ0NjQwMTM=",
            "organizations_url": "https://api.github.com/users/PeterRK/orgs",
            "received_events_url": "https://api.github.com/users/PeterRK/received_events",
            "repos_url": "https://api.github.com/users/PeterRK/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/PeterRK/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterRK/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/PeterRK"
        }
    },
    {
        "author_association": "NONE",
        "body": "Error handling consists of handler and trigger.\r\nLet me ask some questions.\r\n\r\n1) Should trigger be bound with one or more handlers explicitly?\r\nIn the original draft, \"check\" is the trigger. It cannot be bound with any handler explicitly. So a matching rule is needed.\r\n\r\n2) Should handler be special or just a normal function?\r\n\r\n3) Should trigger be a filter or just a consumer?\r\n In the original draft, \"check\" is the filter. It take return values from child function, and filters out the error. But in code `_, #err := function()`, the trigger `#err` is just a consumer.",
        "created_at": "2018-09-09T09:38:13Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419702993",
        "id": 419702993,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcwMjk5Mw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419702993/reactions"
        },
        "updated_at": "2018-09-09T09:38:13Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419702993",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4464013?v=4",
            "events_url": "https://api.github.com/users/PeterRK/events{/privacy}",
            "followers_url": "https://api.github.com/users/PeterRK/followers",
            "following_url": "https://api.github.com/users/PeterRK/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterRK/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/PeterRK",
            "id": 4464013,
            "login": "PeterRK",
            "node_id": "MDQ6VXNlcjQ0NjQwMTM=",
            "organizations_url": "https://api.github.com/users/PeterRK/orgs",
            "received_events_url": "https://api.github.com/users/PeterRK/received_events",
            "repos_url": "https://api.github.com/users/PeterRK/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/PeterRK/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterRK/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/PeterRK"
        }
    },
    {
        "author_association": "NONE",
        "body": "In #27519 (#id/catch model), `#err = f()` filters for non-zero, as stated.",
        "created_at": "2018-09-09T10:06:23Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419704337",
        "id": 419704337,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcwNDMzNw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419704337/reactions"
        },
        "updated_at": "2018-09-09T10:06:23Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419704337",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "@networkimprov I mean that filter can work with pipe.",
        "created_at": "2018-09-09T10:19:35Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419704988",
        "id": 419704988,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcwNDk4OA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419704988/reactions"
        },
        "updated_at": "2018-09-09T10:19:35Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419704988",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4464013?v=4",
            "events_url": "https://api.github.com/users/PeterRK/events{/privacy}",
            "followers_url": "https://api.github.com/users/PeterRK/followers",
            "following_url": "https://api.github.com/users/PeterRK/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterRK/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/PeterRK",
            "id": 4464013,
            "login": "PeterRK",
            "node_id": "MDQ6VXNlcjQ0NjQwMTM=",
            "organizations_url": "https://api.github.com/users/PeterRK/orgs",
            "received_events_url": "https://api.github.com/users/PeterRK/received_events",
            "repos_url": "https://api.github.com/users/PeterRK/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/PeterRK/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterRK/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/PeterRK"
        }
    },
    {
        "author_association": "NONE",
        "body": "See link I posted above re \"critique\" for perspective on nesting calls that return error. (A \"pipe\" is an IPC or stream mechanism btw.)",
        "created_at": "2018-09-09T11:27:37Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419709338",
        "id": 419709338,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcwOTMzOA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419709338/reactions"
        },
        "updated_at": "2018-09-09T11:27:37Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419709338",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "Good luck! @networkimprov ",
        "created_at": "2018-09-09T11:47:56Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419710317",
        "id": 419710317,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcxMDMxNw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419710317/reactions"
        },
        "updated_at": "2018-09-09T11:47:56Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419710317",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/4464013?v=4",
            "events_url": "https://api.github.com/users/PeterRK/events{/privacy}",
            "followers_url": "https://api.github.com/users/PeterRK/followers",
            "following_url": "https://api.github.com/users/PeterRK/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterRK/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/PeterRK",
            "id": 4464013,
            "login": "PeterRK",
            "node_id": "MDQ6VXNlcjQ0NjQwMTM=",
            "organizations_url": "https://api.github.com/users/PeterRK/orgs",
            "received_events_url": "https://api.github.com/users/PeterRK/received_events",
            "repos_url": "https://api.github.com/users/PeterRK/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/PeterRK/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterRK/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/PeterRK"
        }
    },
    {
        "author_association": "NONE",
        "body": "@deanveloper it seems you have misread the proposal. Perhaps I wrote too much, let me know how I can make the section on handler function types more clear. Currently it does state:\r\n\"A cleanup function will automatically be converted to return the original error that would have been passed to it.\"\r\n\r\nIf you write\r\n\r\n``` go\r\n    handler := func(err error) {\r\n        fmt.Println(\"unimportant error occurred:\", err)\r\n    }\r\n```\r\n\r\nWhen used as a handler, the error will still be passed along (see the section on `ThenErr` to show how this can be accomplished).\r\n\r\nIn this proposal, the usage of `check` or `?` always means that the function returns immediately if the error is not nil.",
        "created_at": "2018-09-09T14:20:17Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419719120",
        "id": 419719120,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcxOTEyMA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419719120/reactions"
        },
        "updated_at": "2018-09-09T14:54:34Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419719120",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1183?v=4",
            "events_url": "https://api.github.com/users/gregwebs/events{/privacy}",
            "followers_url": "https://api.github.com/users/gregwebs/followers",
            "following_url": "https://api.github.com/users/gregwebs/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregwebs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gregwebs",
            "id": 1183,
            "login": "gregwebs",
            "node_id": "MDQ6VXNlcjExODM=",
            "organizations_url": "https://api.github.com/users/gregwebs/orgs",
            "received_events_url": "https://api.github.com/users/gregwebs/received_events",
            "repos_url": "https://api.github.com/users/gregwebs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gregwebs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregwebs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gregwebs"
        }
    },
    {
        "author_association": "NONE",
        "body": "@deanveloper thanks for critiquing adding `break/continue`. I removed that section now because I don't like the idea either and it seems to distract from the proposal rather than to clarify.",
        "created_at": "2018-09-09T14:53:54Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419721320",
        "id": 419721320,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcyMTMyMA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419721320/reactions"
        },
        "updated_at": "2018-09-09T14:53:54Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419721320",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1183?v=4",
            "events_url": "https://api.github.com/users/gregwebs/events{/privacy}",
            "followers_url": "https://api.github.com/users/gregwebs/followers",
            "following_url": "https://api.github.com/users/gregwebs/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregwebs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gregwebs",
            "id": 1183,
            "login": "gregwebs",
            "node_id": "MDQ6VXNlcjExODM=",
            "organizations_url": "https://api.github.com/users/gregwebs/orgs",
            "received_events_url": "https://api.github.com/users/gregwebs/received_events",
            "repos_url": "https://api.github.com/users/gregwebs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gregwebs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregwebs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gregwebs"
        }
    },
    {
        "author_association": "NONE",
        "body": "Ah, I see. You are correct I did misread it, although now there's no explicit exit to the function. (See how that can get confusing to a reader? The function doesn't mark an exit, so I didn't think there was one)\r\n\r\nAnyway, there shouldn't be a special case to allow a developer to return the error which occurred without additional context. If they want to do that, they should do it explicitly with `return err`\r\n\r\nAlso, assuming you want to return the zero value for the other numbers is a dangerous game. For instance, let's say I wanted to write the following function:\r\n\r\n```go\r\n// Returns how many occurrences of find exist in the UTF8 encoded reader r\r\nfunc CountOccurences(r io.Reader, find string) (n int, err error)\r\n```\r\n\r\nIf an error occurs, I don't want to return `n=0` because 0 is a valid return value of my function, I'd want to return `n=-1`.\r\n\r\n`check/handle` does this well because the `return` in it's system actually returns to the function, so there's no assumptions about what you're trying to return.\r\n\r\nPerhaps the handler should always be in the form `(error) -> (parent function's return values)`. This kind-of destroys the idea of reusable handler generators (`ThenErr`), though.",
        "created_at": "2018-09-09T15:12:46Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419722585",
        "id": 419722585,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcyMjU4NQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419722585/reactions"
        },
        "updated_at": "2018-09-09T15:12:46Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419722585",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/3196327?v=4",
            "events_url": "https://api.github.com/users/deanveloper/events{/privacy}",
            "followers_url": "https://api.github.com/users/deanveloper/followers",
            "following_url": "https://api.github.com/users/deanveloper/following{/other_user}",
            "gists_url": "https://api.github.com/users/deanveloper/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/deanveloper",
            "id": 3196327,
            "login": "deanveloper",
            "node_id": "MDQ6VXNlcjMxOTYzMjc=",
            "organizations_url": "https://api.github.com/users/deanveloper/orgs",
            "received_events_url": "https://api.github.com/users/deanveloper/received_events",
            "repos_url": "https://api.github.com/users/deanveloper/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/deanveloper/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deanveloper/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/deanveloper"
        }
    },
    {
        "author_association": "NONE",
        "body": "@bmeh (or anyone else that comes along), it would be great if you left your reason for the thumbs down.  The proposal has received a lot of useful critiques around the edge cases of language interaction. \r\nBut I actually have not yet seen a single critique of the core idea of this proposal, including outside this go 2 process where I have shown it to others.\r\n\r\n@networkimprov similarly, it would be great to see critical comments of the core idea here and leave promotions of your proposal on the github issue that is already open for that.",
        "created_at": "2018-09-09T15:19:17Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419723008",
        "id": 419723008,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcyMzAwOA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419723008/reactions"
        },
        "updated_at": "2018-09-09T15:19:17Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419723008",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1183?v=4",
            "events_url": "https://api.github.com/users/gregwebs/events{/privacy}",
            "followers_url": "https://api.github.com/users/gregwebs/followers",
            "following_url": "https://api.github.com/users/gregwebs/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregwebs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gregwebs",
            "id": 1183,
            "login": "gregwebs",
            "node_id": "MDQ6VXNlcjExODM=",
            "organizations_url": "https://api.github.com/users/gregwebs/orgs",
            "received_events_url": "https://api.github.com/users/gregwebs/received_events",
            "repos_url": "https://api.github.com/users/gregwebs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gregwebs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregwebs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gregwebs"
        }
    },
    {
        "author_association": "NONE",
        "body": "I posted a link to a pure critique of check/handle, which largely applies to this proposal. It does not mention #id/catch. I urge you to read it.\r\n\r\nI mentioned a catch block here as a solution to the control flow issue raised above, and used a prefix variation of your `? handler` syntax with it.",
        "created_at": "2018-09-09T18:15:21Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419734321",
        "id": 419734321,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTczNDMyMQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419734321/reactions"
        },
        "updated_at": "2018-09-09T18:15:21Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419734321",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "@deanveloper zero values: thanks for bringing that up. This proposal is essentially for discriminated unions. That is, the non-error value should not exist. I know that use cases do exist for actually returning a tuple of two meaningful values. However, I believe they are rare enough (I have seen thousands of lines of go code that never do this) that it is a mistake to place them as a design constraint on an error handling system. One can still use one of two approaches:\r\n\r\n* use the existing style of error handling\r\n* use an error type that gives back the value you want\r\n\r\nThe latter looks something like this:\r\n\r\n``` go\r\ntype CountOccurencesError struct {\r\n    Count int\r\n    Err error\r\n}\r\nfunc (e CountOccurencesError) Error() string { return e.Err.Error() }\r\n\r\n// Returns how many occurrences of find exist in the UTF8 encoded reader r\r\nfunc CountOccurences(r io.Reader, find string) (n int, err CountOccurencesError)\r\n```\r\n\r\nI believe you do need generics to be able to return the concrete type through an error check.",
        "created_at": "2018-09-09T21:51:12Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419747586",
        "id": 419747586,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc0NzU4Ng==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419747586/reactions"
        },
        "updated_at": "2018-09-09T21:51:12Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419747586",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1183?v=4",
            "events_url": "https://api.github.com/users/gregwebs/events{/privacy}",
            "followers_url": "https://api.github.com/users/gregwebs/followers",
            "following_url": "https://api.github.com/users/gregwebs/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregwebs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gregwebs",
            "id": 1183,
            "login": "gregwebs",
            "node_id": "MDQ6VXNlcjExODM=",
            "organizations_url": "https://api.github.com/users/gregwebs/orgs",
            "received_events_url": "https://api.github.com/users/gregwebs/received_events",
            "repos_url": "https://api.github.com/users/gregwebs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gregwebs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregwebs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gregwebs"
        }
    },
    {
        "author_association": "NONE",
        "body": "@deanveloper no unary form of the check: I would be okay with always requiring an error handler that adds context. But I thought always requiring a handler was probably too heavy-handed for a go community that is not already consistently doing that.\r\n\r\nIf you define a function `identity`, then you just have to write `? identity` if you don't want to add anything to an error. So keep in mind it is easy to subvert the intent.\r\n\r\nAn additional consideration is that some users may be satisfied enough by using stack traces that they don't feel the need to add context in every passing of an error.",
        "created_at": "2018-09-09T21:58:40Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419748040",
        "id": 419748040,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc0ODA0MA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419748040/reactions"
        },
        "updated_at": "2018-09-09T21:58:40Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419748040",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1183?v=4",
            "events_url": "https://api.github.com/users/gregwebs/events{/privacy}",
            "followers_url": "https://api.github.com/users/gregwebs/followers",
            "following_url": "https://api.github.com/users/gregwebs/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregwebs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gregwebs",
            "id": 1183,
            "login": "gregwebs",
            "node_id": "MDQ6VXNlcjExODM=",
            "organizations_url": "https://api.github.com/users/gregwebs/orgs",
            "received_events_url": "https://api.github.com/users/gregwebs/received_events",
            "repos_url": "https://api.github.com/users/gregwebs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gregwebs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregwebs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gregwebs"
        }
    },
    {
        "author_association": "NONE",
        "body": "That's not what I'm trying to say here - what I'm saying is that the zero-value of `int` is meaningful in the `CountOccurences` function, so I would much rather return a `-1` to make it clear that the function doesn't return meaningful information if an error occurs.\r\n\r\nI want to be clear. I don't want the caller to see `0, err`, as it could be mistaken for \"zero occurrences were found before finding the following error\", I want them to see values from the function indicating that the function does not return useful information (other than the error) if an error occurs, which can be done by returning `-1, err`.\r\n\r\nMost of the time `0, err` works, but in my experience, returning `-1, err` is not an uncommon case",
        "created_at": "2018-09-09T22:02:03Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419748223",
        "id": 419748223,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc0ODIyMw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 2,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 2,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419748223/reactions"
        },
        "updated_at": "2018-09-09T22:02:03Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419748223",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/3196327?v=4",
            "events_url": "https://api.github.com/users/deanveloper/events{/privacy}",
            "followers_url": "https://api.github.com/users/deanveloper/followers",
            "following_url": "https://api.github.com/users/deanveloper/following{/other_user}",
            "gists_url": "https://api.github.com/users/deanveloper/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/deanveloper",
            "id": 3196327,
            "login": "deanveloper",
            "node_id": "MDQ6VXNlcjMxOTYzMjc=",
            "organizations_url": "https://api.github.com/users/deanveloper/orgs",
            "received_events_url": "https://api.github.com/users/deanveloper/received_events",
            "repos_url": "https://api.github.com/users/deanveloper/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/deanveloper/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deanveloper/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/deanveloper"
        }
    },
    {
        "author_association": "NONE",
        "body": "@deanveloper sorry for missing your actual concern. I think your level of programming defensiveness is probably appropriate given the lack of discriminated unions in go and the prevalence of zero values. However, it seems not generally applicable (what if I have a `uint`?) and unnecessary. The contract is always that the caller must check the error value before looking at the success value. We shouldn't weaken this proposal because someone is going to ignore errors. There are linters that check for this (errcheck): it would be much more powerful to add that capability to `go vet` or otherwise have this statically checked.",
        "created_at": "2018-09-09T22:40:36Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419750286",
        "id": 419750286,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc1MDI4Ng==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419750286/reactions"
        },
        "updated_at": "2018-09-10T11:29:03Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419750286",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1183?v=4",
            "events_url": "https://api.github.com/users/gregwebs/events{/privacy}",
            "followers_url": "https://api.github.com/users/gregwebs/followers",
            "following_url": "https://api.github.com/users/gregwebs/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregwebs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gregwebs",
            "id": 1183,
            "login": "gregwebs",
            "node_id": "MDQ6VXNlcjExODM=",
            "organizations_url": "https://api.github.com/users/gregwebs/orgs",
            "received_events_url": "https://api.github.com/users/gregwebs/received_events",
            "repos_url": "https://api.github.com/users/gregwebs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gregwebs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregwebs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gregwebs"
        }
    },
    {
        "author_association": "NONE",
        "body": "I personally think that handle is sugar for goto rather than an anonymous function.\r\n\r\nIt seems to be doing this:\r\n```go\r\nfunc something() {\r\n    var __reservedVar error\r\n    {\r\n    errHandle:\r\n        return __reservedVar\r\n    }\r\n    blah, err := x()\r\n    if err != nil {\r\n        __reservedVar = err\r\n        goto errHandle\r\n        return\r\n    }\r\n}\r\n```\r\naka\r\n```go\r\nfunc something() {\r\n    handle err {\r\n        return err\r\n    }\r\n    blah := check x()\r\n}\r\n```\r\nIf you read it like that, the return makes perfect sense. Simplified example.",
        "created_at": "2018-09-10T01:37:02Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419763250",
        "id": 419763250,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc2MzI1MA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419763250/reactions"
        },
        "updated_at": "2018-09-10T01:39:30Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419763250",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/5985165?v=4",
            "events_url": "https://api.github.com/users/Azareal/events{/privacy}",
            "followers_url": "https://api.github.com/users/Azareal/followers",
            "following_url": "https://api.github.com/users/Azareal/following{/other_user}",
            "gists_url": "https://api.github.com/users/Azareal/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/Azareal",
            "id": 5985165,
            "login": "Azareal",
            "node_id": "MDQ6VXNlcjU5ODUxNjU=",
            "organizations_url": "https://api.github.com/users/Azareal/orgs",
            "received_events_url": "https://api.github.com/users/Azareal/received_events",
            "repos_url": "https://api.github.com/users/Azareal/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/Azareal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Azareal/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/Azareal"
        }
    },
    {
        "author_association": "NONE",
        "body": "> The contract is always that the caller must check the error value before looking at the success value\r\n\r\nThis is a very fair point. Although I think that `-1` is still a pretty common thing to return when an error occurs.\r\n\r\nI've said this before, I really like the proposal. It feels very Go-like (at least when using a `check` built-in function), which is hard to come by for proposals not from the Go team themselves.\r\n\r\nI added a +1. Sorry if it seems like I'm nitpicking it pretty hard, just want to make sure everything is considered, this is a really good proposal\r\n\r\n> I personally think that handle is sugar for goto rather than an anonymous function.\r\n\r\nYeah I was the same way. I saw `handle` as more of a goto than a function.\r\n\r\nAlthough both views work and I can see it going both ways. I think it personally makes more sense as a goto (it's how it probably works under the hood, AND just works better in general when it comes to how it returns).",
        "created_at": "2018-09-10T03:51:23Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-419779841",
        "id": 419779841,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc3OTg0MQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/419779841/reactions"
        },
        "updated_at": "2018-09-10T03:52:40Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/419779841",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/3196327?v=4",
            "events_url": "https://api.github.com/users/deanveloper/events{/privacy}",
            "followers_url": "https://api.github.com/users/deanveloper/followers",
            "following_url": "https://api.github.com/users/deanveloper/following{/other_user}",
            "gists_url": "https://api.github.com/users/deanveloper/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/deanveloper",
            "id": 3196327,
            "login": "deanveloper",
            "node_id": "MDQ6VXNlcjMxOTYzMjc=",
            "organizations_url": "https://api.github.com/users/deanveloper/orgs",
            "received_events_url": "https://api.github.com/users/deanveloper/received_events",
            "repos_url": "https://api.github.com/users/deanveloper/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/deanveloper/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deanveloper/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/deanveloper"
        }
    },
    {
        "author_association": "NONE",
        "body": "@deanveloper thanks for the :+1: thorough review, and the good questions!\r\nAlso, please help me promote usage of `errcheck`/`gosec` so that we don't have to bend over backwards with defensive coding practices!\r\n\r\n@ianlancetaylor is there a process to moving this proposal forward with more reviews?",
        "created_at": "2018-09-13T19:10:34Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-421118913",
        "id": 421118913,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTExODkxMw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/421118913/reactions"
        },
        "updated_at": "2018-09-13T19:10:34Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/421118913",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1183?v=4",
            "events_url": "https://api.github.com/users/gregwebs/events{/privacy}",
            "followers_url": "https://api.github.com/users/gregwebs/followers",
            "following_url": "https://api.github.com/users/gregwebs/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregwebs/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gregwebs",
            "id": 1183,
            "login": "gregwebs",
            "node_id": "MDQ6VXNlcjExODM=",
            "organizations_url": "https://api.github.com/users/gregwebs/orgs",
            "received_events_url": "https://api.github.com/users/gregwebs/received_events",
            "repos_url": "https://api.github.com/users/gregwebs/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gregwebs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregwebs/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gregwebs"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "There is a relatively slow moving Go2 proposal review process.",
        "created_at": "2018-09-13T19:28:45Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-421124395",
        "id": 421124395,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTEyNDM5NQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/421124395/reactions"
        },
        "updated_at": "2018-09-13T19:28:45Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/421124395",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4",
            "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}",
            "followers_url": "https://api.github.com/users/ianlancetaylor/followers",
            "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ianlancetaylor",
            "id": 3194333,
            "login": "ianlancetaylor",
            "node_id": "MDQ6VXNlcjMxOTQzMzM=",
            "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs",
            "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events",
            "repos_url": "https://api.github.com/users/ianlancetaylor/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ianlancetaylor"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "Let me expand on that to say that nothing is going to happen in a hurry.  We're going to take the time required to make changes that seem good.",
        "created_at": "2018-09-13T19:29:35Z",
        "html_url": "https://github.com/golang/go/issues/27567#issuecomment-421124667",
        "id": 421124667,
        "issue_url": "https://api.github.com/repos/golang/go/issues/27567",
        "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTEyNDY2Nw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/421124667/reactions"
        },
        "updated_at": "2018-09-13T19:29:35Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/421124667",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4",
            "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}",
            "followers_url": "https://api.github.com/users/ianlancetaylor/followers",
            "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ianlancetaylor",
            "id": 3194333,
            "login": "ianlancetaylor",
            "node_id": "MDQ6VXNlcjMxOTQzMzM=",
            "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs",
            "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events",
            "repos_url": "https://api.github.com/users/ianlancetaylor/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ianlancetaylor"
        }
    }
]