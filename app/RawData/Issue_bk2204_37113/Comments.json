[
    {
        "author_association": "CONTRIBUTOR",
        "body": "/cc @robpike @rsc per [owners](https://dev.golang.org/owners).",
        "created_at": "2020-02-07T17:41:49Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-583521648",
        "id": 583521648,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzUyMTY0OA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/583521648/reactions"
        },
        "updated_at": "2020-02-07T17:41:49Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/583521648",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1924134?v=4",
            "events_url": "https://api.github.com/users/dmitshur/events{/privacy}",
            "followers_url": "https://api.github.com/users/dmitshur/followers",
            "following_url": "https://api.github.com/users/dmitshur/following{/other_user}",
            "gists_url": "https://api.github.com/users/dmitshur/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/dmitshur",
            "id": 1924134,
            "login": "dmitshur",
            "node_id": "MDQ6VXNlcjE5MjQxMzQ=",
            "organizations_url": "https://api.github.com/users/dmitshur/orgs",
            "received_events_url": "https://api.github.com/users/dmitshur/received_events",
            "repos_url": "https://api.github.com/users/dmitshur/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/dmitshur/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dmitshur/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/dmitshur"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "> ### What did you expect to see?\r\n> The same results as calling GetFinalPathNameByHandle: a UNC path.\r\n\r\nI did not try it, but, I suspect, UNC paths wouldn't work in some situations. For example, can you pass UNC path to os.Chdir?\r\n\r\nAlex",
        "created_at": "2020-02-07T22:23:38Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-583642479",
        "id": 583642479,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzY0MjQ3OQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/583642479/reactions"
        },
        "updated_at": "2020-02-07T22:23:38Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/583642479",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/9796621?v=4",
            "events_url": "https://api.github.com/users/alexbrainman/events{/privacy}",
            "followers_url": "https://api.github.com/users/alexbrainman/followers",
            "following_url": "https://api.github.com/users/alexbrainman/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexbrainman/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/alexbrainman",
            "id": 9796621,
            "login": "alexbrainman",
            "node_id": "MDQ6VXNlcjk3OTY2MjE=",
            "organizations_url": "https://api.github.com/users/alexbrainman/orgs",
            "received_events_url": "https://api.github.com/users/alexbrainman/received_events",
            "repos_url": "https://api.github.com/users/alexbrainman/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/alexbrainman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexbrainman/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/alexbrainman"
        }
    },
    {
        "author_association": "NONE",
        "body": "I don't know for certain, but judging by a quick Google search, it appears to be [possible in Ruby](https://stackoverflow.com/questions/35659257/ruby-dir-chdir-not-working-in-loop-using-unc-paths), so I assume one can do that in C-based languages.\r\n\r\nI'm not a Windows developer, so I'm not a good person to ask about the capabilities of Windows.  I'm just a Unix developer trying to make general-purpose software not be terrible on Windows.",
        "created_at": "2020-02-07T23:07:47Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-583654475",
        "id": 583654475,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzY1NDQ3NQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/583654475/reactions"
        },
        "updated_at": "2020-02-07T23:07:47Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/583654475",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "MEMBER",
        "body": "> I don't know for certain, but judging by a quick Google search, it appears to be [possible in Ruby](https://stackoverflow.com/questions/35659257/ruby-dir-chdir-not-working-in-loop-using-unc-paths), so I assume one can do that in C-based languages.\r\n\r\nYou are correct. I was wrong. os.Chdir does work with UNC paths.\r\n\r\nAlex",
        "created_at": "2020-02-08T06:16:50Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-583707530",
        "id": 583707530,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzcwNzUzMA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/583707530/reactions"
        },
        "updated_at": "2020-02-08T06:16:50Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/583707530",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/9796621?v=4",
            "events_url": "https://api.github.com/users/alexbrainman/events{/privacy}",
            "followers_url": "https://api.github.com/users/alexbrainman/followers",
            "following_url": "https://api.github.com/users/alexbrainman/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexbrainman/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/alexbrainman",
            "id": 9796621,
            "login": "alexbrainman",
            "node_id": "MDQ6VXNlcjk3OTY2MjE=",
            "organizations_url": "https://api.github.com/users/alexbrainman/orgs",
            "received_events_url": "https://api.github.com/users/alexbrainman/received_events",
            "repos_url": "https://api.github.com/users/alexbrainman/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/alexbrainman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexbrainman/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/alexbrainman"
        }
    },
    {
        "author_association": "NONE",
        "body": "It is also the case that `filepath.EvalSymlinks` fails to work when canonicalizing paths where there's a junction to a volume that lacks a drive letter (a OneDrive mount is a good example of this).  For example, if `C:\\Users\\User\\OneDrive\\Vault` is a junction pointing to a OneDrive mount and we try to call `filepath.EvalSymlinks(\"C:/Users/Users/OneDrive/Vault/home.git\")`, that will fail with `readlink C:\\Users\\User\\OneDrive\\Vault: The system cannot find the path specified.`\r\n\r\nThis also works with C-based programs.",
        "created_at": "2020-06-25T16:35:06Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-649678172",
        "id": 649678172,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY0OTY3ODE3Mg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/649678172/reactions"
        },
        "updated_at": "2020-06-25T16:35:06Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/649678172",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "NONE",
        "body": "Hey,\r\n\r\nIs there any interest in fixing this?  Right now, there is no cross-platform way to canonicalize a path in Go.  We keep running up against additional cases where the existing behavior doesn't canonicalize paths properly, leading to incompatibility with other programs on the system (notably Git).  This necessarily limits the portability of using Go as a cross-platform language.",
        "created_at": "2020-09-08T19:04:15Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-689076416",
        "id": 689076416,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTA3NjQxNg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/689076416/reactions"
        },
        "updated_at": "2020-09-08T19:04:15Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/689076416",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "NONE",
        "body": "By \"function to canonicalize paths\" do you mean a variation of EvalSymlinks that works on Windows? If so, note that EvalSymlinks is not recommended: #40180 (and probably can't be fixed).\r\n\r\nGo on Windows has a variety of long-standing filesystem bugs. I suggest using x/sys/windows to call the WinAPI if that solves your problem.",
        "created_at": "2020-09-08T19:29:03Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-689088220",
        "id": 689088220,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTA4ODIyMA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/689088220/reactions"
        },
        "updated_at": "2020-09-08T19:29:03Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/689088220",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "I mean a function, when given a path, that returns a canonicalized version of that path.  In other words, the equivalent to `realpath(3)` on Unix or `GetFinalPathNameByHandle` on Windows, and the equivalent to Rust's `std::path::canonicalize`.\r\n\r\nIt isn't helpful to me to call the Windows API because (a) I'm not a Windows programmer and have no clue how to use it, (b) it isn't cross-platform, and (c) this is a function that is generally provided by the standard library.",
        "created_at": "2020-09-08T22:21:55Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-689167053",
        "id": 689167053,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTE2NzA1Mw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/689167053/reactions"
        },
        "updated_at": "2020-09-08T22:21:55Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/689167053",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "NONE",
        "body": "Go has gaps on Windows; I plug them in my code. You've seen the interest this issue evoked :-p\r\n\r\nWhat you need isn't hard. Create a file named yourpkg_windows.go, import \"golang.org/x/sys/windows\", define GetCanonicalPath() to call `CreateFile(\"yourfile\")` (to get a handle) then `GetFinalPathNameByHandle`.\r\n\r\nCreate a file yourpkg_unix.go with a `// +build` directive for your unix platforms. Define GetCanonicalPath() with the solution for unix you already know.",
        "created_at": "2020-09-08T23:09:01Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-689182885",
        "id": 689182885,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTE4Mjg4NQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/689182885/reactions"
        },
        "updated_at": "2020-09-08T23:09:01Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/689182885",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "First of all, I appreciate that you're trying to help.  However, I do feel firmly that this functionality should be in the standard library, since it is in almost every other language, and it is in POSIX.  I don't want to carry a lot of platform-specific code in a program because it's difficult to maintain and test, especially when I don't typically develop on Windows.\r\n\r\nIf Go is known to have known defects on Windows, those should be promptly fixed or clearly documented.  For many purposes, it's fine if code doesn't run or run well on Windows, but there are some cases where it does.  The documentation should clearly and prominently list any limitations with using Go on Windows so that folks can make an informed decision.  Last I checked, the `filepath` documentation didn't indicate such limitations, and hasn't for some time.\r\n\r\nNormally, when I find a bug or missing feature, I would send a patch to implement that functionality.  However, Go has a CLA, and I don't sign CLAs, so any patch I might submit wouldn't be accepted.  If that changes, I'm happy to send a patch to implement this properly if nobody gets to it before me.",
        "created_at": "2020-09-09T00:44:26Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-689229194",
        "id": 689229194,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTIyOTE5NA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 3,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 3,
            "url": "https://api.github.com/repos/golang/go/issues/comments/689229194/reactions"
        },
        "updated_at": "2020-09-09T00:44:26Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/689229194",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "On Unix systems I think the proposed function is the same as `filepath.EvalSymlinks`.\r\n",
        "created_at": "2020-09-09T00:49:18Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-689230793",
        "id": 689230793,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTIzMDc5Mw==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/689230793/reactions"
        },
        "updated_at": "2020-09-09T00:49:18Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/689230793",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4",
            "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}",
            "followers_url": "https://api.github.com/users/ianlancetaylor/followers",
            "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ianlancetaylor",
            "id": 3194333,
            "login": "ianlancetaylor",
            "node_id": "MDQ6VXNlcjMxOTQzMzM=",
            "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs",
            "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events",
            "repos_url": "https://api.github.com/users/ianlancetaylor/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ianlancetaylor"
        }
    },
    {
        "author_association": "NONE",
        "body": "Yes, I believe that they are identical.  `filepath.EvalSymlinks` is, as far as I'm aware, equivalent to `realpath(3)` on Unix and has the semantics I'm looking for.",
        "created_at": "2020-09-09T01:00:47Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-689233862",
        "id": 689233862,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTIzMzg2Mg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/689233862/reactions"
        },
        "updated_at": "2020-09-09T01:00:47Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/689233862",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "NONE",
        "body": "This proposal should probably also deprecate EvalSymlinks, which is seriously broken on Windows, see https://github.com/golang/go/issues/40180#issuecomment-661350111",
        "created_at": "2020-09-09T12:39:24Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-689535665",
        "id": 689535665,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTUzNTY2NQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/689535665/reactions"
        },
        "updated_at": "2020-09-17T18:37:31Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/689535665",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "What does \"canonical\" mean, precisely?\r\n",
        "created_at": "2020-09-16T17:58:19Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-693566618",
        "id": 693566618,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzU2NjYxOA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/693566618/reactions"
        },
        "updated_at": "2020-09-16T17:58:19Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/693566618",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
            "events_url": "https://api.github.com/users/rsc/events{/privacy}",
            "followers_url": "https://api.github.com/users/rsc/followers",
            "following_url": "https://api.github.com/users/rsc/following{/other_user}",
            "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rsc",
            "id": 104030,
            "login": "rsc",
            "node_id": "MDQ6VXNlcjEwNDAzMA==",
            "organizations_url": "https://api.github.com/users/rsc/orgs",
            "received_events_url": "https://api.github.com/users/rsc/received_events",
            "repos_url": "https://api.github.com/users/rsc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rsc"
        }
    },
    {
        "author_association": "NONE",
        "body": "If there are multiple ways to refer to a filename, the canonical path is the absolute filename which uses no indirections and uses the canonical case (that is, the path component as written to the file system) if the system permits case folding.  On Unix, that's the one that contains no symlinks (and, on macOS, uses canonical case and composition).  On Windows, there are many ways to have indirection in a path: symlinks, junctions, SUBST, etc.  (I don't actually know all of the possible ways, since I almost never use Windows).  The canonical form uses none of those indirections and uses the canonical case.\r\n\r\nAnother way to say this is that assuming no hardlinks exist, a file on Unix should have exactly one canonical name whose components are either directories or non-symlink, non-directory (but possibly special) files.",
        "created_at": "2020-09-16T22:27:57Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-693698938",
        "id": 693698938,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzY5ODkzOA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/693698938/reactions"
        },
        "updated_at": "2020-09-16T22:27:57Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/693698938",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "@networkimprov, you make assertions without being specific about them. I am confused about three of the things you've said related to this issue.\r\n\r\n- You linked to #40180 which is making a general software engineering argument along the lines of \"you should never actually replace all the symlinks, that's violating the abstractions that have been set up\". I have some sympathy for that, but if it were true, it would apply not just to EvalSymlinks but also this issue as well. If so, then we should just close this very issue (#37113) as a terrible idea.\r\n\r\n- I see that you mentioned this issue in #40966, which is about some problems with path lengths in EvalSymlinks on Windows. We've had path length problems elsewhere on Windows. Path length issues are usually pretty straightforward to fix. Why would we want to gate a fix to #40966 on a larger design discussion on this issue?\r\n\r\n- Finally, you said, with no links at all, \"This proposal should probably also deprecate EvalSymlinks, which is seriously broken on Windows.\" How is it broken? That comment would be a good place for an issue link.\r\n\r\nThanks.",
        "created_at": "2020-09-17T17:48:49Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-694396279",
        "id": 694396279,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDM5NjI3OQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/694396279/reactions"
        },
        "updated_at": "2020-09-17T17:48:49Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/694396279",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
            "events_url": "https://api.github.com/users/rsc/events{/privacy}",
            "followers_url": "https://api.github.com/users/rsc/followers",
            "following_url": "https://api.github.com/users/rsc/following{/other_user}",
            "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rsc",
            "id": 104030,
            "login": "rsc",
            "node_id": "MDQ6VXNlcjEwNDAzMA==",
            "organizations_url": "https://api.github.com/users/rsc/orgs",
            "received_events_url": "https://api.github.com/users/rsc/received_events",
            "repos_url": "https://api.github.com/users/rsc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rsc"
        }
    },
    {
        "author_association": "NONE",
        "body": "I mentioned #40180 in https://github.com/golang/go/issues/37113#issuecomment-689088220 to suggest that the issue author reconsider canonicalization of paths. I didn't link it again later, but it documents a long list of problems with EvalSymlinks on Windows (which I've now linked).\r\n\r\nRe path length bugs, other instances of those have been left alone, see #21782 & #36375. And here's a list of Windows bugs that mention \"filepath\" https://github.com/golang/go/issues?q=is%3Aopen+is%3Aissue+label%3AOS-Windows+filepath",
        "created_at": "2020-09-17T18:36:17Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-694422606",
        "id": 694422606,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDQyMjYwNg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/694422606/reactions"
        },
        "updated_at": "2020-09-17T18:38:08Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/694422606",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "Canonicalization of paths is required to properly implement any sort of Git support in a project.  More generally, it's required to determine definitively if a path is under a directory, which has a wide variety of general-purpose applications outside of Git.  Whether other people think it is useful in their projects, path canonicalization is commonly used and is almost always provided by the standard library.  Canonicalizing paths is [also recommended by CMU's secure coding guidelines](https://wiki.sei.cmu.edu/confluence/display/c/FIO02-C.+Canonicalize+path+names+originating+from+tainted+sources); while those are for C, there's no reason to think Go is any different.\r\n\r\nI agree that users typically don't want to see canonicalized paths and that path canonicalization cannot be used where there's a security-sensitive race condition, but that doesn't mean it lacks applications elsewhere, just that it's unsuitable for some use cases.",
        "created_at": "2020-09-17T23:31:27Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-694554600",
        "id": 694554600,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDU1NDYwMA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/694554600/reactions"
        },
        "updated_at": "2020-09-17T23:31:27Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/694554600",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "@networkimprov, the path length bugs are left alone only for lack of time. I don't think there's any objection to fixing them as long as it is done correctly and well.\r\n\r\n@bk2204, I'm certainly not arguing against this functionality. I'm trying to understand why EvalSymlinks shouldn't be what provides this functionality on Windows.\r\n\r\n(I do somewhat object to the name \"canonical\": if \"/home/rsc\" symlinks to some device path like \"/u123/g3tah0uojq1/rsc\", I have a hard time calling the latter the \"canonical\" one. And for what it's worth there are plenty of people who disagree with you about what \"determine definitively if a path is under a directory\" should mean. I have the bug reports to prove it. :-) But again, I'm not saying we shouldn't do this. I just think EvalSymlinks is probably the answer.)",
        "created_at": "2020-09-18T16:12:47Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-694956850",
        "id": 694956850,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDk1Njg1MA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/694956850/reactions"
        },
        "updated_at": "2020-09-18T16:12:47Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/694956850",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
            "events_url": "https://api.github.com/users/rsc/events{/privacy}",
            "followers_url": "https://api.github.com/users/rsc/followers",
            "following_url": "https://api.github.com/users/rsc/following{/other_user}",
            "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rsc",
            "id": 104030,
            "login": "rsc",
            "node_id": "MDQ6VXNlcjEwNDAzMA==",
            "organizations_url": "https://api.github.com/users/rsc/orgs",
            "received_events_url": "https://api.github.com/users/rsc/received_events",
            "repos_url": "https://api.github.com/users/rsc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rsc"
        }
    },
    {
        "author_association": "NONE",
        "body": "If you change EvalSymlinks to call `GetFinalPathNameByHandle` on Windows, it may break some apps, so I'm pretty sure Alex wouldn't agree.",
        "created_at": "2020-09-18T17:52:23Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-695003419",
        "id": 695003419,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTAwMzQxOQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/695003419/reactions"
        },
        "updated_at": "2020-09-18T17:52:23Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/695003419",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "> If you change EvalSymlinks to call GetFinalPathNameByHandle on Windows, it may break some apps, so I'm pretty sure Alex wouldn't agree.\r\n\r\nIt would need to keep doing what it's documented to do, namely preserve relative-ness to current directory when possible. That means calling GetFinalPathNameByHandle and fixing up the result a little. But we could still build a function around GetFinalPathNameByHandle that should handle everything Windows can throw at it. \r\n\r\nDid you have a specific breakage in mind?",
        "created_at": "2020-09-23T17:54:36Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-697790128",
        "id": 697790128,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5Nzc5MDEyOA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/697790128/reactions"
        },
        "updated_at": "2020-09-23T17:54:36Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/697790128",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
            "events_url": "https://api.github.com/users/rsc/events{/privacy}",
            "followers_url": "https://api.github.com/users/rsc/followers",
            "following_url": "https://api.github.com/users/rsc/following{/other_user}",
            "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rsc",
            "id": 104030,
            "login": "rsc",
            "node_id": "MDQ6VXNlcjEwNDAzMA==",
            "organizations_url": "https://api.github.com/users/rsc/orgs",
            "received_events_url": "https://api.github.com/users/rsc/received_events",
            "repos_url": "https://api.github.com/users/rsc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rsc"
        }
    },
    {
        "author_association": "NONE",
        "body": "Are you proposing that the behavior differ from `GetFinalPathNameByHandle` (on Windows) only when the path name is relative, or when the path name is absolute as well?  The former is fine, I think, and I have no position on it; the latter would be a problem for interoperability with tools written in other languages.",
        "created_at": "2020-09-23T22:39:42Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-698008354",
        "id": 698008354,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODAwODM1NA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/698008354/reactions"
        },
        "updated_at": "2020-09-23T22:39:42Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/698008354",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "NONE",
        "body": "@alexbrainman what do you think of changing the implementation of `filepath.EvalSymlinks` to just call `GetFinalPathNameByHandle`?\r\n\r\ncc @ericwj",
        "created_at": "2020-09-23T22:48:27Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-698011021",
        "id": 698011021,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODAxMTAyMQ==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/698011021/reactions"
        },
        "updated_at": "2020-09-24T06:47:32Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/698011021",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "Relative paths are not thread-safe. Full stop.\r\n\r\n`EvalSymlinks` should not be fixed but replaced. `GetFinalPathNameByHandle` *always* returns an absolute path. Paths with `\\\\?\\` syntax are always absolute.\r\n\r\n[GetFinalPathNameByHandleA function (fileapi.h) - Win32 apps | Microsoft Docs](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfinalpathnamebyhandlea)\r\n\r\n> The string that is returned by this function uses the \"\\\\\\\\?\\\\\" syntax. For more information, see `CreateFile`.\r\n\r\nThe CMU guidance obviously is written without considering the arguments against `EvalSymlinks` that I wrote up - which is based on guidance from Microsoft, so I don't quite agree with your conclusion that resolving file system driver paths is a proper thing to do while canonicalizing. I have just hastily scanned that document from CMU and I don't immediately see they say you should resolve links. They just mention links could be present for awareness.\r\n\r\nI have written quite a bit of software and I have never considered writing checks like that. Usually path checks involve checking whether they are in some base path - for which `Rel` is better than `EvalSymlinks`. Sure you can ask for a properly cased path and/or fix slashes, but otherwise, why write string handling or comparisons at all? Paths usually come from somewhere. I mean from the working directory, from configuration or perhaps from user input in most cases. Usually those are already trusted without doing any checks. Or they are built from system settings, which are also trusted. That might be circumstantial evidence against your conclusion based on that article but still.\r\n\r\nAlso about the Git example still I think the application should be in control of which links get resolved. Some of the links that make up a path used by Git could still be system administrator controlled which makes it wrong to resolve them and the result dependant on system configuration. Like for my system - most Git paths ran through `EvalSymlinks` on my system will (have to) be volume GUID paths (and hence again all always absolute). But Git should never care about that or go that deep. It's wrong.\r\n\r\nEDIT: The article ignores case-sensitivity issues by using `strncmp`. That is wrong as well. Most software on Windows assumes case-insensitivity, although NTFS is case-sensitive. On Linux, FAT32 is case-insensitive.",
        "created_at": "2020-09-24T14:17:29Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-698374512",
        "id": 698374512,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODM3NDUxMg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/698374512/reactions"
        },
        "updated_at": "2020-09-24T14:36:15Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/698374512",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/9473119?v=4",
            "events_url": "https://api.github.com/users/ericwj/events{/privacy}",
            "followers_url": "https://api.github.com/users/ericwj/followers",
            "following_url": "https://api.github.com/users/ericwj/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericwj/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ericwj",
            "id": 9473119,
            "login": "ericwj",
            "node_id": "MDQ6VXNlcjk0NzMxMTk=",
            "organizations_url": "https://api.github.com/users/ericwj/orgs",
            "received_events_url": "https://api.github.com/users/ericwj/received_events",
            "repos_url": "https://api.github.com/users/ericwj/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ericwj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericwj/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ericwj"
        }
    },
    {
        "author_association": "NONE",
        "body": "As it's not possible to relativize some results of `GetFinalPathNameByHandle`, that could be a cause of breakage if EvalSymlinks is reimplemented with it.",
        "created_at": "2020-09-24T16:37:25Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-698456532",
        "id": 698456532,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODQ1NjUzMg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/698456532/reactions"
        },
        "updated_at": "2020-09-24T16:37:25Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/698456532",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "NONE",
        "body": "> Relative paths are not thread-safe. Full stop.\r\n\r\nThat's not true on modern POSIX systems.  You can open a file descriptor to a directory and operate on a path relative to that file descriptor with the `*at` series of functions.  It may be true on Windows.\r\n\r\n> The CMU guidance obviously is written without considering the arguments against `EvalSymlinks` that I wrote up - which is based on guidance from Microsoft, so I don't quite agree with your conclusion that resolving file system driver paths is a proper thing to do while canonicalizing. I have just hastily scanned that document from CMU and I don't immediately see they say you should resolve links. They just mention links could be present for awareness.\r\n\r\nI agree with some of your points and I've stated so above.  Users usually are not interested in canonical paths.  It's also wrong to use path canonicalization in a case where the possibility of changing path resolution leads to a security problem or buggy behavior.  That's a well known problem on Unix systems and Windows is no different.\r\n\r\nIt is irrelevant to me whether the path is created with a drive letter or not, so I have no position on that argument.\r\n\r\nI agree that `EvalSymlinks`, as it exists today, is broken on Windows and does not do anything interesting or useful in most cases.  That's why I opened this issue.\r\n\r\n> I have written quite a bit of software and I have never considered writing checks like that. Usually path checks involve checking whether they are in some base path - for which `Rel` is better than `EvalSymlinks`. Sure you can ask for a properly cased path and/or fix slashes, but otherwise, why write string handling or comparisons at all? Paths usually come from somewhere. I mean from the working directory, from configuration or perhaps from user input in most cases. Usually those are already trusted without doing any checks. Or they are built from system settings, which are also trusted. That might be circumstantial evidence against your conclusion based on that article but still.\r\n\r\nThe question is not whether you think this feature is valuable.  You need not use it.  The question is whether Go ought to provide access in a portable way to cross-platform functionality that every operating system and every other major language provides and which is used in many projects for good and valuable reasons, and which, even if used imprudently, is required for compatibility with other software already existing for longer than Go has.  The fact that major organizations like CMU recommend this practice is evidence that this feature is important and valuable, even if you disagree.\r\n\r\nPath canonicalization is even more important on Windows than Unix because Windows has case-folding behavior in its file system that depends on attributes related to when the file system was created.  It is therefore impossible without the kernel's help to know the proper name of a file and whether two file names actually refer to the same item on disk, and Windows otherwise lacks the concept of device and inode numbers which are normally used to perform this check on Unix.\r\n\r\n> Also about the Git example still I think the application should be in control of which links get resolved. Some of the links that make up a path used by Git could still be system administrator controlled which makes it wrong to resolve them and the result dependant on system configuration. Like for my system - most Git paths ran through `EvalSymlinks` on my system will (have to) be volume GUID paths (and hence again all always absolute). But Git should never care about that or go that deep. It's wrong.\r\n\r\nI have seen first hand how Git broke when it did not canonicalize paths consistently, and I still have a broken repository on my system from that point.  I am a core contributor to Git and the primary driver of the SHA-256 transition.  I've developed in situations where symlinks and path resolution have important and subtle security implications.  I understand the problem space intimately and why Git has the behavior it does.  Please don't try to to tell me that Git's behavior is wrong here, because it is not.  Whether a path is created by the user, the system administrator, or any other actor does not change whether canonicalization is necessary.",
        "created_at": "2020-09-25T00:02:57Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-698647644",
        "id": 698647644,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODY0NzY0NA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/698647644/reactions"
        },
        "updated_at": "2020-09-25T00:02:57Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/698647644",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/497054?v=4",
            "events_url": "https://api.github.com/users/bk2204/events{/privacy}",
            "followers_url": "https://api.github.com/users/bk2204/followers",
            "following_url": "https://api.github.com/users/bk2204/following{/other_user}",
            "gists_url": "https://api.github.com/users/bk2204/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/bk2204",
            "id": 497054,
            "login": "bk2204",
            "node_id": "MDQ6VXNlcjQ5NzA1NA==",
            "organizations_url": "https://api.github.com/users/bk2204/orgs",
            "received_events_url": "https://api.github.com/users/bk2204/received_events",
            "repos_url": "https://api.github.com/users/bk2204/repos",
            "site_admin": true,
            "starred_url": "https://api.github.com/users/bk2204/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bk2204/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/bk2204"
        }
    },
    {
        "author_association": "NONE",
        "body": "> That's not true on modern POSIX systems. You can open a file descriptor to a directory and operate on a path relative to that file descriptor with the *at series of functions. It may be true on Windows.\r\n\r\nObviously that is the same on any operating system if you just use `Rel` and `Join`. But `EvalSymlinks` makes the path relative to the current working directory and it is that fact that makes it not thread-safe. You can use `Join` but again you need the current working directory as argument, which might have changed in between these two calls.\r\n\r\n> The question is not whether you think this feature is valuable. You need not use it.\r\n\r\nMy argument is not against canonicalization, but against using or fixing `EvalSymlinks` to do it. This whole comment was about using `GetFinalPathNameByHandle` to implement `EvalSymlinks`. It can't be done properly.\r\n\r\n>  Windows otherwise lacks the concept of device and inode numbers\r\n\r\nThere is the concept of object identifiers, but these are an NTFS concept. So yeah sure absolutely, the OS needs to be involved and one of the things that is wrong with `path\\filepath` is that it doesn't involve the OS enough.\r\n\r\n> Please don't try to to tell me that Git's behavior is wrong here, because it is not.\r\n\r\nI don't know what Git does, but I really think it is wrong to resolve all links - even those that are in a parent directory of the Git repo. The issue linked specifically mentions the ability to have files open while these links are being changed and to continue to open files afterwards as long as these links are not in any way, for any length of time, cached. I don't mean to criticize your intimate knowledge and experience with Git development, but the proper way to go is to know which links are part of repository configuration and which ones are system configuration and leave the latter ones forever unresolved.",
        "created_at": "2020-09-25T14:36:20Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-698966262",
        "id": 698966262,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODk2NjI2Mg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/698966262/reactions"
        },
        "updated_at": "2020-09-25T14:36:20Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/698966262",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/9473119?v=4",
            "events_url": "https://api.github.com/users/ericwj/events{/privacy}",
            "followers_url": "https://api.github.com/users/ericwj/followers",
            "following_url": "https://api.github.com/users/ericwj/following{/other_user}",
            "gists_url": "https://api.github.com/users/ericwj/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/ericwj",
            "id": 9473119,
            "login": "ericwj",
            "node_id": "MDQ6VXNlcjk0NzMxMTk=",
            "organizations_url": "https://api.github.com/users/ericwj/orgs",
            "received_events_url": "https://api.github.com/users/ericwj/received_events",
            "repos_url": "https://api.github.com/users/ericwj/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/ericwj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ericwj/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/ericwj"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "The two objections to using GetFinalPathNameByHandle seem to be (1) needing to return absolute paths sometimes, and (2) problems with relative paths and threads changing directories.\r\n\r\nFor (1), EvalSymlinks is _already_ defined to return an absolute path when necessary. If the result of GetFinalPathNameByHandle cannot be made relative to the current directory, then the absolute one can be returned. That's entirely within the documented behavior.\r\n\r\nFor (2), there's nothing wrong with relative paths per se provided the process is not calling os.Chdir. It is Chdir (the write operation) that is not \"thread-safe\", not the relative path evaluation (the read operations). If you have a program that uses Chdir, then yes, use absolute paths. Pass an absolute path to EvalSymlinks and you'll get one out. But if EvalSymlinks is passed a relative path, there is no added harm in returning one.\r\n\r\nIt's really looking to me like we should use GetFinalPathNameByHandle in EvalSymlinks. Are there other reasons we should not?\r\n",
        "created_at": "2020-09-30T16:43:19Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-701509206",
        "id": 701509206,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTUwOTIwNg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/701509206/reactions"
        },
        "updated_at": "2020-09-30T16:43:19Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/701509206",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
            "events_url": "https://api.github.com/users/rsc/events{/privacy}",
            "followers_url": "https://api.github.com/users/rsc/followers",
            "following_url": "https://api.github.com/users/rsc/following{/other_user}",
            "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rsc",
            "id": 104030,
            "login": "rsc",
            "node_id": "MDQ6VXNlcjEwNDAzMA==",
            "organizations_url": "https://api.github.com/users/rsc/orgs",
            "received_events_url": "https://api.github.com/users/rsc/received_events",
            "repos_url": "https://api.github.com/users/rsc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rsc"
        }
    },
    {
        "author_association": "NONE",
        "body": "It may be in-spec to always return an absolute path. But existing apps may rely on the current behavior. It's just conjecture, but the same has torpedoed previous proposals. However I'm not personally opposed to it.\r\n\r\ncc @mattn ",
        "created_at": "2020-09-30T17:45:31Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-701542438",
        "id": 701542438,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTU0MjQzOA==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/701542438/reactions"
        },
        "updated_at": "2020-09-30T17:46:16Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/701542438",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/458838?v=4",
            "events_url": "https://api.github.com/users/networkimprov/events{/privacy}",
            "followers_url": "https://api.github.com/users/networkimprov/followers",
            "following_url": "https://api.github.com/users/networkimprov/following{/other_user}",
            "gists_url": "https://api.github.com/users/networkimprov/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/networkimprov",
            "id": 458838,
            "login": "networkimprov",
            "node_id": "MDQ6VXNlcjQ1ODgzOA==",
            "organizations_url": "https://api.github.com/users/networkimprov/orgs",
            "received_events_url": "https://api.github.com/users/networkimprov/received_events",
            "repos_url": "https://api.github.com/users/networkimprov/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/networkimprov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/networkimprov/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/networkimprov"
        }
    },
    {
        "author_association": "CONTRIBUTOR",
        "body": "> It may be in-spec to always return an absolute path.\r\n\r\nThat's **not** what I'm suggesting. I wrote \"If the result of GetFinalPathNameByHandle cannot be made relative to the current directory, then the absolute one can be returned.\"\r\n\r\nI did **not** write \"The absolute one can be returned always.\"\r\n\r\nBy \"made relative\" I meant transformed to be relative to the current directory by filepath.Rel.\r\n",
        "created_at": "2020-09-30T21:08:08Z",
        "html_url": "https://github.com/golang/go/issues/37113#issuecomment-701646826",
        "id": 701646826,
        "issue_url": "https://api.github.com/repos/golang/go/issues/37113",
        "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTY0NjgyNg==",
        "performed_via_github_app": null,
        "reactions": {
            "+1": 0,
            "-1": 0,
            "confused": 0,
            "eyes": 0,
            "heart": 0,
            "hooray": 0,
            "laugh": 0,
            "rocket": 0,
            "total_count": 0,
            "url": "https://api.github.com/repos/golang/go/issues/comments/701646826/reactions"
        },
        "updated_at": "2020-09-30T21:08:08Z",
        "url": "https://api.github.com/repos/golang/go/issues/comments/701646826",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/104030?v=4",
            "events_url": "https://api.github.com/users/rsc/events{/privacy}",
            "followers_url": "https://api.github.com/users/rsc/followers",
            "following_url": "https://api.github.com/users/rsc/following{/other_user}",
            "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/rsc",
            "id": 104030,
            "login": "rsc",
            "node_id": "MDQ6VXNlcjEwNDAzMA==",
            "organizations_url": "https://api.github.com/users/rsc/orgs",
            "received_events_url": "https://api.github.com/users/rsc/received_events",
            "repos_url": "https://api.github.com/users/rsc/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/rsc"
        }
    }
]