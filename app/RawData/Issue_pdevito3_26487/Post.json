{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "So, I know it's [by design](https://github.com/dotnet/aspnetcore/issues/19404#issuecomment-593653580), but I\u2019m running into another instance where startup getting called twice when using `WebApplicationFactory` is causing me major headaches.\r\n\r\nI added some code for this specific instance below, but the short version is that when I\u2019m adding Auth into my API, it runs fine when doing startup normally, but when using the web host factory it's messing up my auth setup with a `System.InvalidOperationException : Scheme already exists: Identity.Application error.` error. \r\n\r\n## New Feature Request\r\nMaybe I\u2019m just not getting the best way to override things, but in my mind it makes more sense to have (at the the option of using) a distinct StartupTesting or something of that nature that can be run once to configure my testing host exactly how I want. This is how Laravel does it an it seems more manageable. \r\n\u00a0\r\n\u00a0Related to #19404\r\n\u00a0\r\n\r\n## Details on this particular error\r\nWhen using Auth, the API will run fine, but the integration tests will break, throwing a `-------- System.InvalidOperationException : Scheme already exists: Identity.Application` error.\r\n\r\nI started googling for this and it seems like the main resolution is generally to remove `AddDefaultIdentity` to either stop a clash with `IdentityHostingStartup` or prevent [IdentityHostintgStartup.cs](https://stackoverflow.com/questions/51161729/addidentity-fails-invalidoperationexception-scheme-already-exists-identity) from causing some overlap.\r\n\r\nI'm not using AddDefaultIdentity and I'm not seeing a IdentityHostintgStartup.cs get generated, so I'm not quite sure what the deal is here. Presumably, something is calling `AddAuthentication` with the same identity scheme twice. This may be be due to `CustomWebApplicationFactory` running through startup multiple times, but I need to investigate more.\r\n\r\nIt does look like, when debugging any integration test that `services.AddIdentity<ApplicationUser, IdentityRole>().AddEntityFrameworkStores<IdentityDbContext>().AddDefaultTokenProviders();` is getting hit twice and, when commenting that line out, I get a different error: `-------- System.InvalidOperationException : Scheme already exists: Bearer` which, again, is presumably happening because of startup getting run twice in `CustomWebApplicationFactory`.\r\n\r\nWebAppFactory\r\n```csharp\r\n\r\nnamespace VetClinic.Api.Tests\r\n{\r\n    using Infrastructure.Persistence.Contexts;\r\n    using Microsoft.AspNetCore.Hosting;\r\n    using Microsoft.AspNetCore.Mvc.Testing;\r\n    using Microsoft.EntityFrameworkCore;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using Respawn;\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using System.Net.Http;\r\n    using System.Text;\r\n    using System.Threading.Tasks;\r\n    using WebApi;\r\n\r\n    public class CustomWebApplicationFactory : WebApplicationFactory<Startup>\r\n    {\r\n        // checkpoint for respawn to clear the database when spenning up each time\r\n        private static Checkpoint checkpoint = new Checkpoint\r\n        {\r\n            \r\n        };\r\n\r\n        protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n        {\r\n            builder.UseEnvironment(\"Testing\");\r\n\r\n            builder.ConfigureServices(async services =>\r\n            {\r\n                services.AddEntityFrameworkInMemoryDatabase();\r\n\r\n                // Create a new service provider.\r\n                var provider = services\r\n                    .AddEntityFrameworkInMemoryDatabase()\r\n                    .BuildServiceProvider();\r\n\r\n                // Add a database context (VetClinicDbContext) using an in-memory \r\n                // database for testing.\r\n                services.AddDbContext<VetClinicDbContext>(options =>\r\n                {\r\n                    options.UseInMemoryDatabase(\"InMemoryDbForTesting\");\r\n                    options.UseInternalServiceProvider(provider);\r\n                });\r\n\r\n                // Build the service provider.\r\n                var sp = services.BuildServiceProvider();\r\n\r\n                // Create a scope to obtain a reference to the database\r\n                // context (ApplicationDbContext).\r\n                using (var scope = sp.CreateScope())\r\n                {\r\n                    var scopedServices = scope.ServiceProvider;\r\n                    var db = scopedServices.GetRequiredService<VetClinicDbContext>();\r\n\r\n                    // Ensure the database is created.\r\n                    db.Database.EnsureCreated();\r\n\r\n                    try\r\n                    {\r\n                        await checkpoint.Reset(db.Database.GetDbConnection());\r\n                    }\r\n                    catch\r\n                    {\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        public HttpClient GetAnonymousClient()\r\n        {\r\n            return CreateClient();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nStartup\r\n```csharp\r\nnamespace WebApi\r\n{\r\n    using Application;\r\n    using Microsoft.AspNetCore.Builder;\r\n    using Microsoft.AspNetCore.Hosting;\r\n    using Microsoft.Extensions.Configuration;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using Infrastructure.Persistence;\r\n    using Infrastructure.Shared;\r\n    using Infrastructure.Persistence.Seeders;\r\n    using Infrastructure.Persistence.Contexts;\r\n    using WebApi.Extensions;\r\n    using Infrastructure.Identity;\r\n    using Infrastructure.Identity.Entities;\r\n    using Microsoft.AspNetCore.Identity;\r\n    using Infrastructure.Identity.Seeders;\r\n    using WebApi.Services;\r\n    using Application.Interfaces;\r\n\r\n    public class StartupDevelopment\r\n    {\r\n        public IConfiguration _config { get; }\r\n        public StartupDevelopment(IConfiguration configuration)\r\n        {\r\n            _config = configuration;\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to add services to the container.\r\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddCorsService(\"MyCorsPolicy\");\r\n            services.AddApplicationLayer();\r\n            services.AddIdentityInfrastructure(_config);\r\n            services.AddPersistenceInfrastructure(_config);\r\n            services.AddSharedInfrastructure(_config);\r\n            services.AddControllers()\r\n                .AddNewtonsoftJson();\r\n            services.AddApiVersioningExtension();\r\n            services.AddHealthChecks();\r\n            services.AddSingleton<ICurrentUserService, CurrentUserService>();\r\n\r\n            #region Dynamic Services\r\n            services.AddSwaggerExtension();\r\n            #endregion\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            app.UseDeveloperExceptionPage();\r\n\r\n            #region Entity Context Region - Do Not Delete\r\n\r\n                using (var context = app.ApplicationServices.GetService<VetClinicDbContext>())\r\n                {\r\n                    context.Database.EnsureCreated();\r\n\r\n                    #region VetClinicDbContext Seeder Region - Do Not Delete\r\n                    \r\n                    PetSeeder.SeedSamplePetData(app.ApplicationServices.GetService<VetClinicDbContext>());\r\n                    VetSeeder.SeedSampleVetData(app.ApplicationServices.GetService<VetClinicDbContext>());\r\n                    CitySeeder.SeedSampleCityData(app.ApplicationServices.GetService<VetClinicDbContext>());\r\n                    #endregion\r\n                }\r\n\r\n            #endregion\r\n\r\n            #region Identity Context Region - Do Not Delete\r\n\r\n            var userManager = app.ApplicationServices.GetService<UserManager<ApplicationUser>>();\r\n            var roleManager = app.ApplicationServices.GetService<RoleManager<IdentityRole>>();\r\n            RoleSeeder.SeedDemoRolesAsync(roleManager);\r\n\r\n            // user seeders -- do not delete this comment\r\n            pdevitoSeeder.SeedUserAsync(userManager);\r\n\r\n            #endregion\r\n\r\n            app.UseCors(\"MyCorsPolicy\");\r\n\r\n            app.UseRouting();\r\n            app.UseAuthentication();\r\n            app.UseAuthorization();\r\n            app.UseErrorHandlingMiddleware();\r\n            app.UseEndpoints(endpoints =>\r\n            {\r\n                endpoints.MapHealthChecks(\"/api/health\");\r\n                endpoints.MapControllers();\r\n            });\r\n\r\n            #region Dynamic App\r\n            app.UseSwaggerExtension();\r\n            #endregion\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIdentity Extension\r\n```csharp\r\nnamespace Infrastructure.Identity\r\n{\r\n    using Application.Exceptions;\r\n    using Application.Interfaces;\r\n    using Application.Wrappers;\r\n    using Domain.Settings;\r\n    using Infrastructure.Identity.Entities;\r\n    using Infrastructure.Identity.Services;\r\n    using Microsoft.AspNetCore.Authentication.JwtBearer;\r\n    using Microsoft.AspNetCore.Http;\r\n    using Microsoft.AspNetCore.Identity;\r\n    using Microsoft.EntityFrameworkCore;\r\n    using Microsoft.Extensions.Configuration;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using Microsoft.IdentityModel.Tokens;\r\n    using Newtonsoft.Json;\r\n    using System;\r\n    using System.Text;\r\n\r\n    public static class ServiceExtensions\r\n    {\r\n        public static void AddIdentityInfrastructure(this IServiceCollection services, IConfiguration configuration)\r\n        {\r\n            /*services.AddDbContext<IdentityDbContext>(options =>\r\n                options.UseInMemoryDatabase(\"IdentityDb\"));*/\r\n            if (configuration.GetValue<bool>(\"UseInMemoryDatabase\"))\r\n            {\r\n                services.AddDbContext<IdentityDbContext>(options =>\r\n                    options.UseInMemoryDatabase(\"IdentityDb\"));\r\n            }\r\n            else\r\n            {\r\n                services.AddDbContext<IdentityDbContext>(options =>\r\n                options.UseSqlServer(\r\n                    configuration.GetConnectionString(\"IdentityConnection\"),\r\n                    b => b.MigrationsAssembly(typeof(IdentityDbContext).Assembly.FullName)));\r\n            }\r\n            services.AddIdentity<ApplicationUser, IdentityRole>().AddEntityFrameworkStores<IdentityDbContext>().AddDefaultTokenProviders();\r\n\r\n            #region Services\r\n            services.AddScoped<IAccountService, AccountService>();\r\n            #endregion\r\n\r\n            // for craftsman updates to work appropriately, do not remove identity option lines\r\n            services.Configure<IdentityOptions>(options =>\r\n            {\r\n                options.User.RequireUniqueEmail = true;\r\n\r\n                options.Password.RequiredLength = 6;\r\n                options.Password.RequireDigit = true;\r\n                options.Password.RequireLowercase = true;\r\n                options.Password.RequireUppercase = true;\r\n                options.Password.RequireNonAlphanumeric = true;\r\n            });\r\n\r\n            services.Configure<JwtSettings>(configuration.GetSection(\"JwtSettings\"));\r\n            services.AddAuthentication(options =>\r\n            {\r\n                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n            })\r\n                .AddJwtBearer(o =>\r\n                {\r\n                    o.RequireHttpsMetadata = false;\r\n                    o.SaveToken = false;\r\n                    o.TokenValidationParameters = new TokenValidationParameters\r\n                    {\r\n                        ValidateIssuerSigningKey = true,\r\n                        ValidateIssuer = true,\r\n                        ValidateAudience = true,\r\n                        ValidateLifetime = true,\r\n                        ClockSkew = TimeSpan.Zero,\r\n                        ValidIssuer = configuration[\"JwtSettings:Issuer\"],\r\n                        ValidAudience = configuration[\"JwtSettings:Audience\"],\r\n                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration[\"JwtSettings:Key\"]))\r\n                    };\r\n                    o.Events = new JwtBearerEvents()\r\n                    {\r\n                        OnAuthenticationFailed = c =>\r\n                        {\r\n                            c.NoResult();\r\n                            c.Response.StatusCode = 500;\r\n                            c.Response.ContentType = \"text/plain\";\r\n                            return c.Response.WriteAsync(c.Exception.ToString());\r\n                        },\r\n                        OnChallenge = context =>\r\n                        {\r\n                            context.HandleResponse();\r\n                            context.Response.StatusCode = 401;\r\n                            context.Response.ContentType = \"application/json\";\r\n                            var result = JsonConvert.SerializeObject(new Response<string>(\"You are not Authorized\"));\r\n                            return context.Response.WriteAsync(result);\r\n                        },\r\n                        OnForbidden = context =>\r\n                        {\r\n                            context.Response.StatusCode = 403;\r\n                            context.Response.ContentType = \"application/json\";\r\n                            var result = JsonConvert.SerializeObject(new Response<string>(\"You are not authorized to access this resource\"));\r\n                            return context.Response.WriteAsync(result);\r\n                        },\r\n                    };\r\n                });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n",
    "closed_at": null,
    "closed_by": {
        "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
        "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
        "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
        "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
        "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apps/msftbot",
        "id": 48340428,
        "login": "msftbot[bot]",
        "node_id": "MDM6Qm90NDgzNDA0Mjg=",
        "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
        "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
        "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
        "type": "Bot",
        "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    },
    "comments": 16,
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/26487/comments",
    "created_at": "2020-10-01T12:49:24Z",
    "events_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/26487/events",
    "html_url": "https://github.com/dotnet/aspnetcore/issues/26487",
    "id": 712812327,
    "labels": [
        {
            "color": "bfe5bf",
            "default": false,
            "description": null,
            "id": 792032401,
            "name": "investigate",
            "node_id": "MDU6TGFiZWw3OTIwMzI0MDE=",
            "url": "https://api.github.com/repos/dotnet/aspnetcore/labels/investigate"
        },
        {
            "color": "84b6eb",
            "default": true,
            "description": "This issue represents an ask for new feature or an enhancement to an existing one",
            "id": 792032407,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw3OTIwMzI0MDc=",
            "url": "https://api.github.com/repos/dotnet/aspnetcore/labels/enhancement"
        },
        {
            "color": "ededed",
            "default": false,
            "description": "This issue impacts only small number of customers",
            "id": 2399237915,
            "name": "affected-few",
            "node_id": "MDU6TGFiZWwyMzk5MjM3OTE1",
            "url": "https://api.github.com/repos/dotnet/aspnetcore/labels/affected-few"
        },
        {
            "color": "ededed",
            "default": false,
            "description": "This label is used by an internal tool",
            "id": 2399243641,
            "name": "severity-major",
            "node_id": "MDU6TGFiZWwyMzk5MjQzNjQx",
            "url": "https://api.github.com/repos/dotnet/aspnetcore/labels/severity-major"
        },
        {
            "color": "bfdadc",
            "default": false,
            "description": "MVC testing package",
            "id": 2924813384,
            "name": "feature-mvc-testing",
            "node_id": "MDU6TGFiZWwyOTI0ODEzMzg0",
            "url": "https://api.github.com/repos/dotnet/aspnetcore/labels/feature-mvc-testing"
        },
        {
            "color": "5319e7",
            "default": false,
            "description": "",
            "id": 3202089063,
            "name": "area-web-frameworks",
            "node_id": "MDU6TGFiZWwzMjAyMDg5MDYz",
            "url": "https://api.github.com/repos/dotnet/aspnetcore/labels/area-web-frameworks"
        }
    ],
    "labels_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/26487/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 1377,
        "created_at": "2018-01-01T07:20:36Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/34947467?v=4",
            "events_url": "https://api.github.com/users/aspnet-hello/events{/privacy}",
            "followers_url": "https://api.github.com/users/aspnet-hello/followers",
            "following_url": "https://api.github.com/users/aspnet-hello/following{/other_user}",
            "gists_url": "https://api.github.com/users/aspnet-hello/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/aspnet-hello",
            "id": 34947467,
            "login": "aspnet-hello",
            "node_id": "MDQ6VXNlcjM0OTQ3NDY3",
            "organizations_url": "https://api.github.com/users/aspnet-hello/orgs",
            "received_events_url": "https://api.github.com/users/aspnet-hello/received_events",
            "repos_url": "https://api.github.com/users/aspnet-hello/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/aspnet-hello/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aspnet-hello/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/aspnet-hello"
        },
        "description": null,
        "due_on": null,
        "html_url": "https://github.com/dotnet/aspnetcore/milestone/5",
        "id": 3005291,
        "labels_url": "https://api.github.com/repos/dotnet/aspnetcore/milestones/5/labels",
        "node_id": "MDk6TWlsZXN0b25lMzAwNTI5MQ==",
        "number": 5,
        "open_issues": 1364,
        "state": "open",
        "title": "Backlog",
        "updated_at": "2023-06-07T02:22:18Z",
        "url": "https://api.github.com/repos/dotnet/aspnetcore/milestones/5"
    },
    "node_id": "MDU6SXNzdWU3MTI4MTIzMjc=",
    "number": 26487,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 12,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 12,
        "url": "https://api.github.com/repos/dotnet/aspnetcore/issues/26487/reactions"
    },
    "repository_url": "https://api.github.com/repos/dotnet/aspnetcore",
    "state": "open",
    "state_reason": null,
    "timeline_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/26487/timeline",
    "title": "Implement an alternative to startup running twice when using WebApplicationFactory",
    "updated_at": "2023-01-27T22:41:05Z",
    "url": "https://api.github.com/repos/dotnet/aspnetcore/issues/26487",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/24260530?v=4",
        "events_url": "https://api.github.com/users/pdevito3/events{/privacy}",
        "followers_url": "https://api.github.com/users/pdevito3/followers",
        "following_url": "https://api.github.com/users/pdevito3/following{/other_user}",
        "gists_url": "https://api.github.com/users/pdevito3/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pdevito3",
        "id": 24260530,
        "login": "pdevito3",
        "node_id": "MDQ6VXNlcjI0MjYwNTMw",
        "organizations_url": "https://api.github.com/users/pdevito3/orgs",
        "received_events_url": "https://api.github.com/users/pdevito3/received_events",
        "repos_url": "https://api.github.com/users/pdevito3/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pdevito3/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pdevito3/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pdevito3"
    }
}